// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* II_PairData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  II_PairData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestVar_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairDataDWORD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairDataDWORD_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripleDataDWORD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripleDataDWORD_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoingQuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoingQuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestCompleteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestCompleteData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestPairData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestPairData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestId_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinarySaveQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinarySaveQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeEquipAccType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeEquipAccType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeEquip_stCE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeEquip_stCE_reflection_ = NULL;
const ::google::protobuf::Descriptor* stChangeEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChangeEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalismanStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalismanStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalismanStar_Prop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalismanStar_Prop_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalismanData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalismanData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalismanData_Skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalismanData_Skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenePetAutoFun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenePetAutoFun_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenePetSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenePetSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenePetDoSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenePetDoSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenePetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenePetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenePetServerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenePetServerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* optionBaseAutoTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  optionBaseAutoTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* stOptionBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOptionBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDayHonor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDayHonor_reflection_ = NULL;
const ::google::protobuf::Descriptor* stHonorKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHonorKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* stHonorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHonorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* stHonorLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHonorLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* stAddPointLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddPointLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveGuard_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveDropIncreaseTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveDropIncreaseTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* stAccelKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAccelKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* stMapTermData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMapTermData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderSysPresent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderSysPresent_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCopyID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCopyID_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCopyTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCopyTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCopyScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCopyScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCopySceneTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCopySceneTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinarySaveSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinarySaveSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoPropertyIconState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoPropertyIconState_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillStatusElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillStatusElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillStatusElement_Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillStatusElement_Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* stoneSocket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stoneSocket_reflection_ = NULL;
const ::google::protobuf::Descriptor* diamondSoket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  diamondSoket_reflection_ = NULL;
const ::google::protobuf::Descriptor* diamondSoket_Diamond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  diamondSoket_Diamond_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingData_Diamond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingData_Diamond_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingData_ActiveSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingData_ActiveSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* flyPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flyPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* flyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyValues_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyValues_Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyValuesEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyValuesEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyValuesEx_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyValuesEx_Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipBaseValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipBaseValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSplitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSplitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* stChatChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChatChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* stUserShopItemView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserShopItemView_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserShopItemView_PriceTypes_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LockItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LockItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CounterNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* CounterSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeExpItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeExpItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeExpSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeExpSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailOneObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailOneObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailObjects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailObjects_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneShowFuncNpcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneShowFuncNpcData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapFuncNpcList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapFuncNpcList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MusterCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MusterCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* septCartHelpBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  septCartHelpBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* septCartHelpSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  septCartHelpSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryGangData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryGangData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GangServerSyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangServerSyncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockAccountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockAccountData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneStockItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneStockItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfOneStockItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfOneStockItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockTypeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockTypeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeptBuildingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeptBuildingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneChariotSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneChariotSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneChariotBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneChariotBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneChariotBinaryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneChariotBinaryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTempPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTempPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiGuanXiuXianData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiGuanXiuXianData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectDropSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectDropSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* CopyUserMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CopyUserMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCopySceneBinaryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCopySceneBinaryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HorseExtraData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HorseExtraData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMapShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMapShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMainData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcDeathMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcDeathMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipChangeMaterial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipChangeMaterial_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMaxCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMaxCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMaxCount_Count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMaxCount_Count_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossReliveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossReliveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneYaoQianItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneYaoQianItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* YaoQianSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YaoQianSaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonSaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeEquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeEquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CastleExploreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CastleExploreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryCastle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryCastle_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryMakeEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryMakeEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CastlePetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CastlePetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CastleWorkPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CastleWorkPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryCastlePet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryCastlePet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CastlePetState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CastlePetState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CastleStatueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CastleStatueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryCastleStatue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryCastleStatue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplaceSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplaceSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelicUserPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelicUserPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiskTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryRiskTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryRiskTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LifeSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LifeSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryLifeSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryLifeSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayGuideInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayGuideInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonthCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonthCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingSystemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingSystemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatHurtData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatHurtData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FundData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FundData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TotalReSpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TotalReSpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeSpendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeSpendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeclareWarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeclareWarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* FPairDataDWORD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FPairDataDWORD_reflection_ = NULL;
const ::google::protobuf::Descriptor* FPairDataStrDW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FPairDataStrDW_reflection_ = NULL;
const ::google::protobuf::Descriptor* FTripleDataDWORD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FTripleDataDWORD_reflection_ = NULL;
const ::google::protobuf::Descriptor* StpObjectNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StpObjectNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMsgNpcFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMsgNpcFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* FNpcDlgPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FNpcDlgPara_reflection_ = NULL;
const ::google::protobuf::Descriptor* FValueCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FValueCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* FPropertyValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FPropertyValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* FPropertyValues_FValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FPropertyValues_FValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* FNpcMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FNpcMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FCharacterMapShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FCharacterMapShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* FCharacterMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FCharacterMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FNpcDeathMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FNpcDeathMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FCharacterMainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FCharacterMainData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CountryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestStateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumQuestDoubleTimeLimit_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeCycle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CostType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerTitleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CountryOfficerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProfessionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PropGroupType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PropValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ElementAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHANNEL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CounterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CounterFuncType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MusterID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MusterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumUserPresentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* septCartButtonAvailable_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* septCartHelpFunctionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumStockAuctionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumCopySceneType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumSceneType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumSeptBuildingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumMatchQueueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumUserInfluence_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumCountryPower_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumGlobalVar_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumBiGuanXiuXianType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumObjectDropType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CountryOfficeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScoreType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SpeakerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SpreaderGoldState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* empLoginError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* empTipsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* empMagicAttackRetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgBoxServerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* empSceneEntryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* empAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FQuestCompleteCondType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* empPackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FPropValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FProfessionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  II_PairData_descriptor_ = file->message_type(0);
  static const int II_PairData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(II_PairData, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(II_PairData, second_),
  };
  II_PairData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      II_PairData_descriptor_,
      II_PairData::default_instance_,
      II_PairData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(II_PairData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(II_PairData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(II_PairData));
  QuestVar_descriptor_ = file->message_type(1);
  static const int QuestVar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestVar, subid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestVar, value_),
  };
  QuestVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestVar_descriptor_,
      QuestVar::default_instance_,
      QuestVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestVar));
  PairDataDWORD_descriptor_ = file->message_type(2);
  static const int PairDataDWORD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairDataDWORD, para1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairDataDWORD, para2_),
  };
  PairDataDWORD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairDataDWORD_descriptor_,
      PairDataDWORD::default_instance_,
      PairDataDWORD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairDataDWORD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairDataDWORD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairDataDWORD));
  TripleDataDWORD_descriptor_ = file->message_type(3);
  static const int TripleDataDWORD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleDataDWORD, para1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleDataDWORD, para2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleDataDWORD, para3_),
  };
  TripleDataDWORD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripleDataDWORD_descriptor_,
      TripleDataDWORD::default_instance_,
      TripleDataDWORD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleDataDWORD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleDataDWORD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripleDataDWORD));
  QuestData_descriptor_ = file->message_type(4);
  static const int QuestData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, addvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, vars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, accepttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, completesubnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, subquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, questdataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, cartceof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, is_accept_double_),
  };
  QuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestData_descriptor_,
      QuestData::default_instance_,
      QuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestData));
  DoingQuestData_descriptor_ = file->message_type(5);
  static const int DoingQuestData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoingQuestData, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoingQuestData, quest_),
  };
  DoingQuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoingQuestData_descriptor_,
      DoingQuestData::default_instance_,
      DoingQuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoingQuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoingQuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoingQuestData));
  QuestCompleteData_descriptor_ = file->message_type(6);
  static const int QuestCompleteData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestCompleteData, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestCompleteData, quest_),
  };
  QuestCompleteData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestCompleteData_descriptor_,
      QuestCompleteData::default_instance_,
      QuestCompleteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestCompleteData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestCompleteData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestCompleteData));
  QuestPairData_descriptor_ = file->message_type(7);
  static const int QuestPairData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPairData, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPairData, data_),
  };
  QuestPairData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestPairData_descriptor_,
      QuestPairData::default_instance_,
      QuestPairData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPairData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPairData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestPairData));
  QuestId_descriptor_ = file->message_type(8);
  static const int QuestId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestId, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestId, subid_),
  };
  QuestId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestId_descriptor_,
      QuestId::default_instance_,
      QuestId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestId));
  BinarySaveQuest_descriptor_ = file->message_type(9);
  static const int BinarySaveQuest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveQuest, questsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveQuest, completedquests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveQuest, globlequestvars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveQuest, dailyquestscompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveQuest, cyclequestscompleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveQuest, cancelquestid_),
  };
  BinarySaveQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinarySaveQuest_descriptor_,
      BinarySaveQuest::default_instance_,
      BinarySaveQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinarySaveQuest));
  ChangeEquipAccType_descriptor_ = file->message_type(10);
  static const int ChangeEquipAccType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipAccType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipAccType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipAccType, index_),
  };
  ChangeEquipAccType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeEquipAccType_descriptor_,
      ChangeEquipAccType::default_instance_,
      ChangeEquipAccType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipAccType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipAccType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeEquipAccType));
  ChangeEquip_descriptor_ = file->message_type(11);
  static const int ChangeEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip, changeequips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip, changeequipaccs_),
  };
  ChangeEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeEquip_descriptor_,
      ChangeEquip::default_instance_,
      ChangeEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeEquip));
  ChangeEquip_stCE_descriptor_ = ChangeEquip_descriptor_->nested_type(0);
  static const int ChangeEquip_stCE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip_stCE, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip_stCE, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip_stCE, id_),
  };
  ChangeEquip_stCE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeEquip_stCE_descriptor_,
      ChangeEquip_stCE::default_instance_,
      ChangeEquip_stCE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip_stCE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquip_stCE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeEquip_stCE));
  stChangeEquip_descriptor_ = file->message_type(12);
  static const int stChangeEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeEquip, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeEquip, acckeyid_),
  };
  stChangeEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChangeEquip_descriptor_,
      stChangeEquip::default_instance_,
      stChangeEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChangeEquip));
  TalismanStar_descriptor_ = file->message_type(13);
  static const int TalismanStar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanStar, prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanStar, index_),
  };
  TalismanStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalismanStar_descriptor_,
      TalismanStar::default_instance_,
      TalismanStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalismanStar));
  TalismanStar_Prop_descriptor_ = TalismanStar_descriptor_->nested_type(0);
  static const int TalismanStar_Prop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanStar_Prop, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanStar_Prop, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanStar_Prop, star_),
  };
  TalismanStar_Prop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalismanStar_Prop_descriptor_,
      TalismanStar_Prop::default_instance_,
      TalismanStar_Prop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanStar_Prop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanStar_Prop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalismanStar_Prop));
  TalismanData_descriptor_ = file->message_type(14);
  static const int TalismanData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, borne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, starprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, freshnum_),
  };
  TalismanData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalismanData_descriptor_,
      TalismanData::default_instance_,
      TalismanData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalismanData));
  TalismanData_Skill_descriptor_ = TalismanData_descriptor_->nested_type(0);
  static const int TalismanData_Skill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData_Skill, id_),
  };
  TalismanData_Skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalismanData_Skill_descriptor_,
      TalismanData_Skill::default_instance_,
      TalismanData_Skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData_Skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalismanData_Skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalismanData_Skill));
  ScenePetAutoFun_descriptor_ = file->message_type(15);
  static const int ScenePetAutoFun_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, canautopickup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, canautoaddhpmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, lesshpper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, usehpobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, lessmpper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, usempobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, usepethpobj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, lesspethpper_),
  };
  ScenePetAutoFun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScenePetAutoFun_descriptor_,
      ScenePetAutoFun::default_instance_,
      ScenePetAutoFun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetAutoFun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScenePetAutoFun));
  ScenePetSkillData_descriptor_ = file->message_type(16);
  static const int ScenePetSkillData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetSkillData, petskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetSkillData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetSkillData, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetSkillData, usertype_),
  };
  ScenePetSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScenePetSkillData_descriptor_,
      ScenePetSkillData::default_instance_,
      ScenePetSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScenePetSkillData));
  ScenePetDoSkill_descriptor_ = file->message_type(17);
  static const int ScenePetDoSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetDoSkill, userate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetDoSkill, target_),
  };
  ScenePetDoSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScenePetDoSkill_descriptor_,
      ScenePetDoSkill::default_instance_,
      ScenePetDoSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetDoSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetDoSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScenePetDoSkill));
  ScenePetData_descriptor_ = file->message_type(18);
  static const int ScenePetData_offsets_[51] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, uselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, petbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, enhancelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, mettle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, happy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, dexterity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, mentality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, constitution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, growuplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, streaptitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, dextaptitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, mentaptitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, consaptitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, pmaxattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, mmaxattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, pminattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, mminattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, pdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, mdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, heavyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, luckyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, attackspeedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, movespeedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, memory_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, equipgrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, activeskillgrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, activeskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, equipitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, killenemycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, growup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, freepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, aptitudelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, activeskill_cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, indentify_growup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, lingqi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, lingqiattr_),
  };
  ScenePetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScenePetData_descriptor_,
      ScenePetData::default_instance_,
      ScenePetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScenePetData));
  ScenePetServerData_descriptor_ = file->message_type(19);
  static const int ScenePetServerData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, maxlife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, skillmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, create_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, ai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, initlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, intiattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, retrnaptilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, retrnapti_),
  };
  ScenePetServerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScenePetServerData_descriptor_,
      ScenePetServerData::default_instance_,
      ScenePetServerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePetServerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScenePetServerData));
  optionBaseAutoTeamMember_descriptor_ = file->message_type(20);
  static const int optionBaseAutoTeamMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(optionBaseAutoTeamMember, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(optionBaseAutoTeamMember, name_),
  };
  optionBaseAutoTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      optionBaseAutoTeamMember_descriptor_,
      optionBaseAutoTeamMember::default_instance_,
      optionBaseAutoTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(optionBaseAutoTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(optionBaseAutoTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(optionBaseAutoTeamMember));
  stOptionBase_descriptor_ = file->message_type(21);
  static const int stOptionBase_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, allowteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, allowtrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, allowsept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, allowgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, allowfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, allowbanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, allowintoteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, intoteam_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, teammember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, autoride_),
  };
  stOptionBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOptionBase_descriptor_,
      stOptionBase::default_instance_,
      stOptionBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOptionBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOptionBase));
  stDayHonor_descriptor_ = file->message_type(22);
  static const int stDayHonor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDayHonor, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDayHonor, time_),
  };
  stDayHonor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDayHonor_descriptor_,
      stDayHonor::default_instance_,
      stDayHonor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDayHonor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDayHonor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDayHonor));
  stHonorKill_descriptor_ = file->message_type(23);
  static const int stHonorKill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorKill, revenuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorKill, honorkilltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorKill, revenkilltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorKill, killcounter_),
  };
  stHonorKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHonorKill_descriptor_,
      stHonorKill::default_instance_,
      stHonorKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHonorKill));
  stHonorData_descriptor_ = file->message_type(24);
  static const int stHonorData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorData, honor_),
  };
  stHonorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHonorData_descriptor_,
      stHonorData::default_instance_,
      stHonorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHonorData));
  stHonorLimit_descriptor_ = file->message_type(25);
  static const int stHonorLimit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorLimit, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorLimit, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorLimit, killtime_),
  };
  stHonorLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHonorLimit_descriptor_,
      stHonorLimit::default_instance_,
      stHonorLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonorLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHonorLimit));
  stAddPointLimit_descriptor_ = file->message_type(26);
  static const int stAddPointLimit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddPointLimit, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddPointLimit, add_time_),
  };
  stAddPointLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddPointLimit_descriptor_,
      stAddPointLimit::default_instance_,
      stAddPointLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddPointLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddPointLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddPointLimit));
  SaveGuard_descriptor_ = file->message_type(27);
  static const int SaveGuard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveGuard, cartbaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveGuard, carttmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveGuard, cartsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveGuard, carttimeend_),
  };
  SaveGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveGuard_descriptor_,
      SaveGuard::default_instance_,
      SaveGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveGuard));
  SaveDropIncreaseTime_descriptor_ = file->message_type(28);
  static const int SaveDropIncreaseTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveDropIncreaseTime, timeleftforincrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveDropIncreaseTime, savetime_),
  };
  SaveDropIncreaseTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveDropIncreaseTime_descriptor_,
      SaveDropIncreaseTime::default_instance_,
      SaveDropIncreaseTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveDropIncreaseTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveDropIncreaseTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveDropIncreaseTime));
  stAccelKey_descriptor_ = file->message_type(29);
  static const int stAccelKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAccelKey, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAccelKey, eacceltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAccelKey, dwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAccelKey, index_),
  };
  stAccelKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAccelKey_descriptor_,
      stAccelKey::default_instance_,
      stAccelKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAccelKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAccelKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAccelKey));
  stMapTermData_descriptor_ = file->message_type(30);
  static const int stMapTermData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapTermData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapTermData, time_),
  };
  stMapTermData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMapTermData_descriptor_,
      stMapTermData::default_instance_,
      stMapTermData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapTermData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMapTermData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMapTermData));
  OrderSysPresent_descriptor_ = file->message_type(31);
  static const int OrderSysPresent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderSysPresent, orderid_),
  };
  OrderSysPresent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderSysPresent_descriptor_,
      OrderSysPresent::default_instance_,
      OrderSysPresent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderSysPresent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderSysPresent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderSysPresent));
  UserCopyID_descriptor_ = file->message_type(32);
  static const int UserCopyID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyID, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyID, copytypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyID, copyid_),
  };
  UserCopyID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCopyID_descriptor_,
      UserCopyID::default_instance_,
      UserCopyID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCopyID));
  UserCopyTimes_descriptor_ = file->message_type(33);
  static const int UserCopyTimes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyTimes, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyTimes, copytypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyTimes, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyTimes, cyctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyTimes, state_),
  };
  UserCopyTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCopyTimes_descriptor_,
      UserCopyTimes::default_instance_,
      UserCopyTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCopyTimes));
  UserCopyScore_descriptor_ = file->message_type(34);
  static const int UserCopyScore_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyScore, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyScore, copytypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyScore, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyScore, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyScore, cyctype_),
  };
  UserCopyScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCopyScore_descriptor_,
      UserCopyScore::default_instance_,
      UserCopyScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopyScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCopyScore));
  UserCopySceneTimes_descriptor_ = file->message_type(35);
  static const int UserCopySceneTimes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopySceneTimes, teammonster_),
  };
  UserCopySceneTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCopySceneTimes_descriptor_,
      UserCopySceneTimes::default_instance_,
      UserCopySceneTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopySceneTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCopySceneTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCopySceneTimes));
  SaveSkill_descriptor_ = file->message_type(36);
  static const int SaveSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkill, level_),
  };
  SaveSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveSkill_descriptor_,
      SaveSkill::default_instance_,
      SaveSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveSkill));
  BinarySaveSkill_descriptor_ = file->message_type(37);
  static const int BinarySaveSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveSkill, skills_),
  };
  BinarySaveSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinarySaveSkill_descriptor_,
      BinarySaveSkill::default_instance_,
      BinarySaveSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinarySaveSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinarySaveSkill));
  NoPropertyIconState_descriptor_ = file->message_type(38);
  static const int NoPropertyIconState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoPropertyIconState, stateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoPropertyIconState, endtime_),
  };
  NoPropertyIconState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoPropertyIconState_descriptor_,
      NoPropertyIconState::default_instance_,
      NoPropertyIconState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoPropertyIconState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoPropertyIconState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoPropertyIconState));
  SkillStatusElement_descriptor_ = file->message_type(39);
  static const int SkillStatusElement_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, keyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, backvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, skilltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, attackerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, attacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, targettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, layers_),
  };
  SkillStatusElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillStatusElement_descriptor_,
      SkillStatusElement::default_instance_,
      SkillStatusElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillStatusElement));
  SkillStatusElement_Pos_descriptor_ = SkillStatusElement_descriptor_->nested_type(0);
  static const int SkillStatusElement_Pos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement_Pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement_Pos, y_),
  };
  SkillStatusElement_Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillStatusElement_Pos_descriptor_,
      SkillStatusElement_Pos::default_instance_,
      SkillStatusElement_Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement_Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillStatusElement_Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillStatusElement_Pos));
  ObjectLocation_descriptor_ = file->message_type(40);
  static const int ObjectLocation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectLocation, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectLocation, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectLocation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectLocation, y_),
  };
  ObjectLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectLocation_descriptor_,
      ObjectLocation::default_instance_,
      ObjectLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectLocation));
  stoneSocket_descriptor_ = file->message_type(41);
  static const int stoneSocket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stoneSocket, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stoneSocket, stonerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stoneSocket, value_),
  };
  stoneSocket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stoneSocket_descriptor_,
      stoneSocket::default_instance_,
      stoneSocket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stoneSocket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stoneSocket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stoneSocket));
  diamondSoket_descriptor_ = file->message_type(42);
  static const int diamondSoket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket, diamond_),
  };
  diamondSoket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      diamondSoket_descriptor_,
      diamondSoket::default_instance_,
      diamondSoket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(diamondSoket));
  diamondSoket_Diamond_descriptor_ = diamondSoket_descriptor_->nested_type(0);
  static const int diamondSoket_Diamond_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket_Diamond, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket_Diamond, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket_Diamond, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket_Diamond, upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket_Diamond, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket_Diamond, value_),
  };
  diamondSoket_Diamond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      diamondSoket_Diamond_descriptor_,
      diamondSoket_Diamond::default_instance_,
      diamondSoket_Diamond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket_Diamond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(diamondSoket_Diamond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(diamondSoket_Diamond));
  wingData_descriptor_ = file->message_type(43);
  static const int wingData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData, diamonditem_),
  };
  wingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingData_descriptor_,
      wingData::default_instance_,
      wingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingData));
  wingData_Diamond_descriptor_ = wingData_descriptor_->nested_type(0);
  static const int wingData_Diamond_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData_Diamond, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData_Diamond, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData_Diamond, exp_),
  };
  wingData_Diamond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingData_Diamond_descriptor_,
      wingData_Diamond::default_instance_,
      wingData_Diamond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData_Diamond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData_Diamond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingData_Diamond));
  wingData_ActiveSkill_descriptor_ = wingData_descriptor_->nested_type(1);
  static const int wingData_ActiveSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData_ActiveSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData_ActiveSkill, level_),
  };
  wingData_ActiveSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingData_ActiveSkill_descriptor_,
      wingData_ActiveSkill::default_instance_,
      wingData_ActiveSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData_ActiveSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingData_ActiveSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingData_ActiveSkill));
  flyPos_descriptor_ = file->message_type(44);
  static const int flyPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flyPos, scene_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flyPos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flyPos, y_),
  };
  flyPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flyPos_descriptor_,
      flyPos::default_instance_,
      flyPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flyPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flyPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flyPos));
  flyMessage_descriptor_ = file->message_type(45);
  static const int flyMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flyMessage, flypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flyMessage, avail_times_),
  };
  flyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flyMessage_descriptor_,
      flyMessage::default_instance_,
      flyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flyMessage));
  PropertyValues_descriptor_ = file->message_type(46);
  static const int PropertyValues_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValues, value_),
  };
  PropertyValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyValues_descriptor_,
      PropertyValues::default_instance_,
      PropertyValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyValues));
  PropertyValues_Value_descriptor_ = PropertyValues_descriptor_->nested_type(0);
  static const int PropertyValues_Value_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValues_Value, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValues_Value, value_),
  };
  PropertyValues_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyValues_Value_descriptor_,
      PropertyValues_Value::default_instance_,
      PropertyValues_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValues_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValues_Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyValues_Value));
  PropertyValuesEx_descriptor_ = file->message_type(47);
  static const int PropertyValuesEx_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValuesEx, value_),
  };
  PropertyValuesEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyValuesEx_descriptor_,
      PropertyValuesEx::default_instance_,
      PropertyValuesEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValuesEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValuesEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyValuesEx));
  PropertyValuesEx_Value_descriptor_ = PropertyValuesEx_descriptor_->nested_type(0);
  static const int PropertyValuesEx_Value_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValuesEx_Value, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValuesEx_Value, value_),
  };
  PropertyValuesEx_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyValuesEx_Value_descriptor_,
      PropertyValuesEx_Value::default_instance_,
      PropertyValuesEx_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValuesEx_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValuesEx_Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyValuesEx_Value));
  EquipBaseValue_descriptor_ = file->message_type(48);
  static const int EquipBaseValue_offsets_[52] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, dexterity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, mentality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, constitution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, maxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, minpdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, maxpdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, minmdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, maxmdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, pdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, mdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, pdamagep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, mdamagep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, pdefencep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, mdefencep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, attlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, deflevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, hplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, mvspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, luckrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, missrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, smiterate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, resmiterate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, beatrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, rebeatrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, paralysisrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, reparalysisrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, coldrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, recoldrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, reallrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, neglectrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, damageinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, hpsucker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, mpsucker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, hpsuckerrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, mpsuckerrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, hpresume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, mpresume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, moneylostrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, equiplostrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, smiteadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, fixedhurtadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, fixedhurtsub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, reflect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, butterfly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, reneglectrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, phyresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, magresist_),
  };
  EquipBaseValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipBaseValue_descriptor_,
      EquipBaseValue::default_instance_,
      EquipBaseValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBaseValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipBaseValue));
  EquipSplitData_descriptor_ = file->message_type(49);
  static const int EquipSplitData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSplitData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSplitData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSplitData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSplitData, level_),
  };
  EquipSplitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSplitData_descriptor_,
      EquipSplitData::default_instance_,
      EquipSplitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSplitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSplitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSplitData));
  t_Object_descriptor_ = file->message_type(50);
  static const int t_Object_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, thisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, maker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, needlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, maxdur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, dur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, timertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, createid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, makeruleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, equipprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, equippropex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, subneedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, fivetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, fivepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, diamondbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, diamondsoket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, wing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, boxexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, fly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, spvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, friendvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, usepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, elementattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, suittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, suitvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, splitvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, suitact_),
  };
  t_Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_Object_descriptor_,
      t_Object::default_instance_,
      t_Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_Object));
  ObjectMapData_descriptor_ = file->message_type(51);
  static const int ObjectMapData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, temp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, protect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, disappear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, owner_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, prefixkeys_),
  };
  ObjectMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectMapData_descriptor_,
      ObjectMapData::default_instance_,
      ObjectMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectMapData));
  stChatChannel_descriptor_ = file->message_type(52);
  static const int stChatChannel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatChannel, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatChannel, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatChannel, petdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatChannel, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatChannel, horsedata_),
  };
  stChatChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChatChannel_descriptor_,
      stChatChannel::default_instance_,
      stChatChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChatChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChatChannel));
  stUserShopItemView_descriptor_ = file->message_type(53);
  static const int stUserShopItemView_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserShopItemView, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserShopItemView, unitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserShopItemView, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserShopItemView, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserShopItemView, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserShopItemView, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserShopItemView, tax_),
  };
  stUserShopItemView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserShopItemView_descriptor_,
      stUserShopItemView::default_instance_,
      stUserShopItemView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserShopItemView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserShopItemView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserShopItemView));
  stUserShopItemView_PriceTypes_descriptor_ = stUserShopItemView_descriptor_->enum_type(0);
  LockItem_descriptor_ = file->message_type(54);
  static const int LockItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockItem, value_),
  };
  LockItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LockItem_descriptor_,
      LockItem::default_instance_,
      LockItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LockItem));
  CounterNum_descriptor_ = file->message_type(55);
  static const int CounterNum_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterNum, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterNum, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterNum, valueforday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterNum, valueforweek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterNum, valueformonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterNum, valueforyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterNum, valueforever_),
  };
  CounterNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounterNum_descriptor_,
      CounterNum::default_instance_,
      CounterNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounterNum));
  CounterSave_descriptor_ = file->message_type(56);
  static const int CounterSave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterSave, counttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterSave, countnum_),
  };
  CounterSave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounterSave_descriptor_,
      CounterSave::default_instance_,
      CounterSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterSave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounterSave));
  TimeExpItem_descriptor_ = file->message_type(57);
  static const int TimeExpItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpItem, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpItem, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpItem, coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpItem, state_),
  };
  TimeExpItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeExpItem_descriptor_,
      TimeExpItem::default_instance_,
      TimeExpItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeExpItem));
  TimeExpSave_descriptor_ = file->message_type(58);
  static const int TimeExpSave_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpSave, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpSave, reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpSave, expitem_),
  };
  TimeExpSave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeExpSave_descriptor_,
      TimeExpSave::default_instance_,
      TimeExpSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeExpSave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeExpSave));
  ObjectArray_descriptor_ = file->message_type(59);
  static const int ObjectArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, objects_),
  };
  ObjectArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectArray_descriptor_,
      ObjectArray::default_instance_,
      ObjectArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectArray));
  MailOneObject_descriptor_ = file->message_type(60);
  static const int MailOneObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailOneObject, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailOneObject, object_),
  };
  MailOneObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailOneObject_descriptor_,
      MailOneObject::default_instance_,
      MailOneObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailOneObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailOneObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailOneObject));
  MailObjects_descriptor_ = file->message_type(61);
  static const int MailObjects_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailObjects, objects_),
  };
  MailObjects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailObjects_descriptor_,
      MailObjects::default_instance_,
      MailObjects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailObjects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailObjects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailObjects));
  SceneShowFuncNpcData_descriptor_ = file->message_type(62);
  static const int SceneShowFuncNpcData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneShowFuncNpcData, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneShowFuncNpcData, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneShowFuncNpcData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneShowFuncNpcData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneShowFuncNpcData, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneShowFuncNpcData, sign_),
  };
  SceneShowFuncNpcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneShowFuncNpcData_descriptor_,
      SceneShowFuncNpcData::default_instance_,
      SceneShowFuncNpcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneShowFuncNpcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneShowFuncNpcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneShowFuncNpcData));
  MapFuncNpcList_descriptor_ = file->message_type(63);
  static const int MapFuncNpcList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapFuncNpcList, data_),
  };
  MapFuncNpcList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapFuncNpcList_descriptor_,
      MapFuncNpcList::default_instance_,
      MapFuncNpcList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapFuncNpcList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapFuncNpcList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapFuncNpcList));
  MusterCount_descriptor_ = file->message_type(64);
  static const int MusterCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusterCount, musterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusterCount, count_),
  };
  MusterCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MusterCount_descriptor_,
      MusterCount::default_instance_,
      MusterCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusterCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusterCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MusterCount));
  septCartHelpBack_descriptor_ = file->message_type(65);
  static const int septCartHelpBack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpBack, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpBack, scene_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpBack, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpBack, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpBack, help_time_),
  };
  septCartHelpBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      septCartHelpBack_descriptor_,
      septCartHelpBack::default_instance_,
      septCartHelpBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(septCartHelpBack));
  septCartHelpSave_descriptor_ = file->message_type(66);
  static const int septCartHelpSave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpSave, cart_tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpSave, available_),
  };
  septCartHelpSave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      septCartHelpSave_descriptor_,
      septCartHelpSave::default_instance_,
      septCartHelpSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(septCartHelpSave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(septCartHelpSave));
  BinaryGangData_descriptor_ = file->message_type(67);
  static const int BinaryGangData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryGangData, startdoubleexptime_),
  };
  BinaryGangData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryGangData_descriptor_,
      BinaryGangData::default_instance_,
      BinaryGangData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryGangData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryGangData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryGangData));
  GangServerSyncData_descriptor_ = file->message_type(68);
  static const int GangServerSyncData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangServerSyncData, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangServerSyncData, gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangServerSyncData, startdoubleexptime_),
  };
  GangServerSyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangServerSyncData_descriptor_,
      GangServerSyncData::default_instance_,
      GangServerSyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangServerSyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangServerSyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangServerSyncData));
  StockAccountData_descriptor_ = file->message_type(69);
  static const int StockAccountData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockAccountData, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockAccountData, gold_),
  };
  StockAccountData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockAccountData_descriptor_,
      StockAccountData::default_instance_,
      StockAccountData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockAccountData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockAccountData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockAccountData));
  OneStockItem_descriptor_ = file->message_type(70);
  static const int OneStockItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneStockItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneStockItem, num_),
  };
  OneStockItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneStockItem_descriptor_,
      OneStockItem::default_instance_,
      OneStockItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneStockItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneStockItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneStockItem));
  SelfOneStockItem_descriptor_ = file->message_type(71);
  static const int SelfOneStockItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfOneStockItem, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfOneStockItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfOneStockItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfOneStockItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfOneStockItem, time_),
  };
  SelfOneStockItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelfOneStockItem_descriptor_,
      SelfOneStockItem::default_instance_,
      SelfOneStockItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfOneStockItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfOneStockItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelfOneStockItem));
  StockTypeList_descriptor_ = file->message_type(72);
  static const int StockTypeList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTypeList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTypeList, items_),
  };
  StockTypeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockTypeList_descriptor_,
      StockTypeList::default_instance_,
      StockTypeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTypeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockTypeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockTypeList));
  SeptBuildingData_descriptor_ = file->message_type(73);
  static const int SeptBuildingData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeptBuildingData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeptBuildingData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeptBuildingData, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeptBuildingData, buildstate_),
  };
  SeptBuildingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeptBuildingData_descriptor_,
      SeptBuildingData::default_instance_,
      SeptBuildingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeptBuildingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeptBuildingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeptBuildingData));
  SceneChariotSkill_descriptor_ = file->message_type(74);
  static const int SceneChariotSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotSkill, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotSkill, use_type_),
  };
  SceneChariotSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneChariotSkill_descriptor_,
      SceneChariotSkill::default_instance_,
      SceneChariotSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneChariotSkill));
  SceneChariotBaseData_descriptor_ = file->message_type(75);
  static const int SceneChariotBaseData_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, base_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, ai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, honor_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, sept_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, ex_holder_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, max_carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, maxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, pmax_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, mmax_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, pmin_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, mmin_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, pdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, mdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, heavy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, attack_speed_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, attack_length_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, move_speed_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, dexterity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, mentality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, constitution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, skill_),
  };
  SceneChariotBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneChariotBaseData_descriptor_,
      SceneChariotBaseData::default_instance_,
      SceneChariotBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneChariotBaseData));
  SceneChariotBinaryData_descriptor_ = file->message_type(76);
  static const int SceneChariotBinaryData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBinaryData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBinaryData, holder_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBinaryData, holder_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBinaryData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBinaryData, tmpid_),
  };
  SceneChariotBinaryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneChariotBinaryData_descriptor_,
      SceneChariotBinaryData::default_instance_,
      SceneChariotBinaryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBinaryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChariotBinaryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneChariotBinaryData));
  UserTempPosition_descriptor_ = file->message_type(77);
  static const int UserTempPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTempPosition, src_sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTempPosition, src_posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTempPosition, src_posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTempPosition, src_mapname_),
  };
  UserTempPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserTempPosition_descriptor_,
      UserTempPosition::default_instance_,
      UserTempPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTempPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTempPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTempPosition));
  BiGuanXiuXianData_descriptor_ = file->message_type(78);
  static const int BiGuanXiuXianData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, expeffic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, storeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, alltime_),
  };
  BiGuanXiuXianData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BiGuanXiuXianData_descriptor_,
      BiGuanXiuXianData::default_instance_,
      BiGuanXiuXianData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiGuanXiuXianData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BiGuanXiuXianData));
  ObjectDrop_descriptor_ = file->message_type(79);
  static const int ObjectDrop_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, next_resettime_),
  };
  ObjectDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectDrop_descriptor_,
      ObjectDrop::default_instance_,
      ObjectDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectDrop));
  ObjectDropSave_descriptor_ = file->message_type(80);
  static const int ObjectDropSave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDropSave, object_),
  };
  ObjectDropSave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectDropSave_descriptor_,
      ObjectDropSave::default_instance_,
      ObjectDropSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDropSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDropSave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectDropSave));
  CopyUserMember_descriptor_ = file->message_type(81);
  static const int CopyUserMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyUserMember, charid_),
  };
  CopyUserMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CopyUserMember_descriptor_,
      CopyUserMember::default_instance_,
      CopyUserMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyUserMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyUserMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CopyUserMember));
  DBCopySceneBinaryData_descriptor_ = file->message_type(82);
  static const int DBCopySceneBinaryData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCopySceneBinaryData, member1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCopySceneBinaryData, member2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCopySceneBinaryData, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCopySceneBinaryData, septid_),
  };
  DBCopySceneBinaryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCopySceneBinaryData_descriptor_,
      DBCopySceneBinaryData::default_instance_,
      DBCopySceneBinaryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCopySceneBinaryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCopySceneBinaryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCopySceneBinaryData));
  HorseExtraData_descriptor_ = file->message_type(83);
  static const int HorseExtraData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, smiterate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, luck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, baseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, thisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, skilllevel_),
  };
  HorseExtraData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HorseExtraData_descriptor_,
      HorseExtraData::default_instance_,
      HorseExtraData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseExtraData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HorseExtraData));
  CharacterMapShow_descriptor_ = file->message_type(84);
  static const int CharacterMapShow_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapShow, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapShow, hairstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapShow, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapShow, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapShow, coat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapShow, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapShow, wing_),
  };
  CharacterMapShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMapShow_descriptor_,
      CharacterMapShow::default_instance_,
      CharacterMapShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMapShow));
  StateData_descriptor_ = file->message_type(85);
  static const int StateData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateData, stateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateData, linkpoint_),
  };
  StateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateData_descriptor_,
      StateData::default_instance_,
      StateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateData));
  CharacterMapData_descriptor_ = file->message_type(86);
  static const int CharacterMapData_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, mapshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, septofficer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, evilvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, queststate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, shopname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, shopstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, shopnamecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, ninestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, septname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, worldlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, gohome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, chariot_tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, chariot_mastertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, is_gold_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, pkcamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, citywarwinner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, duelmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, castle_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, winglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, wingstrenglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, subprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, newtitle_),
  };
  CharacterMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMapData_descriptor_,
      CharacterMapData::default_instance_,
      CharacterMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMapData));
  CharacterMainData_descriptor_ = file->message_type(87);
  static const int CharacterMainData_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, mapdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, maxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, dexterity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, mentality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, constitution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, attrpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, attackspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, minphysics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, maxphysics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, minmagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, maxmagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, pdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, mdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, bindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, bindgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, luckyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, antiluckyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, heavyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, antiheavyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, funcvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, septaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, septactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, friendvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, subprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, totalexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, zonelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, countryzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, petskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, autofight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, propertys_),
  };
  CharacterMainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMainData_descriptor_,
      CharacterMainData::default_instance_,
      CharacterMainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMainData));
  NpcMapData_descriptor_ = file->message_type(88);
  static const int NpcMapData_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, visit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, septid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, master_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, skillcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, ninestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, attacked_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, pkcamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, desname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, into_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, killer_),
  };
  NpcMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcMapData_descriptor_,
      NpcMapData::default_instance_,
      NpcMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcMapData));
  NpcDeathMapData_descriptor_ = file->message_type(89);
  static const int NpcDeathMapData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, disappeartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, killer_),
  };
  NpcDeathMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcDeathMapData_descriptor_,
      NpcDeathMapData::default_instance_,
      NpcDeathMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDeathMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcDeathMapData));
  EquipChangeMaterial_descriptor_ = file->message_type(90);
  static const int EquipChangeMaterial_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipChangeMaterial, thisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipChangeMaterial, num_),
  };
  EquipChangeMaterial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipChangeMaterial_descriptor_,
      EquipChangeMaterial::default_instance_,
      EquipChangeMaterial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipChangeMaterial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipChangeMaterial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipChangeMaterial));
  AddMaxCount_descriptor_ = file->message_type(91);
  static const int AddMaxCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaxCount, count_),
  };
  AddMaxCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMaxCount_descriptor_,
      AddMaxCount::default_instance_,
      AddMaxCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaxCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaxCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMaxCount));
  AddMaxCount_Count_descriptor_ = AddMaxCount_descriptor_->nested_type(0);
  static const int AddMaxCount_Count_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaxCount_Count, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaxCount_Count, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaxCount_Count, cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaxCount_Count, addcount_),
  };
  AddMaxCount_Count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMaxCount_Count_descriptor_,
      AddMaxCount_Count::default_instance_,
      AddMaxCount_Count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaxCount_Count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaxCount_Count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMaxCount_Count));
  BossReliveInfo_descriptor_ = file->message_type(92);
  static const int BossReliveInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossReliveInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossReliveInfo, hppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossReliveInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossReliveInfo, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossReliveInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossReliveInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossReliveInfo, desc_),
  };
  BossReliveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossReliveInfo_descriptor_,
      BossReliveInfo::default_instance_,
      BossReliveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossReliveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossReliveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossReliveInfo));
  ChangeZoneInfo_descriptor_ = file->message_type(93);
  static const int ChangeZoneInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeZoneInfo, newzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeZoneInfo, token_),
  };
  ChangeZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeZoneInfo_descriptor_,
      ChangeZoneInfo::default_instance_,
      ChangeZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeZoneInfo));
  UserScore_descriptor_ = file->message_type(94);
  static const int UserScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserScore, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserScore, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserScore, totalscore_),
  };
  UserScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserScore_descriptor_,
      UserScore::default_instance_,
      UserScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserScore));
  OneYaoQianItem_descriptor_ = file->message_type(95);
  static const int OneYaoQianItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneYaoQianItem, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneYaoQianItem, buylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneYaoQianItem, returnlevel_),
  };
  OneYaoQianItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneYaoQianItem_descriptor_,
      OneYaoQianItem::default_instance_,
      OneYaoQianItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneYaoQianItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneYaoQianItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneYaoQianItem));
  YaoQianSaveData_descriptor_ = file->message_type(96);
  static const int YaoQianSaveData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoQianSaveData, havebuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoQianSaveData, returngold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoQianSaveData, returnbindgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoQianSaveData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoQianSaveData, stage_),
  };
  YaoQianSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YaoQianSaveData_descriptor_,
      YaoQianSaveData::default_instance_,
      YaoQianSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoQianSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoQianSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YaoQianSaveData));
  DungeonSaveData_descriptor_ = file->message_type(97);
  static const int DungeonSaveData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSaveData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSaveData, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSaveData, time_),
  };
  DungeonSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonSaveData_descriptor_,
      DungeonSaveData::default_instance_,
      DungeonSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonSaveData));
  VarInfo_descriptor_ = file->message_type(98);
  static const int VarInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarInfo, type_),
  };
  VarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarInfo_descriptor_,
      VarInfo::default_instance_,
      VarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarInfo));
  BuildInfo_descriptor_ = file->message_type(99);
  static const int BuildInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, lastcollecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, upgradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, outputitemtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, lastgetitemtime_),
  };
  BuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildInfo_descriptor_,
      BuildInfo::default_instance_,
      BuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildInfo));
  MakeEquipInfo_descriptor_ = file->message_type(100);
  static const int MakeEquipInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeEquipInfo, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeEquipInfo, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeEquipInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeEquipInfo, maketime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeEquipInfo, state_),
  };
  MakeEquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeEquipInfo_descriptor_,
      MakeEquipInfo::default_instance_,
      MakeEquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeEquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeEquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeEquipInfo));
  CastleExploreInfo_descriptor_ = file->message_type(101);
  static const int CastleExploreInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleExploreInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleExploreInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleExploreInfo, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleExploreInfo, issuc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleExploreInfo, pets_),
  };
  CastleExploreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CastleExploreInfo_descriptor_,
      CastleExploreInfo::default_instance_,
      CastleExploreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleExploreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleExploreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CastleExploreInfo));
  BinaryCastle_descriptor_ = file->message_type(102);
  static const int BinaryCastle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastle, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastle, dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastle, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastle, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastle, expinfo_),
  };
  BinaryCastle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryCastle_descriptor_,
      BinaryCastle::default_instance_,
      BinaryCastle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryCastle));
  BinaryMakeEquip_descriptor_ = file->message_type(103);
  static const int BinaryMakeEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryMakeEquip, info_),
  };
  BinaryMakeEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryMakeEquip_descriptor_,
      BinaryMakeEquip::default_instance_,
      BinaryMakeEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryMakeEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryMakeEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryMakeEquip));
  CastlePetInfo_descriptor_ = file->message_type(104);
  static const int CastlePetInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, baseskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, randomskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, souls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, phyatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, phydef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, magatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, magdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, experttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, workability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, allsouls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, stateid_),
  };
  CastlePetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CastlePetInfo_descriptor_,
      CastlePetInfo::default_instance_,
      CastlePetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CastlePetInfo));
  CastleWorkPet_descriptor_ = file->message_type(105);
  static const int CastleWorkPet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleWorkPet, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleWorkPet, buildid_),
  };
  CastleWorkPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CastleWorkPet_descriptor_,
      CastleWorkPet::default_instance_,
      CastleWorkPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleWorkPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleWorkPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CastleWorkPet));
  BinaryCastlePet_descriptor_ = file->message_type(106);
  static const int BinaryCastlePet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastlePet, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastlePet, fightpet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastlePet, workpet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastlePet, collection_),
  };
  BinaryCastlePet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryCastlePet_descriptor_,
      BinaryCastlePet::default_instance_,
      BinaryCastlePet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastlePet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastlePet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryCastlePet));
  CastlePetState_descriptor_ = file->message_type(107);
  static const int CastlePetState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetState, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetState, stateid_),
  };
  CastlePetState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CastlePetState_descriptor_,
      CastlePetState::default_instance_,
      CastlePetState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastlePetState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CastlePetState));
  CastleStatueInfo_descriptor_ = file->message_type(108);
  static const int CastleStatueInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleStatueInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleStatueInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleStatueInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleStatueInfo, select_),
  };
  CastleStatueInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CastleStatueInfo_descriptor_,
      CastleStatueInfo::default_instance_,
      CastleStatueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleStatueInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastleStatueInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CastleStatueInfo));
  BinaryCastleStatue_descriptor_ = file->message_type(109);
  static const int BinaryCastleStatue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastleStatue, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastleStatue, select_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastleStatue, skill_),
  };
  BinaryCastleStatue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryCastleStatue_descriptor_,
      BinaryCastleStatue::default_instance_,
      BinaryCastleStatue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastleStatue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryCastleStatue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryCastleStatue));
  ReplaceSkill_descriptor_ = file->message_type(110);
  static const int ReplaceSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceSkill, srcskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceSkill, desskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceSkill, studysucc_),
  };
  ReplaceSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplaceSkill_descriptor_,
      ReplaceSkill::default_instance_,
      ReplaceSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplaceSkill));
  RelicUserPos_descriptor_ = file->message_type(111);
  static const int RelicUserPos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelicUserPos, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelicUserPos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelicUserPos, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelicUserPos, septid_),
  };
  RelicUserPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelicUserPos_descriptor_,
      RelicUserPos::default_instance_,
      RelicUserPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelicUserPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelicUserPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelicUserPos));
  RiskTaskInfo_descriptor_ = file->message_type(112);
  static const int RiskTaskInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskTaskInfo, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskTaskInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskTaskInfo, state_),
  };
  RiskTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskTaskInfo_descriptor_,
      RiskTaskInfo::default_instance_,
      RiskTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskTaskInfo));
  BinaryRiskTaskInfo_descriptor_ = file->message_type(113);
  static const int BinaryRiskTaskInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryRiskTaskInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryRiskTaskInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryRiskTaskInfo, num_),
  };
  BinaryRiskTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryRiskTaskInfo_descriptor_,
      BinaryRiskTaskInfo::default_instance_,
      BinaryRiskTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryRiskTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryRiskTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryRiskTaskInfo));
  LifeSkillInfo_descriptor_ = file->message_type(114);
  static const int LifeSkillInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeSkillInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeSkillInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeSkillInfo, stage_),
  };
  LifeSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LifeSkillInfo_descriptor_,
      LifeSkillInfo::default_instance_,
      LifeSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LifeSkillInfo));
  BinaryLifeSkill_descriptor_ = file->message_type(115);
  static const int BinaryLifeSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryLifeSkill, info_),
  };
  BinaryLifeSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryLifeSkill_descriptor_,
      BinaryLifeSkill::default_instance_,
      BinaryLifeSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryLifeSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryLifeSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryLifeSkill));
  DayGuideInfo_descriptor_ = file->message_type(116);
  static const int DayGuideInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, targettimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, curtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, para1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, para2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, para3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, acceptbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, level_),
  };
  DayGuideInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayGuideInfo_descriptor_,
      DayGuideInfo::default_instance_,
      DayGuideInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayGuideInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayGuideInfo));
  TitleData_descriptor_ = file->message_type(117);
  static const int TitleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, time_),
  };
  TitleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleData_descriptor_,
      TitleData::default_instance_,
      TitleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleData));
  MonthCardData_descriptor_ = file->message_type(118);
  static const int MonthCardData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, buytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, obtaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, status_),
  };
  MonthCardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonthCardData_descriptor_,
      MonthCardData::default_instance_,
      MonthCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonthCardData));
  WingSystemData_descriptor_ = file->message_type(119);
  static const int WingSystemData_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, attphymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, attphymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, phydef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, magdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, enhancemaxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, enhancemintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, releaseskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, maxexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, attmagmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, attmagmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, lefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, open_),
  };
  WingSystemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingSystemData_descriptor_,
      WingSystemData::default_instance_,
      WingSystemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSystemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingSystemData));
  StatHurtData_descriptor_ = file->message_type(120);
  static const int StatHurtData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatHurtData, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatHurtData, name_),
  };
  StatHurtData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatHurtData_descriptor_,
      StatHurtData::default_instance_,
      StatHurtData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatHurtData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatHurtData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatHurtData));
  TitleInfo_descriptor_ = file->message_type(121);
  static const int TitleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, time_),
  };
  TitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleInfo_descriptor_,
      TitleInfo::default_instance_,
      TitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleInfo));
  ItemInfo_descriptor_ = file->message_type(122);
  static const int ItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, kind_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  LimitShopData_descriptor_ = file->message_type(123);
  static const int LimitShopData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, itemdata_),
  };
  LimitShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitShopData_descriptor_,
      LimitShopData::default_instance_,
      LimitShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitShopData));
  FundData_descriptor_ = file->message_type(124);
  static const int FundData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundData, hasbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundData, levelfund_),
  };
  FundData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FundData_descriptor_,
      FundData::default_instance_,
      FundData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FundData));
  TotalReSpData_descriptor_ = file->message_type(125);
  static const int TotalReSpData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalReSpData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalReSpData, totalget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalReSpData, days_),
  };
  TotalReSpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TotalReSpData_descriptor_,
      TotalReSpData::default_instance_,
      TotalReSpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalReSpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalReSpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TotalReSpData));
  RechargeSpendData_descriptor_ = file->message_type(126);
  static const int RechargeSpendData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeSpendData, reacttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeSpendData, redaybonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeSpendData, retotalbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeSpendData, spacttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeSpendData, spdaybonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeSpendData, sptotalbonus_),
  };
  RechargeSpendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeSpendData_descriptor_,
      RechargeSpendData::default_instance_,
      RechargeSpendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeSpendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeSpendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeSpendData));
  DeclareWarData_descriptor_ = file->message_type(127);
  static const int DeclareWarData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeclareWarData, septid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeclareWarData, septname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeclareWarData, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeclareWarData, leftcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeclareWarData, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeclareWarData, count_),
  };
  DeclareWarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeclareWarData_descriptor_,
      DeclareWarData::default_instance_,
      DeclareWarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeclareWarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeclareWarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeclareWarData));
  PropValues_descriptor_ = file->message_type(128);
  static const int PropValues_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValues, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValues, value_),
  };
  PropValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropValues_descriptor_,
      PropValues::default_instance_,
      PropValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropValues));
  FPairDataDWORD_descriptor_ = file->message_type(129);
  static const int FPairDataDWORD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPairDataDWORD, para1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPairDataDWORD, para2_),
  };
  FPairDataDWORD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FPairDataDWORD_descriptor_,
      FPairDataDWORD::default_instance_,
      FPairDataDWORD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPairDataDWORD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPairDataDWORD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FPairDataDWORD));
  FPairDataStrDW_descriptor_ = file->message_type(130);
  static const int FPairDataStrDW_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPairDataStrDW, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPairDataStrDW, value_),
  };
  FPairDataStrDW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FPairDataStrDW_descriptor_,
      FPairDataStrDW::default_instance_,
      FPairDataStrDW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPairDataStrDW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPairDataStrDW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FPairDataStrDW));
  FTripleDataDWORD_descriptor_ = file->message_type(131);
  static const int FTripleDataDWORD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTripleDataDWORD, para1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTripleDataDWORD, para2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTripleDataDWORD, para3_),
  };
  FTripleDataDWORD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FTripleDataDWORD_descriptor_,
      FTripleDataDWORD::default_instance_,
      FTripleDataDWORD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTripleDataDWORD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTripleDataDWORD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FTripleDataDWORD));
  StpObjectNode_descriptor_ = file->message_type(132);
  static const int StpObjectNode_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpObjectNode, gridtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpObjectNode, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpObjectNode, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpObjectNode, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpObjectNode, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpObjectNode, del_),
  };
  StpObjectNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StpObjectNode_descriptor_,
      StpObjectNode::default_instance_,
      StpObjectNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpObjectNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpObjectNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StpObjectNode));
  FMsgNpcFunction_descriptor_ = file->message_type(133);
  static const int FMsgNpcFunction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMsgNpcFunction, funcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMsgNpcFunction, funcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMsgNpcFunction, funcevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMsgNpcFunction, funcicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMsgNpcFunction, funcopen_),
  };
  FMsgNpcFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMsgNpcFunction_descriptor_,
      FMsgNpcFunction::default_instance_,
      FMsgNpcFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMsgNpcFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMsgNpcFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMsgNpcFunction));
  FNpcDlgPara_descriptor_ = file->message_type(134);
  static const int FNpcDlgPara_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDlgPara, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDlgPara, value_),
  };
  FNpcDlgPara_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FNpcDlgPara_descriptor_,
      FNpcDlgPara::default_instance_,
      FNpcDlgPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDlgPara, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDlgPara, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FNpcDlgPara));
  FValueCell_descriptor_ = file->message_type(135);
  static const int FValueCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FValueCell, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FValueCell, strvalue_),
  };
  FValueCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FValueCell_descriptor_,
      FValueCell::default_instance_,
      FValueCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FValueCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FValueCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FValueCell));
  FPropertyValues_descriptor_ = file->message_type(136);
  static const int FPropertyValues_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPropertyValues, value_),
  };
  FPropertyValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FPropertyValues_descriptor_,
      FPropertyValues::default_instance_,
      FPropertyValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPropertyValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPropertyValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FPropertyValues));
  FPropertyValues_FValue_descriptor_ = FPropertyValues_descriptor_->nested_type(0);
  static const int FPropertyValues_FValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPropertyValues_FValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPropertyValues_FValue, value_),
  };
  FPropertyValues_FValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FPropertyValues_FValue_descriptor_,
      FPropertyValues_FValue::default_instance_,
      FPropertyValues_FValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPropertyValues_FValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FPropertyValues_FValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FPropertyValues_FValue));
  FNpcMapData_descriptor_ = file->message_type(137);
  static const int FNpcMapData_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, visit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, septid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, master_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, skillcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, ninestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, attacked_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, pkcamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, desname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, into_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, killer_),
  };
  FNpcMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FNpcMapData_descriptor_,
      FNpcMapData::default_instance_,
      FNpcMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FNpcMapData));
  FStateData_descriptor_ = file->message_type(138);
  static const int FStateData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FStateData, stateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FStateData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FStateData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FStateData, linkpoint_),
  };
  FStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FStateData_descriptor_,
      FStateData::default_instance_,
      FStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FStateData));
  FCharacterMapShow_descriptor_ = file->message_type(139);
  static const int FCharacterMapShow_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapShow, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapShow, hairstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapShow, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapShow, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapShow, coat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapShow, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapShow, wing_),
  };
  FCharacterMapShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FCharacterMapShow_descriptor_,
      FCharacterMapShow::default_instance_,
      FCharacterMapShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FCharacterMapShow));
  FCharacterMapData_descriptor_ = file->message_type(140);
  static const int FCharacterMapData_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, mapshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, septofficer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, evilvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, queststate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, shopname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, shopstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, shopnamecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, ninestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, septname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, worldlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, gohome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, chariot_tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, chariot_mastertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, is_gold_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, pkcamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, citywarwinner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, duelmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, castle_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, winglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, wingstrenglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, subprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, newtitle_),
  };
  FCharacterMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FCharacterMapData_descriptor_,
      FCharacterMapData::default_instance_,
      FCharacterMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FCharacterMapData));
  FNpcDeathMapData_descriptor_ = file->message_type(141);
  static const int FNpcDeathMapData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, tmpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, disappeartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, killer_),
  };
  FNpcDeathMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FNpcDeathMapData_descriptor_,
      FNpcDeathMapData::default_instance_,
      FNpcDeathMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FNpcDeathMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FNpcDeathMapData));
  FCharacterMainData_descriptor_ = file->message_type(142);
  static const int FCharacterMainData_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, mapdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, maxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, dexterity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, mentality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, constitution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, attrpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, attackspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, minphysics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, maxphysics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, minmagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, maxmagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, pdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, mdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, bindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, bindgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, luckyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, antiluckyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, heavyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, antiheavyrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, funcvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, septaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, septactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, friendvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, subprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, totalexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, zonelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, countryzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, petskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, autofight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, propertys_),
  };
  FCharacterMainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FCharacterMainData_descriptor_,
      FCharacterMainData::default_instance_,
      FCharacterMainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FCharacterMainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FCharacterMainData));
  CountryType_descriptor_ = file->enum_type(0);
  QuestStateType_descriptor_ = file->enum_type(1);
  enumQuestDoubleTimeLimit_descriptor_ = file->enum_type(2);
  TimeCycle_descriptor_ = file->enum_type(3);
  CostType_descriptor_ = file->enum_type(4);
  PlayerTitleType_descriptor_ = file->enum_type(5);
  CountryOfficerType_descriptor_ = file->enum_type(6);
  ProfessionType_descriptor_ = file->enum_type(7);
  PropGroupType_descriptor_ = file->enum_type(8);
  PropValueType_descriptor_ = file->enum_type(9);
  ElementAttrType_descriptor_ = file->enum_type(10);
  CHANNEL_descriptor_ = file->enum_type(11);
  CounterType_descriptor_ = file->enum_type(12);
  CounterFuncType_descriptor_ = file->enum_type(13);
  MusterID_descriptor_ = file->enum_type(14);
  MusterType_descriptor_ = file->enum_type(15);
  enumUserPresentType_descriptor_ = file->enum_type(16);
  septCartButtonAvailable_descriptor_ = file->enum_type(17);
  septCartHelpFunctionType_descriptor_ = file->enum_type(18);
  enumStockAuctionType_descriptor_ = file->enum_type(19);
  enumCopySceneType_descriptor_ = file->enum_type(20);
  enumSceneType_descriptor_ = file->enum_type(21);
  enumSeptBuildingType_descriptor_ = file->enum_type(22);
  enumMatchQueueType_descriptor_ = file->enum_type(23);
  enumUserInfluence_descriptor_ = file->enum_type(24);
  enumCountryPower_descriptor_ = file->enum_type(25);
  enumGlobalVar_descriptor_ = file->enum_type(26);
  enumBiGuanXiuXianType_descriptor_ = file->enum_type(27);
  enumObjectDropType_descriptor_ = file->enum_type(28);
  CountryOfficeType_descriptor_ = file->enum_type(29);
  ScoreType_descriptor_ = file->enum_type(30);
  SpeakerType_descriptor_ = file->enum_type(31);
  SpreaderGoldState_descriptor_ = file->enum_type(32);
  empLoginError_descriptor_ = file->enum_type(33);
  empTipsType_descriptor_ = file->enum_type(34);
  empMagicAttackRetType_descriptor_ = file->enum_type(35);
  MsgBoxServerType_descriptor_ = file->enum_type(36);
  empSceneEntryType_descriptor_ = file->enum_type(37);
  empAttrType_descriptor_ = file->enum_type(38);
  FQuestCompleteCondType_descriptor_ = file->enum_type(39);
  empPackType_descriptor_ = file->enum_type(40);
  FPropValueType_descriptor_ = file->enum_type(41);
  FProfessionType_descriptor_ = file->enum_type(42);
  ObjectType_descriptor_ = file->enum_type(43);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    II_PairData_descriptor_, &II_PairData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestVar_descriptor_, &QuestVar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairDataDWORD_descriptor_, &PairDataDWORD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripleDataDWORD_descriptor_, &TripleDataDWORD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestData_descriptor_, &QuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoingQuestData_descriptor_, &DoingQuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestCompleteData_descriptor_, &QuestCompleteData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestPairData_descriptor_, &QuestPairData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestId_descriptor_, &QuestId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinarySaveQuest_descriptor_, &BinarySaveQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeEquipAccType_descriptor_, &ChangeEquipAccType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeEquip_descriptor_, &ChangeEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeEquip_stCE_descriptor_, &ChangeEquip_stCE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChangeEquip_descriptor_, &stChangeEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalismanStar_descriptor_, &TalismanStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalismanStar_Prop_descriptor_, &TalismanStar_Prop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalismanData_descriptor_, &TalismanData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalismanData_Skill_descriptor_, &TalismanData_Skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScenePetAutoFun_descriptor_, &ScenePetAutoFun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScenePetSkillData_descriptor_, &ScenePetSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScenePetDoSkill_descriptor_, &ScenePetDoSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScenePetData_descriptor_, &ScenePetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScenePetServerData_descriptor_, &ScenePetServerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    optionBaseAutoTeamMember_descriptor_, &optionBaseAutoTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOptionBase_descriptor_, &stOptionBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDayHonor_descriptor_, &stDayHonor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHonorKill_descriptor_, &stHonorKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHonorData_descriptor_, &stHonorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHonorLimit_descriptor_, &stHonorLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddPointLimit_descriptor_, &stAddPointLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveGuard_descriptor_, &SaveGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveDropIncreaseTime_descriptor_, &SaveDropIncreaseTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAccelKey_descriptor_, &stAccelKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMapTermData_descriptor_, &stMapTermData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderSysPresent_descriptor_, &OrderSysPresent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCopyID_descriptor_, &UserCopyID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCopyTimes_descriptor_, &UserCopyTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCopyScore_descriptor_, &UserCopyScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCopySceneTimes_descriptor_, &UserCopySceneTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveSkill_descriptor_, &SaveSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinarySaveSkill_descriptor_, &BinarySaveSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoPropertyIconState_descriptor_, &NoPropertyIconState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillStatusElement_descriptor_, &SkillStatusElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillStatusElement_Pos_descriptor_, &SkillStatusElement_Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectLocation_descriptor_, &ObjectLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stoneSocket_descriptor_, &stoneSocket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    diamondSoket_descriptor_, &diamondSoket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    diamondSoket_Diamond_descriptor_, &diamondSoket_Diamond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingData_descriptor_, &wingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingData_Diamond_descriptor_, &wingData_Diamond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingData_ActiveSkill_descriptor_, &wingData_ActiveSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flyPos_descriptor_, &flyPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flyMessage_descriptor_, &flyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyValues_descriptor_, &PropertyValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyValues_Value_descriptor_, &PropertyValues_Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyValuesEx_descriptor_, &PropertyValuesEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyValuesEx_Value_descriptor_, &PropertyValuesEx_Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipBaseValue_descriptor_, &EquipBaseValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSplitData_descriptor_, &EquipSplitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_Object_descriptor_, &t_Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectMapData_descriptor_, &ObjectMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChatChannel_descriptor_, &stChatChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserShopItemView_descriptor_, &stUserShopItemView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LockItem_descriptor_, &LockItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounterNum_descriptor_, &CounterNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounterSave_descriptor_, &CounterSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeExpItem_descriptor_, &TimeExpItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeExpSave_descriptor_, &TimeExpSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectArray_descriptor_, &ObjectArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailOneObject_descriptor_, &MailOneObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailObjects_descriptor_, &MailObjects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneShowFuncNpcData_descriptor_, &SceneShowFuncNpcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapFuncNpcList_descriptor_, &MapFuncNpcList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MusterCount_descriptor_, &MusterCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    septCartHelpBack_descriptor_, &septCartHelpBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    septCartHelpSave_descriptor_, &septCartHelpSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryGangData_descriptor_, &BinaryGangData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangServerSyncData_descriptor_, &GangServerSyncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockAccountData_descriptor_, &StockAccountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneStockItem_descriptor_, &OneStockItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelfOneStockItem_descriptor_, &SelfOneStockItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockTypeList_descriptor_, &StockTypeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeptBuildingData_descriptor_, &SeptBuildingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneChariotSkill_descriptor_, &SceneChariotSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneChariotBaseData_descriptor_, &SceneChariotBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneChariotBinaryData_descriptor_, &SceneChariotBinaryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTempPosition_descriptor_, &UserTempPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BiGuanXiuXianData_descriptor_, &BiGuanXiuXianData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectDrop_descriptor_, &ObjectDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectDropSave_descriptor_, &ObjectDropSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CopyUserMember_descriptor_, &CopyUserMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCopySceneBinaryData_descriptor_, &DBCopySceneBinaryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HorseExtraData_descriptor_, &HorseExtraData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMapShow_descriptor_, &CharacterMapShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateData_descriptor_, &StateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMapData_descriptor_, &CharacterMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMainData_descriptor_, &CharacterMainData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcMapData_descriptor_, &NpcMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcDeathMapData_descriptor_, &NpcDeathMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipChangeMaterial_descriptor_, &EquipChangeMaterial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMaxCount_descriptor_, &AddMaxCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMaxCount_Count_descriptor_, &AddMaxCount_Count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossReliveInfo_descriptor_, &BossReliveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeZoneInfo_descriptor_, &ChangeZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserScore_descriptor_, &UserScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneYaoQianItem_descriptor_, &OneYaoQianItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YaoQianSaveData_descriptor_, &YaoQianSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonSaveData_descriptor_, &DungeonSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarInfo_descriptor_, &VarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildInfo_descriptor_, &BuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeEquipInfo_descriptor_, &MakeEquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CastleExploreInfo_descriptor_, &CastleExploreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryCastle_descriptor_, &BinaryCastle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryMakeEquip_descriptor_, &BinaryMakeEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CastlePetInfo_descriptor_, &CastlePetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CastleWorkPet_descriptor_, &CastleWorkPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryCastlePet_descriptor_, &BinaryCastlePet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CastlePetState_descriptor_, &CastlePetState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CastleStatueInfo_descriptor_, &CastleStatueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryCastleStatue_descriptor_, &BinaryCastleStatue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplaceSkill_descriptor_, &ReplaceSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelicUserPos_descriptor_, &RelicUserPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskTaskInfo_descriptor_, &RiskTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryRiskTaskInfo_descriptor_, &BinaryRiskTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LifeSkillInfo_descriptor_, &LifeSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryLifeSkill_descriptor_, &BinaryLifeSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayGuideInfo_descriptor_, &DayGuideInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleData_descriptor_, &TitleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonthCardData_descriptor_, &MonthCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingSystemData_descriptor_, &WingSystemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatHurtData_descriptor_, &StatHurtData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleInfo_descriptor_, &TitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitShopData_descriptor_, &LimitShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FundData_descriptor_, &FundData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TotalReSpData_descriptor_, &TotalReSpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeSpendData_descriptor_, &RechargeSpendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeclareWarData_descriptor_, &DeclareWarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropValues_descriptor_, &PropValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FPairDataDWORD_descriptor_, &FPairDataDWORD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FPairDataStrDW_descriptor_, &FPairDataStrDW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FTripleDataDWORD_descriptor_, &FTripleDataDWORD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StpObjectNode_descriptor_, &StpObjectNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMsgNpcFunction_descriptor_, &FMsgNpcFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FNpcDlgPara_descriptor_, &FNpcDlgPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FValueCell_descriptor_, &FValueCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FPropertyValues_descriptor_, &FPropertyValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FPropertyValues_FValue_descriptor_, &FPropertyValues_FValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FNpcMapData_descriptor_, &FNpcMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FStateData_descriptor_, &FStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FCharacterMapShow_descriptor_, &FCharacterMapShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FCharacterMapData_descriptor_, &FCharacterMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FNpcDeathMapData_descriptor_, &FNpcDeathMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FCharacterMainData_descriptor_, &FCharacterMainData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete II_PairData::default_instance_;
  delete II_PairData_reflection_;
  delete QuestVar::default_instance_;
  delete QuestVar_reflection_;
  delete PairDataDWORD::default_instance_;
  delete PairDataDWORD_reflection_;
  delete TripleDataDWORD::default_instance_;
  delete TripleDataDWORD_reflection_;
  delete QuestData::default_instance_;
  delete QuestData_reflection_;
  delete DoingQuestData::default_instance_;
  delete DoingQuestData_reflection_;
  delete QuestCompleteData::default_instance_;
  delete QuestCompleteData_reflection_;
  delete QuestPairData::default_instance_;
  delete QuestPairData_reflection_;
  delete QuestId::default_instance_;
  delete QuestId_reflection_;
  delete BinarySaveQuest::default_instance_;
  delete BinarySaveQuest_reflection_;
  delete ChangeEquipAccType::default_instance_;
  delete ChangeEquipAccType_reflection_;
  delete ChangeEquip::default_instance_;
  delete ChangeEquip_reflection_;
  delete ChangeEquip_stCE::default_instance_;
  delete ChangeEquip_stCE_reflection_;
  delete stChangeEquip::default_instance_;
  delete stChangeEquip_reflection_;
  delete TalismanStar::default_instance_;
  delete TalismanStar_reflection_;
  delete TalismanStar_Prop::default_instance_;
  delete TalismanStar_Prop_reflection_;
  delete TalismanData::default_instance_;
  delete TalismanData_reflection_;
  delete TalismanData_Skill::default_instance_;
  delete TalismanData_Skill_reflection_;
  delete ScenePetAutoFun::default_instance_;
  delete ScenePetAutoFun_reflection_;
  delete ScenePetSkillData::default_instance_;
  delete ScenePetSkillData_reflection_;
  delete ScenePetDoSkill::default_instance_;
  delete ScenePetDoSkill_reflection_;
  delete ScenePetData::default_instance_;
  delete ScenePetData_reflection_;
  delete ScenePetServerData::default_instance_;
  delete ScenePetServerData_reflection_;
  delete optionBaseAutoTeamMember::default_instance_;
  delete optionBaseAutoTeamMember_reflection_;
  delete stOptionBase::default_instance_;
  delete stOptionBase_reflection_;
  delete stDayHonor::default_instance_;
  delete stDayHonor_reflection_;
  delete stHonorKill::default_instance_;
  delete stHonorKill_reflection_;
  delete stHonorData::default_instance_;
  delete stHonorData_reflection_;
  delete stHonorLimit::default_instance_;
  delete stHonorLimit_reflection_;
  delete stAddPointLimit::default_instance_;
  delete stAddPointLimit_reflection_;
  delete SaveGuard::default_instance_;
  delete SaveGuard_reflection_;
  delete SaveDropIncreaseTime::default_instance_;
  delete SaveDropIncreaseTime_reflection_;
  delete stAccelKey::default_instance_;
  delete stAccelKey_reflection_;
  delete stMapTermData::default_instance_;
  delete stMapTermData_reflection_;
  delete OrderSysPresent::default_instance_;
  delete OrderSysPresent_reflection_;
  delete UserCopyID::default_instance_;
  delete UserCopyID_reflection_;
  delete UserCopyTimes::default_instance_;
  delete UserCopyTimes_reflection_;
  delete UserCopyScore::default_instance_;
  delete UserCopyScore_reflection_;
  delete UserCopySceneTimes::default_instance_;
  delete UserCopySceneTimes_reflection_;
  delete SaveSkill::default_instance_;
  delete SaveSkill_reflection_;
  delete BinarySaveSkill::default_instance_;
  delete BinarySaveSkill_reflection_;
  delete NoPropertyIconState::default_instance_;
  delete NoPropertyIconState_reflection_;
  delete SkillStatusElement::default_instance_;
  delete SkillStatusElement_reflection_;
  delete SkillStatusElement_Pos::default_instance_;
  delete SkillStatusElement_Pos_reflection_;
  delete ObjectLocation::default_instance_;
  delete ObjectLocation_reflection_;
  delete stoneSocket::default_instance_;
  delete stoneSocket_reflection_;
  delete diamondSoket::default_instance_;
  delete diamondSoket_reflection_;
  delete diamondSoket_Diamond::default_instance_;
  delete diamondSoket_Diamond_reflection_;
  delete wingData::default_instance_;
  delete wingData_reflection_;
  delete wingData_Diamond::default_instance_;
  delete wingData_Diamond_reflection_;
  delete wingData_ActiveSkill::default_instance_;
  delete wingData_ActiveSkill_reflection_;
  delete flyPos::default_instance_;
  delete flyPos_reflection_;
  delete flyMessage::default_instance_;
  delete flyMessage_reflection_;
  delete PropertyValues::default_instance_;
  delete PropertyValues_reflection_;
  delete PropertyValues_Value::default_instance_;
  delete PropertyValues_Value_reflection_;
  delete PropertyValuesEx::default_instance_;
  delete PropertyValuesEx_reflection_;
  delete PropertyValuesEx_Value::default_instance_;
  delete PropertyValuesEx_Value_reflection_;
  delete EquipBaseValue::default_instance_;
  delete EquipBaseValue_reflection_;
  delete EquipSplitData::default_instance_;
  delete EquipSplitData_reflection_;
  delete t_Object::default_instance_;
  delete t_Object_reflection_;
  delete ObjectMapData::default_instance_;
  delete ObjectMapData_reflection_;
  delete stChatChannel::default_instance_;
  delete stChatChannel_reflection_;
  delete stUserShopItemView::default_instance_;
  delete stUserShopItemView_reflection_;
  delete LockItem::default_instance_;
  delete LockItem_reflection_;
  delete CounterNum::default_instance_;
  delete CounterNum_reflection_;
  delete CounterSave::default_instance_;
  delete CounterSave_reflection_;
  delete TimeExpItem::default_instance_;
  delete TimeExpItem_reflection_;
  delete TimeExpSave::default_instance_;
  delete TimeExpSave_reflection_;
  delete ObjectArray::default_instance_;
  delete ObjectArray_reflection_;
  delete MailOneObject::default_instance_;
  delete MailOneObject_reflection_;
  delete MailObjects::default_instance_;
  delete MailObjects_reflection_;
  delete SceneShowFuncNpcData::default_instance_;
  delete SceneShowFuncNpcData_reflection_;
  delete MapFuncNpcList::default_instance_;
  delete MapFuncNpcList_reflection_;
  delete MusterCount::default_instance_;
  delete MusterCount_reflection_;
  delete septCartHelpBack::default_instance_;
  delete septCartHelpBack_reflection_;
  delete septCartHelpSave::default_instance_;
  delete septCartHelpSave_reflection_;
  delete BinaryGangData::default_instance_;
  delete BinaryGangData_reflection_;
  delete GangServerSyncData::default_instance_;
  delete GangServerSyncData_reflection_;
  delete StockAccountData::default_instance_;
  delete StockAccountData_reflection_;
  delete OneStockItem::default_instance_;
  delete OneStockItem_reflection_;
  delete SelfOneStockItem::default_instance_;
  delete SelfOneStockItem_reflection_;
  delete StockTypeList::default_instance_;
  delete StockTypeList_reflection_;
  delete SeptBuildingData::default_instance_;
  delete SeptBuildingData_reflection_;
  delete SceneChariotSkill::default_instance_;
  delete SceneChariotSkill_reflection_;
  delete SceneChariotBaseData::default_instance_;
  delete SceneChariotBaseData_reflection_;
  delete SceneChariotBinaryData::default_instance_;
  delete SceneChariotBinaryData_reflection_;
  delete UserTempPosition::default_instance_;
  delete UserTempPosition_reflection_;
  delete BiGuanXiuXianData::default_instance_;
  delete BiGuanXiuXianData_reflection_;
  delete ObjectDrop::default_instance_;
  delete ObjectDrop_reflection_;
  delete ObjectDropSave::default_instance_;
  delete ObjectDropSave_reflection_;
  delete CopyUserMember::default_instance_;
  delete CopyUserMember_reflection_;
  delete DBCopySceneBinaryData::default_instance_;
  delete DBCopySceneBinaryData_reflection_;
  delete HorseExtraData::default_instance_;
  delete HorseExtraData_reflection_;
  delete CharacterMapShow::default_instance_;
  delete CharacterMapShow_reflection_;
  delete StateData::default_instance_;
  delete StateData_reflection_;
  delete CharacterMapData::default_instance_;
  delete CharacterMapData_reflection_;
  delete CharacterMainData::default_instance_;
  delete CharacterMainData_reflection_;
  delete NpcMapData::default_instance_;
  delete NpcMapData_reflection_;
  delete NpcDeathMapData::default_instance_;
  delete NpcDeathMapData_reflection_;
  delete EquipChangeMaterial::default_instance_;
  delete EquipChangeMaterial_reflection_;
  delete AddMaxCount::default_instance_;
  delete AddMaxCount_reflection_;
  delete AddMaxCount_Count::default_instance_;
  delete AddMaxCount_Count_reflection_;
  delete BossReliveInfo::default_instance_;
  delete BossReliveInfo_reflection_;
  delete ChangeZoneInfo::default_instance_;
  delete ChangeZoneInfo_reflection_;
  delete UserScore::default_instance_;
  delete UserScore_reflection_;
  delete OneYaoQianItem::default_instance_;
  delete OneYaoQianItem_reflection_;
  delete YaoQianSaveData::default_instance_;
  delete YaoQianSaveData_reflection_;
  delete DungeonSaveData::default_instance_;
  delete DungeonSaveData_reflection_;
  delete VarInfo::default_instance_;
  delete VarInfo_reflection_;
  delete BuildInfo::default_instance_;
  delete BuildInfo_reflection_;
  delete MakeEquipInfo::default_instance_;
  delete MakeEquipInfo_reflection_;
  delete CastleExploreInfo::default_instance_;
  delete CastleExploreInfo_reflection_;
  delete BinaryCastle::default_instance_;
  delete BinaryCastle_reflection_;
  delete BinaryMakeEquip::default_instance_;
  delete BinaryMakeEquip_reflection_;
  delete CastlePetInfo::default_instance_;
  delete CastlePetInfo_reflection_;
  delete CastleWorkPet::default_instance_;
  delete CastleWorkPet_reflection_;
  delete BinaryCastlePet::default_instance_;
  delete BinaryCastlePet_reflection_;
  delete CastlePetState::default_instance_;
  delete CastlePetState_reflection_;
  delete CastleStatueInfo::default_instance_;
  delete CastleStatueInfo_reflection_;
  delete BinaryCastleStatue::default_instance_;
  delete BinaryCastleStatue_reflection_;
  delete ReplaceSkill::default_instance_;
  delete ReplaceSkill_reflection_;
  delete RelicUserPos::default_instance_;
  delete RelicUserPos_reflection_;
  delete RiskTaskInfo::default_instance_;
  delete RiskTaskInfo_reflection_;
  delete BinaryRiskTaskInfo::default_instance_;
  delete BinaryRiskTaskInfo_reflection_;
  delete LifeSkillInfo::default_instance_;
  delete LifeSkillInfo_reflection_;
  delete BinaryLifeSkill::default_instance_;
  delete BinaryLifeSkill_reflection_;
  delete DayGuideInfo::default_instance_;
  delete DayGuideInfo_reflection_;
  delete TitleData::default_instance_;
  delete TitleData_reflection_;
  delete MonthCardData::default_instance_;
  delete MonthCardData_reflection_;
  delete WingSystemData::default_instance_;
  delete WingSystemData_reflection_;
  delete StatHurtData::default_instance_;
  delete StatHurtData_reflection_;
  delete TitleInfo::default_instance_;
  delete TitleInfo_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete LimitShopData::default_instance_;
  delete LimitShopData_reflection_;
  delete FundData::default_instance_;
  delete FundData_reflection_;
  delete TotalReSpData::default_instance_;
  delete TotalReSpData_reflection_;
  delete RechargeSpendData::default_instance_;
  delete RechargeSpendData_reflection_;
  delete DeclareWarData::default_instance_;
  delete DeclareWarData_reflection_;
  delete PropValues::default_instance_;
  delete PropValues_reflection_;
  delete FPairDataDWORD::default_instance_;
  delete FPairDataDWORD_reflection_;
  delete FPairDataStrDW::default_instance_;
  delete FPairDataStrDW_reflection_;
  delete FTripleDataDWORD::default_instance_;
  delete FTripleDataDWORD_reflection_;
  delete StpObjectNode::default_instance_;
  delete StpObjectNode_reflection_;
  delete FMsgNpcFunction::default_instance_;
  delete FMsgNpcFunction_reflection_;
  delete FNpcDlgPara::default_instance_;
  delete FNpcDlgPara_reflection_;
  delete FValueCell::default_instance_;
  delete FValueCell_reflection_;
  delete FPropertyValues::default_instance_;
  delete FPropertyValues_reflection_;
  delete FPropertyValues_FValue::default_instance_;
  delete FPropertyValues_FValue_reflection_;
  delete FNpcMapData::default_instance_;
  delete FNpcMapData_reflection_;
  delete FStateData::default_instance_;
  delete FStateData_reflection_;
  delete FCharacterMapShow::default_instance_;
  delete FCharacterMapShow_reflection_;
  delete FCharacterMapData::default_instance_;
  delete FCharacterMapData_reflection_;
  delete FNpcDeathMapData::default_instance_;
  delete FNpcDeathMapData_reflection_;
  delete FCharacterMainData::default_instance_;
  delete FCharacterMainData_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\"2\n\013II_PairData\022\020\n\005first\030\001"
    " \001(\r:\0010\022\021\n\006second\030\002 \001(\r:\0010\"(\n\010QuestVar\022\r"
    "\n\005subid\030\001 \001(\r\022\r\n\005value\030\002 \001(\005\"-\n\rPairData"
    "DWORD\022\r\n\005para1\030\001 \001(\r\022\r\n\005para2\030\002 \001(\r\">\n\017T"
    "ripleDataDWORD\022\r\n\005para1\030\001 \001(\r\022\r\n\005para2\030\002"
    " \001(\r\022\r\n\005para3\030\003 \001(\r\"\204\002\n\tQuestData\022\017\n\007que"
    "stid\030\001 \001(\r\022/\n\005state\030\002 \001(\0162\017.QuestStateTy"
    "pe:\017QUESTSTATE_NONE\022\024\n\006addvar\030\003 \001(\010:\004tru"
    "e\022\027\n\004vars\030\004 \003(\0132\t.QuestVar\022\022\n\nacceptTime"
    "\030\005 \001(\r\022\031\n\016completeSubNum\030\006 \001(\r:\0010\022\026\n\nsub"
    "questid\030\007 \003(\rB\002\020\001\022\023\n\013questdataid\030\010 \001(\r\022\020"
    "\n\010cartceof\030\t \001(\002\022\030\n\020is_accept_double\030\n \001"
    "(\010\":\n\016DoingQuestData\022\r\n\005dirty\030\001 \001(\010\022\031\n\005q"
    "uest\030\002 \003(\0132\n.QuestData\"5\n\021QuestCompleteD"
    "ata\022\r\n\005dirty\030\001 \001(\010\022\021\n\005quest\030\002 \003(\rB\002\020\001\":\n"
    "\rQuestPairData\022\r\n\005dirty\030\001 \001(\010\022\032\n\004data\030\002 "
    "\003(\0132\014.II_PairData\"-\n\007QuestId\022\017\n\007questid\030"
    "\001 \001(\r\022\021\n\005subid\030\002 \003(\rB\002\020\001\"\211\002\n\017BinarySaveQ"
    "uest\022#\n\nquestsdata\030\001 \001(\0132\017.DoingQuestDat"
    "a\022+\n\017completedquests\030\002 \001(\0132\022.QuestComple"
    "teData\022\'\n\017globleQuestVars\030\003 \001(\0132\016.QuestP"
    "airData\022,\n\024dailyQuestsCompleted\030\004 \001(\0132\016."
    "QuestPairData\022,\n\024cycleQuestsCompleted\030\005 "
    "\001(\0132\016.QuestPairData\022\037\n\rcancelquestid\030\006 \003"
    "(\0132\010.QuestId\"=\n\022ChangeEquipAccType\022\n\n\002id"
    "\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005index\030\003 \001(\r\"\235\001\n\013"
    "ChangeEquip\022\r\n\005index\030\001 \001(\r\022\'\n\014changeEqui"
    "ps\030\002 \003(\0132\021.ChangeEquip.stCE\022,\n\017changeEqu"
    "ipAccs\030\003 \003(\0132\023.ChangeEquipAccType\032(\n\004stC"
    "E\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\"Z\n\rs"
    "tChangeEquip\022\r\n\005index\030\001 \001(\r\022\023\n\007equipID\030\002"
    " \003(\rB\002\020\001\022%\n\010accKeyID\030\003 \003(\0132\023.ChangeEquip"
    "AccType\"q\n\014TalismanStar\022 \n\004prop\030\001 \003(\0132\022."
    "TalismanStar.Prop\022\r\n\005index\030\002 \001(\r\0320\n\004Prop"
    "\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\022\014\n\004star\030\003 \001"
    "(\r\"\354\001\n\014TalismanData\022\r\n\005borne\030\001 \001(\010\022\013\n\003ex"
    "p\030\002 \001(\004\022\r\n\005level\030\003 \001(\r\022\n\n\002hp\030\004 \001(\r\022\n\n\002mp"
    "\030\005 \001(\r\022\016\n\006attack\030\006 \001(\r\022\017\n\007defence\030\007 \001(\r\022"
    "\"\n\005skill\030\t \003(\0132\023.TalismanData.Skill\022\014\n\004s"
    "tar\030\n \001(\r\022\037\n\010starprop\030\013 \001(\0132\r.TalismanSt"
    "ar\022\020\n\010freshnum\030\014 \001(\r\032\023\n\005Skill\022\n\n\002id\030\001 \001("
    "\r\"\265\001\n\017ScenePetAutoFun\022\025\n\rcanAutoPickup\030\001"
    " \001(\010\022\026\n\016canAutoAddHpMp\030\002 \001(\010\022\021\n\tlessHpPe"
    "r\030\003 \001(\r\022\020\n\010useHpObj\030\004 \001(\r\022\021\n\tlessMpPer\030\005"
    " \001(\r\022\020\n\010useMpObj\030\006 \001(\r\022\023\n\013usePetHpObj\030\007 "
    "\001(\r\022\024\n\014lessPetHpPer\030\010 \001(\r\"^\n\021ScenePetSki"
    "llData\022\022\n\npetskillid\030\001 \001(\r\022\017\n\007skillid\030\002 "
    "\001(\r\022\022\n\nskilllevel\030\003 \001(\r\022\020\n\010usertype\030\004 \001("
    "\r\"2\n\017ScenePetDoSkill\022\017\n\007useRate\030\001 \001(\r\022\016\n"
    "\006target\030\002 \001(\r\"\202\010\n\014ScenePetData\022\016\n\006baseId"
    "\030\001 \001(\r\022\020\n\010masterId\030\002 \001(\r\022\r\n\005resId\030\003 \001(\r\022"
    "\r\n\005index\030\004 \001(\r\022\014\n\004name\030\005 \001(\t\022\r\n\005level\030\006 "
    "\001(\r\022\020\n\010useLevel\030\007 \001(\r\022\017\n\007petbind\030\010 \001(\010\022\024"
    "\n\014enhanceLevel\030\t \001(\r\022\013\n\003sex\030\013 \001(\r\022\016\n\006met"
    "tle\030\014 \001(\r\022\013\n\003exp\030\r \001(\004\022\n\n\002hp\030\016 \001(\r\022\r\n\005ma"
    "xhp\030\017 \001(\r\022\014\n\004life\030\020 \001(\r\022\r\n\005happy\030\021 \001(\r\022\020"
    "\n\010strength\030\022 \001(\r\022\021\n\tdexterity\030\023 \001(\r\022\021\n\tm"
    "entality\030\024 \001(\r\022\024\n\014constitution\030\025 \001(\r\022\023\n\013"
    "growupLevel\030\026 \001(\r\022\024\n\014streAptitude\030\027 \001(\r\022"
    "\024\n\014dextAptitude\030\030 \001(\r\022\024\n\014mentAptitude\030\031 "
    "\001(\r\022\024\n\014consAptitude\030\032 \001(\r\022\022\n\npmaxAttack\030"
    "\033 \001(\r\022\022\n\nmmaxAttack\030\034 \001(\r\022\022\n\npminAttack\030"
    "\035 \001(\r\022\022\n\nmminAttack\030\036 \001(\r\022\020\n\010pDefence\030\037 "
    "\001(\r\022\020\n\010mDefence\030  \001(\r\022\021\n\theavyRate\030! \001(\r"
    "\022\021\n\tluckyRate\030\" \001(\r\022\030\n\020attackSpeedLevel\030"
    "# \001(\r\022\026\n\016moveSpeedLevel\030$ \001(\r\022\022\n\nmemory_"
    "exp\030% \001(\004\022\021\n\tequipGrid\030( \001(\r\022\027\n\017activeSk"
    "illGrid\030) \001(\r\022!\n\005skill\030+ \003(\0132\022.ScenePetS"
    "killData\022\'\n\013activeskill\030, \003(\0132\022.ScenePet"
    "SkillData\022\022\n\nequipItems\030- \003(\r\022\026\n\016killEne"
    "myCount\030. \001(\r\022\020\n\004sign\030< \003(\rB\002\020\001\022\014\n\004kind\030"
    "G \001(\r\022\016\n\006growup\030H \001(\r\022\021\n\tfreePoint\030I \001(\r"
    "\022\025\n\raptitudeLevel\030J \001(\r\022\034\n\024activeskill_c"
    "ooltime\030K \001(\r\022\037\n\020indentify_growup\030L \001(\010:"
    "\005false\022\016\n\006lingqi\030M \001(\r\022\022\n\nlingqiattr\030N \001"
    "(\r\"\216\002\n\022ScenePetServerData\022\035\n\006common\030\001 \001("
    "\0132\r.ScenePetData\022\r\n\005tmpId\030\002 \001(\r\022\021\n\tfirst"
    "Name\030\003 \001(\t\022\t\n\001x\030\004 \001(\r\022\t\n\001y\030\005 \001(\r\022\017\n\007maxl"
    "ife\030\006 \001(\r\022\020\n\010skillMax\030\016 \001(\r\022\026\n\016create_it"
    "em_id\030\021 \001(\r\022\016\n\002ai\030\t \003(\rB\002\020\001\022\021\n\tinitLevel"
    "\030\n \001(\r\022\024\n\010intiAttr\030\013 \003(\rB\002\020\001\022\026\n\016retrnApt"
    "iLevel\030\014 \001(\r\022\025\n\tretrnApti\030\r \003(\rB\002\020\001\"8\n\030o"
    "ptionBaseAutoTeamMember\022\016\n\006charid\030\001 \001(\r\022"
    "\014\n\004name\030\002 \001(\t\"\252\002\n\014stOptionBase\022\027\n\tallowT"
    "eam\030\001 \001(\010:\004true\022\030\n\nallowTrade\030\002 \001(\010:\004tru"
    "e\022\027\n\tallowSept\030\003 \001(\010:\004true\022\027\n\tallowGang\030"
    "\004 \001(\010:\004true\022\031\n\013allowFriend\030\005 \001(\010:\004true\022\032"
    "\n\014allowBanName\030\006 \001(\010:\004true\022\034\n\rallowintot"
    "eam\030\007 \001(\010:\005false\022\031\n\016intoteam_level\030\010 \001(\r"
    ":\0010\022-\n\nteammember\030\t \003(\0132\031.optionBaseAuto"
    "TeamMember\022\026\n\010autoride\030\n \001(\010:\004true\")\n\nst"
    "DayHonor\022\r\n\005honor\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\"e\n"
    "\013stHonorKill\022\023\n\013revenUserId\030\001 \001(\r\022\025\n\rhon"
    "orKillTime\030\002 \001(\r\022\025\n\rrevenKillTime\030\003 \001(\r\022"
    "\023\n\013killCounter\030\004 \001(\r\"\034\n\013stHonorData\022\r\n\005h"
    "onor\030\001 \001(\r\"\?\n\014stHonorLimit\022\r\n\005mapid\030\001 \001("
    "\r\022\016\n\006charid\030\002 \001(\r\022\020\n\010killtime\030\003 \001(\r\"3\n\017s"
    "tAddPointLimit\022\016\n\006charid\030\001 \001(\r\022\020\n\010add_ti"
    "me\030\002 \001(\r\"\\\n\tSaveGuard\022\022\n\ncartBaseId\030\001 \001("
    "\r\022\021\n\tcartTmpId\030\002 \001(\r\022\023\n\013cartSceneId\030\003 \001("
    "\r\022\023\n\013cartTimeEnd\030\004 \001(\r\"D\n\024SaveDropIncrea"
    "seTime\022\032\n\022timeLeftForIncRate\030\001 \001(\r\022\020\n\010sa"
    "vetime\030\002 \001(\r\"K\n\nstAccelKey\022\014\n\004type\030\001 \001(\r"
    "\022\022\n\neAccelType\030\002 \001(\r\022\014\n\004dwID\030\003 \001(\r\022\r\n\005in"
    "dex\030\004 \001(\r\",\n\rstMapTermData\022\r\n\005mapid\030\001 \001("
    "\r\022\014\n\004time\030\002 \001(\r\"\"\n\017OrderSysPresent\022\017\n\007or"
    "derid\030\001 \003(\r\"f\n\nUserCopyID\0224\n\004type\030\001 \001(\0162"
    "\022.enumCopySceneType:\022enumCopyScene_None\022"
    "\022\n\ncopytypeid\030\002 \001(\r\022\016\n\006copyid\030\003 \001(\r\"\243\001\n\r"
    "UserCopyTimes\0224\n\004type\030\001 \001(\0162\022.enumCopySc"
    "eneType:\022enumCopyScene_None\022\022\n\ncopytypei"
    "d\030\004 \001(\r\022\014\n\004time\030\002 \001(\r\022+\n\007cyctype\030\003 \001(\0162\n"
    ".TimeCycle:\016TimeCycle_None\022\r\n\005state\030\005 \001("
    "\r\"\245\001\n\rUserCopyScore\0224\n\004type\030\001 \001(\0162\022.enum"
    "CopySceneType:\022enumCopyScene_None\022\022\n\ncop"
    "ytypeid\030\005 \001(\r\022\r\n\005score\030\002 \001(\r\022\016\n\006number\030\003"
    " \001(\r\022+\n\007cyctype\030\004 \001(\0162\n.TimeCycle:\016TimeC"
    "ycle_None\")\n\022UserCopySceneTimes\022\023\n\013teamm"
    "onster\030\001 \001(\r\"+\n\tSaveSkill\022\017\n\007skillid\030\001 \002"
    "(\r\022\r\n\005level\030\002 \002(\r\"-\n\017BinarySaveSkill\022\032\n\006"
    "skills\030\001 \003(\0132\n.SaveSkill\":\n\023NoPropertyIc"
    "onState\022\017\n\007stateid\030\001 \001(\r\022\022\n\007endtime\030\002 \001("
    "\r:\0010\"\201\003\n\022SkillStatusElement\022\r\n\005keyid\030\001 \001"
    "(\004\022\017\n\007skillid\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\022\r\n\005state"
    "\030\004 \001(\r\022\017\n\007percent\030\005 \001(\r\022\r\n\005value\030\006 \001(\005\022\021"
    "\n\tbackvalue\030\007 \001(\r\022\014\n\004time\030\010 \001(\004\022\017\n\007endti"
    "me\030\t \001(\004\022\014\n\004step\030\n \001(\r\022\021\n\tskillType\030\013 \001("
    "\r\022\017\n\007refresh\030\014 \001(\010\022\013\n\003dir\030\r \001(\r\022$\n\003pos\030\016"
    " \001(\0132\027.SkillStatusElement.Pos\022\022\n\nattacke"
    "rID\030\017 \001(\r\022\022\n\nattacktype\030\020 \001(\r\022\020\n\010targetI"
    "D\030\021 \001(\r\022\022\n\ntargetType\030\022 \001(\r\022\016\n\006layers\030\023 "
    "\001(\r\032\033\n\003Pos\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\"G\n\016Obje"
    "ctLocation\022\020\n\010location\030\001 \001(\r\022\r\n\005table\030\002 "
    "\001(\r\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\"D\n\013stoneSocket"
    "\022\017\n\007stoneID\030\001 \001(\r\022\021\n\tstoneRank\030\002 \001(\r\022\021\n\005"
    "value\030\003 \003(\rB\002\020\001\"\236\001\n\014diamondSoket\022&\n\007diam"
    "ond\030\001 \003(\0132\025.diamondSoket.Diamond\032f\n\007Diam"
    "ond\022\r\n\005index\030\006 \001(\r\022\016\n\006status\030\001 \001(\r\022\016\n\006ba"
    "seid\030\002 \001(\r\022\017\n\007upgrade\030\003 \001(\r\022\014\n\004type\030\004 \001("
    "\r\022\r\n\005value\030\005 \001(\r\"\342\001\n\010wingData\022\"\n\007diamond"
    "\030\001 \003(\0132\021.wingData.Diamond\022$\n\005skill\030\002 \001(\013"
    "2\025.wingData.ActiveSkill\022&\n\013diamonditem\030\003"
    " \001(\0132\021.wingData.Diamond\0325\n\007Diamond\022\016\n\006ba"
    "seid\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\013\n\003exp\030\003 \001(\r\032-"
    "\n\013ActiveSkill\022\017\n\007skillid\030\001 \001(\r\022\r\n\005level\030"
    "\002 \001(\r\"2\n\006flyPos\022\022\n\nscene_name\030\001 \001(\t\022\t\n\001x"
    "\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\":\n\nflyMessage\022\027\n\006flypo"
    "s\030\001 \003(\0132\007.flyPos\022\023\n\013avail_times\030\002 \001(\r\"{\n"
    "\016PropertyValues\022$\n\005value\030\001 \003(\0132\025.Propert"
    "yValues.Value\032C\n\005Value\022+\n\003key\030\001 \001(\0162\016.Pr"
    "opValueType:\016ValueType_none\022\r\n\005value\030\002 \003"
    "(\r\"\217\001\n\020PropertyValuesEx\022&\n\005value\030\001 \003(\0132\027"
    ".PropertyValuesEx.Value\032S\n\005Value\022+\n\003key\030"
    "\001 \001(\0162\016.PropValueType:\016ValueType_none\022\035\n"
    "\005value\030\002 \003(\0132\016.PairDataDWORD\"\365\007\n\016EquipBa"
    "seValue\022\020\n\010strength\030\001 \001(\r\022\021\n\tdexterity\030\002"
    " \001(\r\022\021\n\tmentality\030\003 \001(\r\022\024\n\014constitution\030"
    "\004 \001(\r\022\r\n\005maxhp\030\005 \001(\r\022\r\n\005maxmp\030\006 \001(\r\022\022\n\nm"
    "inpdamage\030\007 \001(\r\022\022\n\nmaxpdamage\030\010 \001(\r\022\022\n\nm"
    "inmdamage\030\t \001(\r\022\022\n\nmaxmdamage\030\n \001(\r\022\020\n\010p"
    "defence\030\013 \001(\r\022\020\n\010mdefence\030\014 \001(\r\022\020\n\010pdama"
    "gep\030\r \001(\r\022\020\n\010mdamagep\030\016 \001(\r\022\021\n\tpdefencep"
    "\030\017 \001(\r\022\021\n\tmdefencep\030\020 \001(\r\022\020\n\010attlevel\030\021 "
    "\001(\r\022\020\n\010deflevel\030\022 \001(\r\022\017\n\007hplevel\030\023 \001(\r\022\017"
    "\n\007mvspeed\030\031 \001(\005\022\020\n\010luckRate\030\032 \001(\r\022\017\n\007hit"
    "Rate\030\033 \001(\r\022\020\n\010missRate\030\034 \001(\r\022\021\n\tsmiteRat"
    "e\030\035 \001(\r\022\023\n\013reSmiteRate\030\036 \001(\r\022\020\n\010beatRate"
    "\030\037 \001(\r\022\022\n\nreBeatRate\030  \001(\r\022\025\n\rparalysisR"
    "ate\030! \001(\r\022\027\n\017reParalysisRate\030\" \001(\r\022\020\n\010co"
    "ldRate\030# \001(\r\022\022\n\nreColdRate\030$ \001(\r\022\021\n\treAl"
    "lRate\030% \001(\r\022\023\n\013neglectRate\030& \001(\r\022\021\n\tdama"
    "geInc\030\' \001(\r\022\020\n\010hpsucker\030( \001(\r\022\020\n\010mpsucke"
    "r\030) \001(\r\022\024\n\014hpsuckerrate\030* \001(\r\022\024\n\014mpsucke"
    "rrate\030+ \001(\r\022\020\n\010hpresume\030, \001(\r\022\020\n\010mpresum"
    "e\030- \001(\r\022\025\n\rmoneyLostRate\030. \001(\r\022\025\n\requipL"
    "ostRate\030/ \001(\r\022\020\n\010smiteAdd\0300 \001(\r\022\024\n\014fixed"
    "hurtadd\0301 \001(\r\022\024\n\014fixedhurtsub\0302 \001(\r\022\017\n\007r"
    "eflect\0303 \001(\r\022\016\n\006shield\0304 \001(\r\022\016\n\006resist\0305"
    " \001(\r\022\021\n\tbutterfly\0306 \001(\r\022\025\n\rreneglectrate"
    "\0307 \001(\r\022\021\n\tphyresist\0308 \001(\r\022\021\n\tmagresist\0309"
    " \001(\r\"I\n\016EquipSplitData\022\013\n\003pos\030\001 \001(\r\022\014\n\004t"
    "ype\030\002 \001(\r\022\r\n\005value\030\003 \001(\r\022\r\n\005level\030\004 \001(\r\""
    "\234\006\n\010t_Object\022\016\n\006thisID\030\001 \001(\r\022\r\n\005objID\030\002 "
    "\001(\r\022\014\n\004name\030\003 \001(\t\022\r\n\005maker\030\004 \001(\t\022\034\n\003pos\030"
    "\005 \001(\0132\017.ObjectLocation\022\013\n\003num\030\006 \001(\r\022\017\n\007u"
    "pgrade\030\007 \001(\r\022\014\n\004kind\030\010 \001(\r\022\r\n\005level\030\017 \001("
    "\r\022\021\n\tneedlevel\030\t \001(\r\022\016\n\006maxDur\030\n \001(\r\022\013\n\003"
    "dur\030\013 \001(\r\022\014\n\004bind\030\014 \001(\r\022\021\n\ttimertype\030\r \001"
    "(\r\022\020\n\010lifetime\030\016 \001(\r\022\020\n\010createID\030\020 \001(\004\022\022"
    "\n\nmakeruleid\030\024 \001(\r\022\"\n\tequipProp\030\026 \001(\0132\017."
    "PropertyValues\022&\n\013equippropex\030\027 \001(\0132\021.Pr"
    "opertyValuesEx\022\r\n\005skill\030\031 \003(\r\022\024\n\014subneed"
    "level\030\032 \001(\r\022\020\n\010fivetype\030\037 \001(\r\022\021\n\tfivepoi"
    "nt\030  \001(\r\022\014\n\004star\030! \001(\r\022\024\n\014diamondbonus\030$"
    " \001(\r\022#\n\014diamondsoket\030% \001(\0132\r.diamondSoke"
    "t\022\027\n\004wing\030& \001(\0132\t.wingData\022\016\n\006active\030( \001"
    "(\r\022\016\n\006boxExp\030) \001(\r\022\030\n\003fly\030+ \001(\0132\013.flyMes"
    "sage\022\017\n\007horseid\030, \001(\r\022\017\n\007spvalue\030- \001(\r\022\023"
    "\n\013friendvalue\030. \001(\r\022\016\n\006usepos\030/ \001(\r\022\027\n\013e"
    "lementattr\0300 \001(\005:\002-1\022\020\n\010suittype\0301 \001(\r\022\021"
    "\n\tsuitvalue\0302 \001(\r\022#\n\nsplitvalue\0303 \001(\0132\017."
    "EquipSplitData\022\026\n\007suitact\0304 \001(\010:\005false\"\323"
    "\001\n\rObjectMapData\022\n\n\002id\030\001 \001(\r\022\017\n\007temp_id\030"
    "\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\013\n\003num\030\004 \001(\r\022\t\n\001x\030\005 "
    "\001(\r\022\t\n\001y\030\006 \001(\r\022\014\n\004kind\030\007 \001(\r\022\024\n\014protect_"
    "time\030\010 \001(\r\022\026\n\016disappear_time\030\t \001(\r\022\022\n\now"
    "ner_type\030\n \001(\r\022\020\n\010owner_id\030\013 \001(\r\022\022\n\npref"
    "ixkeys\030\014 \003(\r\"\217\001\n\rstChatChannel\022\022\n\nsender"
    "Name\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\022\036\n\007petData\030\003 \003("
    "\0132\r.ScenePetData\022\030\n\005items\030\004 \003(\0132\t.t_Obje"
    "ct\022\"\n\thorsedata\030\005 \003(\0132\017.HorseExtraData\"\320"
    "\001\n\022stUserShopItemView\022\027\n\004item\030\001 \001(\0132\t.t_"
    "Object\022\021\n\tunitPrice\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\022\t"
    "\n\001x\030\004 \001(\r\022\t\n\001y\030\005 \001(\r\022:\n\nprice_type\030\006 \001(\016"
    "2\036.stUserShopItemView.PriceTypes:\006Silver"
    "\022\013\n\003tax\030\007 \001(\r\"\"\n\nPriceTypes\022\n\n\006Silver\020\000\022"
    "\010\n\004Gold\020\001\"%\n\010LockItem\022\n\n\002id\030\001 \001(\r\022\r\n\005val"
    "ue\030\002 \001(\r\"\224\001\n\nCounterNum\022\n\n\002id\030\001 \001(\r\022\014\n\004t"
    "ime\030\002 \001(\r\022\023\n\013valueForDay\030\003 \001(\r\022\024\n\014valueF"
    "orWeek\030\004 \001(\r\022\025\n\rvalueForMonth\030\005 \001(\r\022\024\n\014v"
    "alueForYear\030\006 \001(\r\022\024\n\014valueForever\030\007 \001(\r\""
    "\\\n\013CounterSave\022.\n\tcounttype\030\001 \001(\0162\014.Coun"
    "terType:\rCOUNTERT_NONE\022\035\n\010countnum\030\002 \003(\013"
    "2\013.CounterNum\"a\n\013TimeExpItem\022\016\n\006baseid\030\001"
    " \001(\r\022\014\n\004type\030\002 \001(\r\022\020\n\010end_time\030\003 \001(\r\022\023\n\013"
    "coefficient\030\004 \001(\r\022\r\n\005state\030\005 \001(\r\"S\n\013Time"
    "ExpSave\022\021\n\tleft_time\030\001 \001(\r\022\022\n\nreset_time"
    "\030\002 \001(\r\022\035\n\007expitem\030\003 \003(\0132\014.TimeExpItem\")\n"
    "\013ObjectArray\022\032\n\007objects\030\001 \003(\0132\t.t_Object"
    "\"9\n\rMailOneObject\022\r\n\005index\030\001 \001(\r\022\031\n\006obje"
    "ct\030\002 \001(\0132\t.t_Object\".\n\013MailObjects\022\037\n\007ob"
    "jects\030\001 \003(\0132\016.MailOneObject\"h\n\024SceneShow"
    "FuncNpcData\022\016\n\006baseId\030\001 \001(\r\022\016\n\006tempId\030\002 "
    "\001(\r\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\022\014\n\004show\030\005 \001(\r\022"
    "\014\n\004sign\030\006 \001(\r\"5\n\016MapFuncNpcList\022#\n\004data\030"
    "\001 \003(\0132\025.SceneShowFuncNpcData\".\n\013MusterCo"
    "unt\022\020\n\010musterid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"a\n\020"
    "septCartHelpBack\022\020\n\010scene_id\030\001 \001(\r\022\022\n\nsc"
    "ene_name\030\002 \001(\t\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\022\021\n\t"
    "help_time\030\005 \001(\r\"C\n\020septCartHelpSave\022\025\n\nc"
    "art_tmpid\030\001 \001(\r:\0010\022\030\n\tavailable\030\002 \001(\010:\005f"
    "alse\",\n\016BinaryGangData\022\032\n\022startdoubleexp"
    "time\030\001 \001(\r\"R\n\022GangServerSyncData\022\016\n\006gang"
    "id\030\001 \001(\r\022\020\n\010gangname\030\002 \001(\t\022\032\n\022startdoubl"
    "eexptime\030\003 \001(\r\"/\n\020StockAccountData\022\r\n\005mo"
    "ney\030\001 \001(\r\022\014\n\004gold\030\002 \001(\r\"*\n\014OneStockItem\022"
    "\r\n\005price\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\206\001\n\020SelfOneS"
    "tockItem\022\017\n\007tradeid\030\001 \001(\r\0227\n\004type\030\002 \001(\0162"
    "\025.enumStockAuctionType:\022enumStock_SellGo"
    "ld\022\r\n\005price\030\003 \001(\r\022\013\n\003num\030\004 \001(\r\022\014\n\004time\030\005"
    " \001(\r\"f\n\rStockTypeList\0227\n\004type\030\001 \001(\0162\025.en"
    "umStockAuctionType:\022enumStock_SellGold\022\034"
    "\n\005items\030\002 \003(\0132\r.OneStockItem\"\207\001\n\020SeptBui"
    "ldingData\022>\n\004type\030\001 \002(\0162\025.enumSeptBuildi"
    "ngType:\031enumSeptBuildingType_None\022\r\n\005lev"
    "el\030\002 \001(\r\022\r\n\005point\030\003 \001(\r\022\025\n\nbuildstate\030\004 "
    "\001(\r:\0010\"L\n\021SceneChariotSkill\022\020\n\010skill_id\030"
    "\001 \001(\r\022\023\n\013skill_level\030\002 \001(\r\022\020\n\010use_type\030\003"
    " \001(\r\"\330\004\n\024SceneChariotBaseData\022\017\n\007base_id"
    "\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\021\n\ttype_name\030\003 \001(\t\022"
    "\020\n\004sign\030\004 \003(\rB\002\020\001\022\n\n\002ai\030\005 \003(\r\022\023\n\013honor_l"
    "evel\030\006 \001(\r\022\r\n\005honor\030\007 \001(\r\022\017\n\007sept_id\030\010 \001"
    "(\r\022\r\n\005index\030\t \001(\r\022\026\n\016ex_holder_name\030\n \001("
    "\t\022\023\n\013max_carrier\030\013 \001(\r\022\n\n\002hp\030\014 \001(\r\022\r\n\005ma"
    "xhp\030\r \001(\r\022\n\n\002mp\030\016 \001(\r\022\r\n\005maxmp\030\017 \001(\r\022\023\n\013"
    "pmax_attack\030\020 \001(\r\022\023\n\013mmax_attack\030\021 \001(\r\022\023"
    "\n\013pmin_attack\030\022 \001(\r\022\023\n\013mmin_attack\030\023 \001(\r"
    "\022\020\n\010pdefence\030\024 \001(\r\022\020\n\010mdefence\030\025 \001(\r\022\r\n\005"
    "heavy\030\026 \001(\r\022\032\n\022attack_speed_level\030\027 \001(\r\022"
    "\033\n\023attack_length_level\030\030 \001(\r\022\030\n\020move_spe"
    "ed_level\030\031 \001(\r\022\020\n\010strength\030\032 \001(\r\022\021\n\tdext"
    "erity\030\033 \001(\r\022\021\n\tmentality\030\034 \001(\r\022\024\n\014consti"
    "tution\030\035 \001(\r\022!\n\005skill\030# \003(\0132\022.SceneChari"
    "otSkill\"\203\001\n\026SceneChariotBinaryData\022#\n\004ba"
    "se\030\001 \001(\0132\025.SceneChariotBaseData\022\021\n\tholde"
    "r_id\030\002 \001(\r\022\023\n\013holder_name\030\003 \001(\t\022\r\n\005state"
    "\030\004 \001(\r\022\r\n\005tmpid\030\005 \001(\r\"`\n\020UserTempPositio"
    "n\022\023\n\013src_sceneid\030\001 \001(\r\022\020\n\010src_posx\030\002 \001(\r"
    "\022\020\n\010src_posy\030\003 \001(\r\022\023\n\013src_mapname\030\004 \001(\t\""
    "\306\001\n\021BiGuanXiuXianData\022<\n\004type\030\001 \001(\0162\026.en"
    "umBiGuanXiuXianType:\026enumBiGuanXiuXian_N"
    "one\022\020\n\010expeffic\030\002 \001(\r\022\021\n\tstarttime\030\003 \001(\r"
    "\022\020\n\010storeexp\030\004 \001(\004\022\016\n\006silver\030\005 \001(\r\022\014\n\004go"
    "ld\030\006 \001(\r\022\r\n\005level\030\007 \001(\r\022\017\n\007alltime\030\010 \001(\r"
    "\"\305\001\n\nObjectDrop\0229\n\004type\030\001 \001(\0162\023.enumObje"
    "ctDropType:\026enumObjectDropType_Set\022\021\n\tco"
    "untryid\030\002 \001(\r\022\020\n\010objectid\030\003 \001(\r\022\013\n\003num\030\004"
    " \001(\r\022\016\n\006period\030\005 \001(\r\022\021\n\tstarttime\030\006 \001(\r\022"
    "\017\n\007endtime\030\007 \001(\r\022\026\n\016next_resettime\030\010 \001(\r"
    "\"-\n\016ObjectDropSave\022\033\n\006object\030\001 \003(\0132\013.Obj"
    "ectDrop\" \n\016CopyUserMember\022\016\n\006charid\030\001 \001("
    "\r\"y\n\025DBCopySceneBinaryData\022 \n\007member1\030\001 "
    "\003(\0132\017.CopyUserMember\022 \n\007member2\030\002 \003(\0132\017."
    "CopyUserMember\022\014\n\004cost\030\003 \001(\r\022\016\n\006septid\030\r"
    " \001(\r\"\262\001\n\016HorseExtraData\022\017\n\007horseid\030\001 \001(\r"
    "\022\r\n\005level\030\002 \001(\r\022\013\n\003exp\030\003 \001(\r\022\r\n\005speed\030\004 "
    "\001(\r\022\021\n\tsmiterate\030\005 \001(\r\022\014\n\004luck\030\006 \001(\r\022\017\n\007"
    "skillid\030\007 \003(\r\022\016\n\006baseid\030\010 \001(\r\022\016\n\006thisid\030"
    "\t \001(\r\022\022\n\nskilllevel\030\n \003(\r\"\201\001\n\020CharacterM"
    "apShow\022\014\n\004face\030\001 \001(\r\022\021\n\thairstyle\030\002 \001(\r\022"
    "\021\n\thaircolor\030\003 \001(\r\022\016\n\006weapon\030\004 \001(\r\022\014\n\004co"
    "at\030\005 \001(\r\022\r\n\005horse\030\006 \001(\r\022\014\n\004wing\030\007 \001(\r\"L\n"
    "\tStateData\022\017\n\007stateid\030\001 \001(\004\022\014\n\004time\030\002 \001("
    "\005\022\r\n\005level\030\003 \001(\005\022\021\n\tlinkpoint\030\004 \001(\r\"\365\005\n\020"
    "CharacterMapData\022\"\n\007mapShow\030\001 \001(\0132\021.Char"
    "acterMapShow\022\n\n\002id\030\002 \001(\r\022\017\n\007country\030\003 \001("
    "\r\022\023\n\013septOfficer\030\004 \001(\r\022\r\n\005level\030\006 \001(\r\022\t\n"
    "\001x\030\007 \001(\r\022\t\n\001y\030\010 \001(\r\022\t\n\001z\030& \001(\r\022\013\n\003dir\030\t "
    "\001(\r\022\021\n\tmoveSpeed\030\n \001(\r\022\021\n\tevilvalue\030\013 \001("
    "\r\022\022\n\nquestState\030\014 \001(\r\022\020\n\010shopName\030\r \001(\t\022"
    "\021\n\tshopState\030\016 \001(\r\022\025\n\rshopNameColor\030\017 \001("
    "\r\022\035\n\tninestate\030\020 \003(\0132\n.StateData\022\014\n\004name"
    "\030\021 \001(\t\022\020\n\010septname\030\022 \001(\t\022\r\n\005title\030\024 \001(\t\022"
    "\020\n\010teamName\030\025 \001(\t\022\022\n\nworldLevel\030\026 \001(\r\022\016\n"
    "\006gohome\030\027 \001(\r\022\026\n\016chariot_tempid\030\030 \001(\r\022\032\n"
    "\022chariot_mastertype\030\031 \001(\r\0224\n\nprofession\030"
    "\032 \001(\0162\017.ProfessionType:\017Profession_None\022"
    "\033\n\014is_gold_shop\030\033 \001(\010:\005false\022\n\n\002hp\030\034 \001(\r"
    "\022\r\n\005maxhp\030\035 \001(\r\022\016\n\006pkcamp\030\036 \001(\r\022\025\n\rcityw"
    "arwinner\030\037 \001(\010\022\020\n\010duelmode\030  \001(\r\022\024\n\014cast"
    "le_level\030! \001(\r\022\016\n\006wingid\030\" \001(\r\022\021\n\twingle"
    "vel\030# \001(\r\022\027\n\017wingstrenglevel\030$ \001(\r\022\025\n\rsu"
    "bprofession\030% \001(\r\022\020\n\010newtitle\030\' \001(\r\"\366\005\n\021"
    "CharacterMainData\022\"\n\007mapData\030\001 \001(\0132\021.Cha"
    "racterMapData\022\n\n\002mp\030\004 \001(\r\022\r\n\005maxmp\030\005 \001(\r"
    "\022\013\n\003exp\030\006 \001(\004\022\020\n\010strength\030\007 \001(\r\022\021\n\tdexte"
    "rity\030\010 \001(\r\022\021\n\tmentality\030\t \001(\r\022\024\n\014constit"
    "ution\030\n \001(\r\022\021\n\tattrpoint\030\014 \001(\r\022\023\n\013attack"
    "Speed\030\r \001(\r\022\022\n\nminPhysics\030\016 \001(\r\022\022\n\nmaxPh"
    "ysics\030\017 \001(\r\022\020\n\010minMagic\030\020 \001(\r\022\020\n\010maxMagi"
    "c\030\021 \001(\r\022\020\n\010pDefence\030\022 \001(\r\022\020\n\010mDefence\030\023 "
    "\001(\r\022\r\n\005money\030\024 \001(\r\022\021\n\tbindMoney\030\025 \001(\r\022\014\n"
    "\004gold\030\026 \001(\r\022\020\n\010bindGold\030\027 \001(\r\022\021\n\tluckyRa"
    "te\030\030 \001(\r\022\025\n\rantiLuckyRate\030\031 \001(\r\022\021\n\theavy"
    "Rate\030\032 \001(\r\022\025\n\rantiHeavyRate\030\033 \001(\r\022\r\n\005hon"
    "or\030\034 \001(\r\022\021\n\tfuncvalue\030\036 \001(\r\022\021\n\tseptaward"
    "\030\037 \001(\r\022\022\n\nseptactive\030  \001(\r\022\023\n\013friendvalu"
    "e\030! \001(\r\022\025\n\rsubprofession\030\" \001(\r\022\017\n\007horsei"
    "d\030# \001(\r\022\020\n\010totalexp\030$ \001(\004\022\021\n\tzonelimit\030%"
    " \001(\010\022\023\n\013countryzone\030& \001(\010\022\020\n\010resource\030\' "
    "\003(\004\022\020\n\010petskill\030( \001(\r\022\021\n\tautofight\030) \001(\010"
    "\022\"\n\tpropertys\030d \001(\0132\017.PropertyValues\"\275\003\n"
    "\nNpcMapData\022\n\n\002id\030\001 \001(\r\022\r\n\005tmpid\030\002 \001(\r\022\n"
    "\n\002hp\030\003 \001(\r\022\t\n\001x\030\004 \001(\r\022\t\n\001y\030\005 \001(\r\022\r\n\005spee"
    "d\030\006 \001(\r\022\013\n\003dir\030\007 \001(\r\022\r\n\005level\030\010 \001(\r\022\r\n\005v"
    "isit\030\t \001(\r\022\021\n\tcountryId\030\n \001(\r\022\016\n\006teamid\030"
    "\013 \001(\r\022\016\n\006septid\030\014 \001(\r\022\017\n\007unionid\030\r \001(\r\022\023"
    "\n\013master_type\030\016 \001(\r\022\020\n\010masterid\030\017 \001(\r\022\022\n"
    "\nmastername\030\020 \001(\t\022\014\n\004name\030\021 \001(\t\022\022\n\nskill"
    "count\030\022 \001(\r\022\014\n\004sign\030\023 \003(\r\022\035\n\tninestate\030\024"
    " \003(\0132\n.StateData\022\025\n\rattacked_type\030\025 \001(\r\022"
    "\r\n\005maxhp\030\026 \001(\r\022\016\n\006pkcamp\030\027 \001(\r\022\017\n\007desnam"
    "e\030\030 \001(\t\022\023\n\004into\030\031 \001(\010:\005false\022\016\n\006killer\030\032"
    " \001(\r\"\204\001\n\017NpcDeathMapData\022\n\n\002id\030\001 \001(\r\022\r\n\005"
    "tmpid\030\002 \001(\r\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\022\013\n\003dir"
    "\030\005 \001(\r\022\025\n\rdisappearTime\030\006 \001(\r\022\014\n\004name\030\007 "
    "\001(\t\022\016\n\006killer\030\010 \001(\r\"2\n\023EquipChangeMateri"
    "al\022\016\n\006thisid\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\255\001\n\013AddM"
    "axCount\022!\n\005count\030\001 \003(\0132\022.AddMaxCount.Cou"
    "nt\032{\n\005Count\022)\n\004type\030\001 \001(\0162\014.CounterType:"
    "\rCOUNTERT_NONE\022\n\n\002id\030\002 \001(\r\022)\n\005cycle\030\003 \001("
    "\0162\n.TimeCycle:\016TimeCycle_None\022\020\n\010addcoun"
    "t\030\004 \001(\r\"z\n\016BossReliveInfo\022\014\n\004name\030\001 \001(\t\022"
    "\021\n\thppercent\030\002 \001(\r\022\014\n\004time\030\003 \001(\t\022\013\n\003map\030"
    "\004 \001(\t\022\r\n\005level\030\005 \001(\r\022\017\n\007country\030\006 \001(\r\022\014\n"
    "\004desc\030\007 \001(\t\"2\n\016ChangeZoneInfo\022\021\n\tnewzone"
    "id\030\001 \001(\r\022\r\n\005token\030\004 \001(\r\"T\n\tUserScore\022$\n\004"
    "type\030\001 \001(\0162\n.ScoreType:\nScore_None\022\r\n\005sc"
    "ore\030\002 \001(\r\022\022\n\ntotalscore\030\003 \001(\r\"G\n\016OneYaoQ"
    "ianItem\022\016\n\006buynum\030\001 \001(\r\022\020\n\010buylevel\030\002 \001("
    "\r\022\023\n\013returnlevel\030\003 \003(\r\"\200\001\n\017YaoQianSaveDa"
    "ta\022\017\n\007havebuy\030\001 \001(\r\022\022\n\nreturngold\030\002 \001(\r\022"
    "\026\n\016returnbindgold\030\003 \001(\r\022\036\n\005items\030\004 \003(\0132\017"
    ".OneYaoQianItem\022\020\n\005stage\030\005 \001(\r:\0011\":\n\017Dun"
    "geonSaveData\022\n\n\002id\030\001 \001(\r\022\r\n\005times\030\002 \001(\r\022"
    "\014\n\004time\030\003 \001(\r\"3\n\007VarInfo\022\013\n\003key\030\001 \001(\t\022\r\n"
    "\005value\030\002 \001(\t\022\014\n\004type\030\003 \001(\r\"\225\001\n\tBuildInfo"
    "\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\r\n\005state\030\003 \001"
    "(\r\022\027\n\017lastcollecttime\030\004 \001(\r\022\023\n\013upgradeti"
    "me\030\005 \001(\r\022\027\n\017outputitemtimes\030\006 \001(\r\022\027\n\017las"
    "tgetitemtime\030\007 \001(\r\"_\n\rMakeEquipInfo\022\013\n\003i"
    "id\030\001 \001(\004\022\017\n\007equipid\030\002 \001(\r\022\017\n\007quality\030\003 \001"
    "(\r\022\020\n\010maketime\030\004 \001(\r\022\r\n\005state\030\005 \001(\r\"_\n\021C"
    "astleExploreInfo\022\n\n\002id\030\001 \001(\r\022\r\n\005state\030\002 "
    "\001(\r\022\022\n\nfinishtime\030\003 \001(\r\022\r\n\005issuc\030\004 \001(\010\022\014"
    "\n\004pets\030\005 \003(\004\"x\n\014BinaryCastle\022\r\n\005level\030\001 "
    "\001(\r\022\014\n\004dist\030\002 \003(\r\022\030\n\004info\030\003 \003(\0132\n.BuildI"
    "nfo\022\014\n\004open\030\004 \001(\r\022#\n\007expinfo\030\005 \003(\0132\022.Cas"
    "tleExploreInfo\"/\n\017BinaryMakeEquip\022\034\n\004inf"
    "o\030\001 \003(\0132\016.MakeEquipInfo\"\313\002\n\rCastlePetInf"
    "o\022\013\n\003iid\030\001 \001(\004\022\n\n\002id\030\002 \001(\r\022\021\n\tbaseskill\030"
    "\003 \001(\r\022\023\n\013randomskill\030\004 \003(\r\022\r\n\005level\030\005 \001("
    "\r\022\013\n\003exp\030\006 \001(\004\022\r\n\005stars\030\007 \001(\r\022\r\n\005souls\030\010"
    " \001(\r\022\016\n\006phyatt\030\t \001(\r\022\016\n\006phydef\030\n \001(\r\022\016\n\006"
    "magatt\030\013 \001(\r\022\016\n\006magdef\030\014 \001(\r\022\n\n\002hp\030\r \001(\r"
    "\022\n\n\002mp\030\016 \001(\r\022\022\n\nexperttype\030\017 \001(\r\022\023\n\013work"
    "ability\030\020 \001(\r\022\r\n\005state\030\021 \001(\r\022\020\n\010allsouls"
    "\030\022 \001(\r\022\014\n\004name\030\023 \001(\t\022\017\n\007stateid\030\024 \001(\r\"-\n"
    "\rCastleWorkPet\022\013\n\003iid\030\001 \001(\004\022\017\n\007buildid\030\002"
    " \001(\r\"v\n\017BinaryCastlePet\022\034\n\004info\030\001 \003(\0132\016."
    "CastlePetInfo\022\020\n\010fightpet\030\002 \003(\004\022\037\n\007workp"
    "et\030\003 \003(\0132\016.CastleWorkPet\022\022\n\ncollection\030\004"
    " \003(\r\"=\n\016CastlePetState\022\013\n\003iid\030\001 \001(\004\022\r\n\005s"
    "tate\030\002 \001(\r\022\017\n\007stateid\030\003 \001(\r\"P\n\020CastleSta"
    "tueInfo\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\013\n\003ex"
    "p\030\003 \001(\r\022\024\n\006select\030\004 \001(\010:\004true\"T\n\022BinaryC"
    "astleStatue\022\037\n\004info\030\001 \003(\0132\021.CastleStatue"
    "Info\022\016\n\006select\030\002 \001(\r\022\r\n\005skill\030\003 \001(\r\"E\n\014R"
    "eplaceSkill\022\020\n\010srcskill\030\001 \001(\r\022\020\n\010desskil"
    "l\030\002 \001(\r\022\021\n\tstudysucc\030\003 \001(\r\"D\n\014RelicUserP"
    "os\022\016\n\006userid\030\001 \001(\r\022\t\n\001x\030\002 \001(\r\022\t\n\001y\030\003 \001(\r"
    "\022\016\n\006septid\030\004 \001(\r\":\n\014RiskTaskInfo\022\014\n\004task"
    "\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\r\n\005state\030\003 \001(\r\"L\n\022"
    "BinaryRiskTaskInfo\022\014\n\004time\030\001 \001(\r\022\033\n\004info"
    "\030\002 \003(\0132\r.RiskTaskInfo\022\013\n\003num\030\003 \001(\r\"9\n\rLi"
    "feSkillInfo\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\r"
    "\n\005stage\030\003 \001(\r\"/\n\017BinaryLifeSkill\022\034\n\004info"
    "\030\001 \003(\0132\016.LifeSkillInfo\"\222\001\n\014DayGuideInfo\022"
    "\n\n\002id\030\001 \001(\r\022\023\n\013targettimes\030\002 \001(\r\022\020\n\010curt"
    "imes\030\003 \001(\r\022\r\n\005para1\030\004 \001(\r\022\r\n\005para2\030\005 \001(\r"
    "\022\r\n\005para3\030\006 \001(\r\022\023\n\013acceptbonus\030\007 \001(\010\022\r\n\005"
    "level\030\010 \001(\r\"%\n\tTitleData\022\n\n\002id\030\001 \001(\r\022\014\n\004"
    "time\030\002 \001(\r\"P\n\rMonthCardData\022\n\n\002id\030\001 \001(\r\022"
    "\017\n\007buytime\030\002 \001(\r\022\022\n\nobtaintime\030\003 \001(\r\022\016\n\006"
    "status\030\004 \001(\r\"\277\002\n\016WingSystemData\022\r\n\005level"
    "\030\001 \001(\r\022\021\n\tattphymin\030\002 \001(\r\022\021\n\tattphymax\030\003"
    " \001(\r\022\016\n\006phydef\030\004 \001(\r\022\016\n\006magdef\030\005 \001(\r\022\n\n\002"
    "hp\030\006 \001(\r\022\n\n\002mp\030\007 \001(\r\022\027\n\017enhancemaxtimes\030"
    "\010 \001(\r\022\027\n\017enhancemintimes\030\t \001(\r\022\025\n\rreleas"
    "eskills\030\n \003(\r\022\020\n\010fighting\030\013 \001(\r\022\016\n\006curex"
    "p\030\014 \001(\004\022\016\n\006maxexp\030\r \001(\004\022\021\n\tattmagmin\030\016 \001"
    "(\r\022\021\n\tattmagmax\030\017 \001(\r\022\021\n\tlefttimes\030\020 \001(\r"
    "\022\014\n\004open\030\021 \001(\010\"*\n\014StatHurtData\022\014\n\004hurt\030\001"
    " \001(\r\022\014\n\004name\030\002 \001(\t\"%\n\tTitleInfo\022\n\n\002id\030\001 "
    "\001(\r\022\014\n\004time\030\002 \001(\r\"\?\n\010ItemInfo\022\n\n\002id\030\001 \001("
    "\r\022\013\n\003num\030\002 \001(\r\022\014\n\004bind\030\003 \001(\r\022\014\n\004kind\030\004 \001"
    "(\r\"U\n\rLimitShopData\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030"
    "\002 \001(\t\022\r\n\005price\030\003 \001(\r\022\033\n\010itemdata\030\004 \003(\0132\t"
    ".ItemInfo\"=\n\010FundData\022\016\n\006hasbuy\030\001 \003(\r\022!\n"
    "\tlevelfund\030\002 \003(\0132\016.PairDataDWORD\"<\n\rTota"
    "lReSpData\022\013\n\003num\030\001 \001(\r\022\020\n\010totalget\030\002 \003(\r"
    "\022\014\n\004days\030\003 \001(\r\"\255\001\n\021RechargeSpendData\022\021\n\t"
    "reacttime\030\001 \001(\r\022\022\n\nredaybonus\030\002 \003(\r\022$\n\014r"
    "etotalbonus\030\003 \003(\0132\016.TotalReSpData\022\021\n\tspa"
    "cttime\030\004 \001(\r\022\022\n\nspdaybonus\030\005 \003(\r\022$\n\014spto"
    "talbonus\030\006 \003(\0132\016.TotalReSpData\"w\n\016Declar"
    "eWarData\022\016\n\006septid\030\001 \001(\r\022\020\n\010septname\030\002 \001"
    "(\t\022\020\n\010lefttime\030\003 \001(\r\022\016\n\006leftcd\030\004 \001(\r\022\022\n\n"
    "leadername\030\005 \001(\t\022\r\n\005count\030\006 \001(\r\"(\n\nPropV"
    "alues\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\".\n\016FPa"
    "irDataDWORD\022\r\n\005para1\030\001 \001(\r\022\r\n\005para2\030\002 \001("
    "\r\",\n\016FPairDataStrDW\022\013\n\003str\030\001 \001(\t\022\r\n\005valu"
    "e\030\002 \001(\r\"\?\n\020FTripleDataDWORD\022\r\n\005para1\030\001 \001"
    "(\r\022\r\n\005para2\030\002 \001(\r\022\r\n\005para3\030\003 \001(\r\"a\n\rStpO"
    "bjectNode\022\020\n\010gridType\030\001 \001(\r\022\016\n\006tempid\030\002 "
    "\001(\r\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\022\013\n\003num\030\005 \001(\r\022\013"
    "\n\003del\030\006 \001(\010\"j\n\017FMsgNpcFunction\022\016\n\006funcid"
    "\030\001 \001(\r\022\020\n\010funcname\030\002 \001(\t\022\021\n\tfuncevent\030\003 "
    "\001(\t\022\020\n\010funcicon\030\004 \001(\t\022\020\n\010funcopen\030\005 \001(\010\""
    "6\n\013FNpcDlgPara\022\013\n\003tag\030\001 \001(\t\022\032\n\005value\030\002 \003"
    "(\0132\013.FValueCell\"0\n\nFValueCell\022\020\n\010intvalu"
    "e\030\001 \001(\r\022\020\n\010strvalue\030\002 \001(\t\"\201\001\n\017FPropertyV"
    "alues\022&\n\005value\030\001 \003(\0132\027.FPropertyValues.F"
    "Value\032F\n\006FValue\022-\n\003key\030\001 \001(\0162\017.FPropValu"
    "eType:\017FValueType_none\022\r\n\005value\030\002 \003(\r\"\277\003"
    "\n\013FNpcMapData\022\n\n\002id\030\001 \001(\r\022\r\n\005tmpid\030\002 \001(\r"
    "\022\n\n\002hp\030\003 \001(\r\022\t\n\001x\030\004 \001(\r\022\t\n\001y\030\005 \001(\r\022\r\n\005sp"
    "eed\030\006 \001(\r\022\013\n\003dir\030\007 \001(\r\022\r\n\005level\030\010 \001(\r\022\r\n"
    "\005visit\030\t \001(\r\022\021\n\tcountryId\030\n \001(\r\022\016\n\006teami"
    "d\030\013 \001(\r\022\016\n\006septid\030\014 \001(\r\022\017\n\007unionid\030\r \001(\r"
    "\022\023\n\013master_type\030\016 \001(\r\022\020\n\010masterid\030\017 \001(\r\022"
    "\022\n\nmastername\030\020 \001(\t\022\014\n\004name\030\021 \001(\t\022\022\n\nski"
    "llcount\030\022 \001(\r\022\014\n\004sign\030\023 \003(\r\022\036\n\tninestate"
    "\030\024 \003(\0132\013.FStateData\022\025\n\rattacked_type\030\025 \001"
    "(\r\022\r\n\005maxhp\030\026 \001(\r\022\016\n\006pkcamp\030\027 \001(\r\022\017\n\007des"
    "name\030\030 \001(\t\022\023\n\004into\030\031 \001(\010:\005false\022\016\n\006kille"
    "r\030\032 \001(\r\"M\n\nFStateData\022\017\n\007stateid\030\001 \001(\004\022\014"
    "\n\004time\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\021\n\tlinkpoint"
    "\030\004 \001(\r\"\202\001\n\021FCharacterMapShow\022\014\n\004face\030\001 \001"
    "(\r\022\021\n\thairstyle\030\002 \001(\r\022\021\n\thaircolor\030\003 \001(\r"
    "\022\016\n\006weapon\030\004 \001(\r\022\014\n\004coat\030\005 \001(\r\022\r\n\005horse\030"
    "\006 \001(\r\022\014\n\004wing\030\007 \001(\r\"\372\005\n\021FCharacterMapDat"
    "a\022#\n\007mapShow\030\001 \001(\0132\022.FCharacterMapShow\022\n"
    "\n\002id\030\002 \001(\r\022\017\n\007country\030\003 \001(\r\022\023\n\013septOffic"
    "er\030\004 \001(\r\022\r\n\005level\030\006 \001(\r\022\t\n\001x\030\007 \001(\r\022\t\n\001y\030"
    "\010 \001(\r\022\t\n\001z\030& \001(\r\022\013\n\003dir\030\t \001(\r\022\021\n\tmoveSpe"
    "ed\030\n \001(\r\022\021\n\tevilvalue\030\013 \001(\r\022\022\n\nquestStat"
    "e\030\014 \001(\r\022\020\n\010shopName\030\r \001(\t\022\021\n\tshopState\030\016"
    " \001(\r\022\025\n\rshopNameColor\030\017 \001(\r\022\036\n\tninestate"
    "\030\020 \003(\0132\013.FStateData\022\014\n\004name\030\021 \001(\t\022\020\n\010sep"
    "tname\030\022 \001(\t\022\r\n\005title\030\024 \001(\t\022\020\n\010teamName\030\025"
    " \001(\t\022\022\n\nworldLevel\030\026 \001(\r\022\016\n\006gohome\030\027 \001(\r"
    "\022\026\n\016chariot_tempid\030\030 \001(\r\022\032\n\022chariot_mast"
    "ertype\030\031 \001(\r\0226\n\nprofession\030\032 \001(\0162\020.FProf"
    "essionType:\020FProfession_None\022\033\n\014is_gold_"
    "shop\030\033 \001(\010:\005false\022\n\n\002hp\030\034 \001(\r\022\r\n\005maxhp\030\035"
    " \001(\r\022\016\n\006pkcamp\030\036 \001(\r\022\025\n\rcitywarwinner\030\037 "
    "\001(\010\022\020\n\010duelmode\030  \001(\r\022\024\n\014castle_level\030! "
    "\001(\r\022\016\n\006wingid\030\" \001(\r\022\021\n\twinglevel\030# \001(\r\022\027"
    "\n\017wingstrenglevel\030$ \001(\r\022\025\n\rsubprofession"
    "\030% \001(\r\022\020\n\010newtitle\030\' \001(\r\"\205\001\n\020FNpcDeathMa"
    "pData\022\n\n\002id\030\001 \001(\r\022\r\n\005tmpid\030\002 \001(\r\022\t\n\001x\030\003 "
    "\001(\r\022\t\n\001y\030\004 \001(\r\022\013\n\003dir\030\005 \001(\r\022\025\n\rdisappear"
    "Time\030\006 \001(\r\022\014\n\004name\030\007 \001(\t\022\016\n\006killer\030\010 \001(\r"
    "\"\371\005\n\022FCharacterMainData\022#\n\007mapData\030\001 \001(\013"
    "2\022.FCharacterMapData\022\n\n\002mp\030\004 \001(\r\022\r\n\005maxm"
    "p\030\005 \001(\r\022\013\n\003exp\030\006 \001(\004\022\020\n\010strength\030\007 \001(\r\022\021"
    "\n\tdexterity\030\010 \001(\r\022\021\n\tmentality\030\t \001(\r\022\024\n\014"
    "constitution\030\n \001(\r\022\021\n\tattrpoint\030\014 \001(\r\022\023\n"
    "\013attackSpeed\030\r \001(\r\022\022\n\nminPhysics\030\016 \001(\r\022\022"
    "\n\nmaxPhysics\030\017 \001(\r\022\020\n\010minMagic\030\020 \001(\r\022\020\n\010"
    "maxMagic\030\021 \001(\r\022\020\n\010pDefence\030\022 \001(\r\022\020\n\010mDef"
    "ence\030\023 \001(\r\022\r\n\005money\030\024 \001(\r\022\021\n\tbindMoney\030\025"
    " \001(\r\022\014\n\004gold\030\026 \001(\r\022\020\n\010bindGold\030\027 \001(\r\022\021\n\t"
    "luckyRate\030\030 \001(\r\022\025\n\rantiLuckyRate\030\031 \001(\r\022\021"
    "\n\theavyRate\030\032 \001(\r\022\025\n\rantiHeavyRate\030\033 \001(\r"
    "\022\r\n\005honor\030\034 \001(\r\022\021\n\tfuncvalue\030\036 \001(\r\022\021\n\tse"
    "ptaward\030\037 \001(\r\022\022\n\nseptactive\030  \001(\r\022\023\n\013fri"
    "endvalue\030! \001(\r\022\025\n\rsubprofession\030\" \001(\r\022\017\n"
    "\007horseid\030# \001(\r\022\020\n\010totalexp\030$ \001(\004\022\021\n\tzone"
    "limit\030% \001(\010\022\023\n\013countryzone\030& \001(\010\022\020\n\010reso"
    "urce\030\' \003(\004\022\020\n\010petskill\030( \001(\r\022\021\n\tautofigh"
    "t\030) \001(\010\022#\n\tpropertys\030d \001(\0132\020.FPropertyVa"
    "lues*\302\004\n\013CountryType\022\030\n\024QuestCountryType"
    "_All\020\000\022\"\n\036QuestCountryType_MotherCountry"
    "\020\001\022!\n\035QuestCountryType_UnionCountry\020\002\022!\n"
    "\035QuestCountryType_EnemyCountry\020\003\022\033\n\027Ques"
    "tCountryType_Middle\020\004\022 \n\034QuestCountryTyp"
    "e_CountryNone\020\n\022\035\n\031QuestCountryType_Coun"
    "try1\020\013\022\035\n\031QuestCountryType_Country2\020\014\022\035\n"
    "\031QuestCountryType_Country3\020\r\022\035\n\031QuestCou"
    "ntryType_Country4\020\016\022\035\n\031QuestCountryType_"
    "Country5\020\017\022\035\n\031QuestCountryType_Country6\020"
    "\020\022\035\n\031QuestCountryType_Country7\020\021\022\035\n\031Ques"
    "tCountryType_Country8\020\022\022\035\n\031QuestCountryT"
    "ype_Country9\020\023\022\036\n\032QuestCountryType_Count"
    "ry10\020\024\022\037\n\033QuestCountryType_CountryMax\020\025\022"
    "\030\n\024QuestCountryType_Max\020\036*\307\001\n\016QuestState"
    "Type\022\023\n\017QUESTSTATE_NONE\020\000\022\031\n\025QUESTSTATE_"
    "ACCEPTABLE\020\001\022\024\n\020QUESTSTATE_DOING\020\002\022\023\n\017QU"
    "ESTSTATE_FAIL\020\003\022\026\n\022QUESTSTATE_CANGIVE\020\004\022"
    "\027\n\023QUESTSTATE_COMPLETE\020\005\022\023\n\017QUESTSTATE_A"
    "BAN\020\006\022\024\n\020QUESTSTATE_ERROR\020\007*z\n\030enumQuest"
    "DoubleTimeLimit\022\021\n\renumQDTL_None\020\000\022\035\n\031en"
    "umQDTL_CountryDoubleExp\020\001\022\032\n\026enumQDTL_Ga"
    "ngDoubleExp\020\002\022\020\n\014enumQDTL_Max\020\003*\204\001\n\tTime"
    "Cycle\022\022\n\016TimeCycle_None\020\000\022\023\n\017TimeCycle_D"
    "aily\020\001\022\022\n\016TimeCycle_Week\020\002\022\023\n\017TimeCycle_"
    "Month\020\003\022\022\n\016TimeCycle_Year\020\004\022\021\n\rTimeCycle"
    "_Max\020\005*\230\001\n\010CostType\022\021\n\rCostType_None\020\000\022\022"
    "\n\016CostType_Money\020\001\022\034\n\030CostType_Money_Bin"
    "dMoney\020\002\022\025\n\021CostType_BindGold\020\003\022\021\n\rCostT"
    "ype_Gold\020\004\022\035\n\031CostType_FirstBindOrMoney\020"
    "\005*\220\003\n\017PlayerTitleType\022\022\n\016TitleType_None\020"
    "\000\022\021\n\rStepTitle_YBY\020\001\022\024\n\020StepTitle_MASTER"
    "\020\002\022\024\n\020StepTitle_DEPUTY\020\003\022\021\n\rStepTitle_ZH"
    "F\020\004\022\021\n\rStepTitle_YHF\020\005\022\021\n\rStepTitle_XFY\020"
    "\006\022\021\n\rStepTitle_BQY\020\007\022\021\n\rStepTitle_FHY\020\010\022"
    "\021\n\rStepTitle_Max\020\017\022\030\n\024MoveBrickTitle_Fir"
    "st\020\020\022\031\n\025MoveBrickTitle_Second\020\021\022\030\n\024MoveB"
    "rickTitle_Third\020\022\022\026\n\022MoveBrickTitle_Max\020"
    "\031\022\023\n\017ExamTitle_First\020\032\022\024\n\020ExamTitle_Seco"
    "nd\020\033\022\023\n\017ExamTitle_Third\020\034\022\021\n\rExamTitle_M"
    "ax\020\036*\374\001\n\022CountryOfficerType\022\027\n\023CountryOf"
    "ficer_None\020\000\022\027\n\023CountryOfficer_King\020\001\022\031\n"
    "\025CountryOfficer_ChengX\020\002\022\027\n\023CountryOffic"
    "er_TaiW\020\003\022\030\n\024CountryOfficer_YuSDF\020\004\022\030\n\024C"
    "ountryOfficer_TingW\020\005\022\031\n\025CountryOfficer_"
    "LangZL\020\006\022\031\n\025CountryOfficer_ZhongW\020\007\022\026\n\022C"
    "ountryOfficer_Max\020\010*\224\001\n\016ProfessionType\022\023"
    "\n\017Profession_None\020\000\022\026\n\022Profession_Fighte"
    "r\020\001\022\023\n\017Profession_Mage\020\002\022\025\n\021Profession_D"
    "octor\020\003\022\025\n\021Profession_Archer\020\004\022\022\n\016Profes"
    "sion_Max\020\005*\327\001\n\rPropGroupType\022\022\n\016PropGrou"
    "p_None\020\000\022\022\n\016PropGroup_Base\020\001\022\017\n\013PropGrou"
    "p_2\020\002\022\017\n\013PropGroup_3\020\003\022\017\n\013PropGroup_4\020\004\022"
    "\017\n\013PropGroup_5\020\005\022\017\n\013PropGroup_6\020\006\022\017\n\013Pro"
    "pGroup_7\020\007\022\017\n\013PropGroup_8\020\010\022\023\n\017PropGroup"
    "_Skill\020\013\022\022\n\016PropGroup_Star\020\014*\361\014\n\rPropVal"
    "ueType\022\022\n\016ValueType_none\020\000\022\023\n\017ValueType_"
    "maxhp\020\001\022\023\n\017ValueType_maxmp\020\002\022\030\n\024ValueTyp"
    "e_minpdamage\020\003\022\030\n\024ValueType_maxpdamage\020\004"
    "\022\030\n\024ValueType_minmdamage\020\005\022\030\n\024ValueType_"
    "maxmdamage\020\006\022\026\n\022ValueType_pdefence\020\007\022\026\n\022"
    "ValueType_mdefence\020\010\022\024\n\020ValueType_maxhpr"
    "\020\t\022\024\n\020ValueType_maxmpr\020\n\022\031\n\025ValueType_mi"
    "npdamager\020\013\022\031\n\025ValueType_maxpdamager\020\014\022\031"
    "\n\025ValueType_minmdamager\020\r\022\031\n\025ValueType_m"
    "axmdamager\020\016\022\027\n\023ValueType_pdefencer\020\017\022\027\n"
    "\023ValueType_mdefencer\020\020\022\024\n\020ValueType_dama"
    "ge\020\021\022\025\n\021ValueType_defence\020\022\022\025\n\021ValueType"
    "_allattr\020\023\022\026\n\022ValueType_strength\020\024\022\027\n\023Va"
    "lueType_dexterity\020\025\022\027\n\023ValueType_mentali"
    "ty\020\026\022\032\n\026ValueType_constitution\020\027\022\025\n\021Valu"
    "eType_mvspeed\020\037\022\026\n\022ValueType_luckRate\020 \022"
    "\025\n\021ValueType_hitRate\020!\022\026\n\022ValueType_miss"
    "Rate\020\"\022\027\n\023ValueType_smiteRate\020#\022\031\n\025Value"
    "Type_reSmiteRate\020$\022\026\n\022ValueType_beatRate"
    "\020%\022\030\n\024ValueType_reBeatRate\020&\022\026\n\022ValueTyp"
    "e_smiteAdd\020\'\022\032\n\026ValueType_fixedHurtAdd\020("
    "\022\032\n\026ValueType_fixedHurtSub\020)\022\026\n\022ValueTyp"
    "e_pdamagep\0203\022\026\n\022ValueType_mdamagep\0204\022\027\n\023"
    "ValueType_pdefencep\0205\022\027\n\023ValueType_mdefe"
    "ncep\0206\022\026\n\022ValueType_attlevel\020=\022\026\n\022ValueT"
    "ype_deflevel\020>\022\025\n\021ValueType_hplevel\020\?\022\033\n"
    "\027ValueType_paralysisRate\020G\022\035\n\031ValueType_"
    "reParalysisRate\020H\022\026\n\022ValueType_coldRate\020"
    "I\022\030\n\024ValueType_reColdRate\020J\022\027\n\023ValueType"
    "_reAllRate\020K\022\031\n\025ValueType_neglectRate\020L\022"
    "\027\n\023ValueType_damageInc\020M\022\026\n\022ValueType_hp"
    "sucker\020N\022\026\n\022ValueType_mpsucker\020O\022\032\n\026Valu"
    "eType_hpsuckerRate\020P\022\032\n\026ValueType_mpsuck"
    "erRate\020Q\022\023\n\017ValueType_addHp\020R\022\023\n\017ValueTy"
    "pe_addMp\020S\022\025\n\021ValueType_reflect\020T\022\024\n\020Val"
    "ueType_shield\020U\022\024\n\020ValueType_resist\020V\022\027\n"
    "\023ValueType_butterfly\020W\022\033\n\027ValueType_reNe"
    "glectRate\020X\022\033\n\027ValueType_moneyLostRate\020Z"
    "\022\033\n\027ValueType_equipLostRate\020[\022\027\n\023ValueTy"
    "pe_phyresist\020\\\022\027\n\023ValueType_magresist\020]\022"
    "\023\n\017ValueType_skill\020e\022\022\n\016ValueType_star\020f"
    "*z\n\017ElementAttrType\022\030\n\024ElementAttrType_s"
    "oil\020\000\022\030\n\024ElementAttrType_wind\020\001\022\031\n\025Eleme"
    "ntAttrType_water\020\002\022\030\n\024ElementAttrType_fi"
    "re\020\003*\261\001\n\007CHANNEL\022\020\n\014CHANNEL_SOFT\020\000\022\020\n\014CH"
    "ANNEL_TEAM\020\001\022\022\n\016CHANNEL_FRIEND\020\002\022\020\n\014CHAN"
    "NEL_SEPT\020\003\022\023\n\017CHANNEL_COUNTRY\020\004\022\021\n\rCHANN"
    "EL_WORLD\020\005\022\022\n\016CHANNEL_SECRET\020\006\022\017\n\013CHANNE"
    "L_BOX\020\007\022\017\n\013CHANNEL_SYS\020\010*\321\001\n\013CounterType"
    "\022\021\n\rCOUNTERT_NONE\020\000\022\026\n\022COUNTERT_COPYSCEN"
    "E\020\001\022\021\n\rCOUNTER_QUEST\020\002\022\034\n\030COUNTERT_SCRIP"
    "T_FUNCTION\020\003\022\025\n\021COUNTERT_FUNCTION\020\004\022\024\n\020C"
    "OUNTERT_GIFTBAG\020\005\022\031\n\025COUNTERT_ZoneActivi"
    "ty\020\006\022\036\n\032COUNTERT_VoteCountryOffice\020\007*\326\001\n"
    "\017CounterFuncType\022\033\n\027Count_Fun_Challenge_"
    "Win\020\001\022!\n\035Count_Fun_Challenge_SerialWin\020\002"
    "\022\022\n\016Count_Fun_Exam\020\003\022\024\n\020Count_Fun_MiGong"
    "\020\004\022\035\n\031Count_Fun_TalismanRefresh\020\005\022\037\n\033Cou"
    "nt_Fun_WingDiamondUpdate\020\006\022\031\n\025Count_Fun_"
    "TimeExpWeek\020\007*\226\002\n\010MusterID\022\033\n\027MusterID_C"
    "itywar_Master\020\001\022\032\n\026MusterID_Citywar_Appl"
    "y\020\002\022\026\n\022MusterID_MusterPos\020\003\022\036\n\032MusterID_"
    "Citywar_ApplyHelp\020\004\022\033\n\027MusterID_Countryw"
    "ar_Att\020\005\022\033\n\027MusterID_Countrywar_Def\020\006\022\034\n"
    "\030MusterID_CountryBuilding\020\013\022\035\n\031MusterID_"
    "SeptShiLianQuest\020\014\022\"\n\036MusterID_Gang_Coun"
    "tryDoubleExp\020\r*R\n\nMusterType\022\022\n\016Muster_C"
    "ountry\020\001\022\017\n\013Muster_Sept\020\002\022\017\n\013Muster_Team"
    "\020\003\022\016\n\nMuster_All\020\004*\352\001\n\023enumUserPresentTy"
    "pe\022\024\n\020enumPresent_None\020\000\022\030\n\024enumPresent_"
    "BillBack\020\001\022\027\n\023enumPresent_JiHuoMa\020\004\022 \n\034e"
    "numPresent_NewZoneLevelRace\020\005\022\030\n\024enumPre"
    "sent_SysOrder\020\006\022\032\n\026enumPresent_CBSPresen"
    "t\020\007\022\035\n\031enumPresent_AssumePresent\020\010\022\023\n\017en"
    "umPresent_Max\020\t*U\n\027septCartButtonAvailab"
    "le\022\034\n\030sept_cart_help_available\020\001\022\034\n\030sept"
    "_cart_back_available\020\002*M\n\030septCartHelpFu"
    "nctionType\022\030\n\024sept_cart_help_close\020\000\022\027\n\023"
    "sept_cart_help_show\020\001*E\n\024enumStockAuctio"
    "nType\022\026\n\022enumStock_SellGold\020\001\022\025\n\021enumSto"
    "ck_BuyGold\020\002*\370\002\n\021enumCopySceneType\022\026\n\022en"
    "umCopyScene_None\020\000\022\033\n\027enumCopyScene_Priv"
    "yBase\020\001\022\032\n\026enumCopyScene_Daily1v1\020\002\022\035\n\031e"
    "numCopyScene_TeamMonster\020\003\022\035\n\031enumCopySc"
    "ene_SeptShilian\020\004\022\031\n\025enumCopyScene_SeptM"
    "ap\020\005\022\033\n\027enumCopyScene_Challenge\020\006\022\036\n\032enu"
    "mCopyScene_MultiUngroup\020\007\022\026\n\022enumCopySce"
    "ne_Sept\020\010\022\031\n\025enumCopyScene_Dungeon\020\t\022\030\n\024"
    "enumCopyScene_Battle\020\n\022\030\n\024enumCopyScene_"
    "Hunger\020\013\022\025\n\021enumCopyScene_Max\020\014*g\n\renumS"
    "ceneType\022\024\n\020SceneType_Normal\020\000\022\026\n\022SceneT"
    "ype_Instance\020\001\022\025\n\021SceneType_Dynamic\020\002\022\021\n"
    "\rSceneType_MAX\020\003*\376\001\n\024enumSeptBuildingTyp"
    "e\022\035\n\031enumSeptBuildingType_None\020\000\022 \n\034enum"
    "SeptBuildingType_ZhongYi\020\001\022\037\n\033enumSeptBu"
    "ildingType_JingKu\020\002\022\037\n\033enumSeptBuildingT"
    "ype_WuGuan\020\003\022$\n enumSeptBuildingType_Lia"
    "nWuChang\020\004\022\037\n\033enumSeptBuildingType_FangW"
    "o\020\005\022\034\n\030enumSeptBuildingType_Max\020\006*3\n\022enu"
    "mMatchQueueType\022\035\n\031enumMatchQueue_SeptBa"
    "ttle\020\001*\201\001\n\021enumUserInfluence\022\032\n\026enumUser"
    "Influence_None\020\000\022\031\n\025enumUserInfluence_Re"
    "d\020\001\022\032\n\026enumUserInfluence_Blue\020\002\022\031\n\025enumU"
    "serInfluence_Max\020\003*\236\001\n\020enumCountryPower\022"
    "\031\n\025enumCountryPower_None\020\000\022\031\n\025enumCountr"
    "yPower_Weak\020\001\022\033\n\027enumCountryPower_Normal"
    "\020\002\022\035\n\031enumCountryPower_Strength\020\003\022\030\n\024enu"
    "mCountryPower_Max\020\004*\232\002\n\renumGlobalVar\022\035\n"
    "\031enumGlobalVar_StartServer\020\001\022#\n\037enumGlob"
    "alVar_DoubleAttenuation\020\002\022!\n\035enumGlobalV"
    "ar_ObjectDropLimit\020\003\022\036\n\032enumGlobalVar_Ho"
    "tBloodBaby\020\004\022 \n\034enumGlobalVar_FreshmanAd"
    "dExp\020\005\022!\n\035enumGlobalVar_CopySceneAddExp\020"
    "\006\022 \n\034enumGlobalVar_KillWorldTimes\020\007\022\033\n\027e"
    "numGlobalVar_AddExpAll\020\n*\251\001\n\025enumBiGuanX"
    "iuXianType\022\032\n\026enumBiGuanXiuXian_None\020\000\022\034"
    "\n\030enumBiGuanXiuXian_Common\020\001\022\034\n\030enumBiGu"
    "anXiuXian_15Rate\020\002\022\035\n\031enumBiGuanXiuXian_"
    "125Rate\020\003\022\031\n\025enumBiGuanXiuXian_Max\020\004*O\n\022"
    "enumObjectDropType\022\032\n\026enumObjectDropType"
    "_Set\020\001\022\035\n\031enumObjectDropType_NotSet\020\002*N\n"
    "\021CountryOfficeType\022\020\n\014Country_None\020\000\022\020\n\014"
    "Country_King\020\001\022\025\n\021Country_OfficeMax\020\002*\202\001"
    "\n\tScoreType\022\016\n\nScore_None\020\000\022\024\n\020Score_Cou"
    "ntrywar\020\001\022\023\n\017Score_GoldScore\020\002\022\030\n\024Score_"
    "SeptContribute\020\003\022\021\n\rScore_Citywar\020\004\022\r\n\tS"
    "core_Max\020\005*7\n\013SpeakerType\022\023\n\017Speaker_Cou"
    "ntry\020\001\022\023\n\017Speaker_AllZone\020\002*\213\001\n\021Spreader"
    "GoldState\022\025\n\021SpreaderGold_None\020\000\022\024\n\020Spre"
    "aderGold_Add\020\001\022\026\n\022SpreaderGold_GMAdd\020\002\022\026"
    "\n\022SpreaderGold_Gived\020\005\022\031\n\025SpreaderGold_C"
    "oldDwon\020\006*\243\002\n\rempLoginError\022\026\n\022empLoginE"
    "rror_None\020\000\022\033\n\027empLoginError_NoService\020\001"
    "\022\033\n\027empLoginError_NoGateway\020\002\022\034\n\030empLogi"
    "nError_VerifyFail\020\003\022#\n\037empLoginError_Cha"
    "rNameHaveSpace\020\004\022!\n\035empLoginError_CharNa"
    "meInvalid\020\005\022 \n\034empLoginError_CharNameRep"
    "eat\020\006\022\031\n\025empLoginError_IdInUse\020\007\022\035\n\031empL"
    "oginError_LengthError\020\010*O\n\013empTipsType\022\024"
    "\n\020empTipsType_Tips\020\000\022\026\n\022empTipsType_MsgB"
    "ox\020\001\022\022\n\016empTipsType_Gm\020\002*\270\001\n\025empMagicAtt"
    "ackRetType\022\036\n\032empMagicAttackRetType_None"
    "\020\000\022\036\n\032empMagicAttackRetType_Fail\020\001\022\036\n\032em"
    "pMagicAttackRetType_Miss\020\002\022\036\n\032empMagicAt"
    "tackRetType_Luck\020\004\022\037\n\033empMagicAttackRetT"
    "ype_Heavy\020\010*\205\001\n\020MsgBoxServerType\022\031\n\025MsgB"
    "oxServerType_None\020\001\022\032\n\026MsgBoxServerType_"
    "Scene\020\002\022\034\n\030MsgBoxServerType_Session\020\003\022\034\n"
    "\030MsgBoxServerType_Gateway\020\004*L\n\021empSceneE"
    "ntryType\022\034\n\030empSceneEntryType_Player\020\000\022\031"
    "\n\025empSceneEntryType_NPC\020\001*\226\010\n\013empAttrTyp"
    "e\022\030\n\024empAttrType_Strength\020\000\022\034\n\030empAttrTy"
    "pe_Intelligence\020\001\022\031\n\025empAttrType_Dexteri"
    "ty\020\002\022\034\n\030empAttrType_Constitution\020\003\022\027\n\023em"
    "pAttrType_Pdamage\020\004\022\027\n\023empAttrType_Mdama"
    "ge\020\005\022\033\n\027empAttrType_AttackSpeed\020\006\022\030\n\024emp"
    "AttrType_Pdefence\020\007\022\030\n\024empAttrType_Mdefe"
    "nce\020\010\022\027\n\023empAttrType_HitRate\020\t\022\025\n\021empAtt"
    "rType_Dodge\020\n\022\025\n\021empAttrType_HpMax\020\013\022\025\n\021"
    "empAttrType_MpMax\020\014\022\025\n\021empAttrType_SpMax"
    "\020\r\022\030\n\024empAttrType_Pdamagep\020\017\022\030\n\024empAttrT"
    "ype_Mdamagep\020\020\022\031\n\025empAttrType_Pdefencep\020"
    "\021\022\033\n\027empAttrType_PdamageFree\020\023\022\033\n\027empAtt"
    "rType_MdamageFree\020\024\022\031\n\025empAttrType_Smite"
    "Rate\020\025\022\033\n\027empAttrType_SmiteDamage\020\026\022\025\n\021e"
    "mpAttrType_Break\020\027\022\025\n\021empAttrType_Block\020"
    "\030\022\025\n\021empAttrType_Parry\020\031\022\027\n\023empAttrType_"
    "ReSmite\020\032\022\025\n\021empAttrType_Speed\020\034\022\026\n\022empA"
    "ttrYpte_Resist\020\035\022\027\n\023empAttrType_GlodAtt\020"
    "\036\022\027\n\023empAttrType_WoodAtt\020\037\022\030\n\024empAttrTyp"
    "e_WaterAtt\020 \022\027\n\023empAttrType_FireAtt\020!\022\030\n"
    "\024empAttrType_EarthAtt\020\"\022\031\n\025empAttrType_R"
    "eGlodAtt\020(\022\031\n\025empAttrType_ReWoodAtt\020)\022\032\n"
    "\026empAttrType_ReWaterAtt\020*\022\031\n\025empAttrType"
    "_ReFireAtt\020+\022\032\n\026empAttrType_ReEarthAtt\020,"
    "\022\031\n\025empAttrType_FixDamage\0202\022\023\n\017empAttrTy"
    "pe_Max\0203\022\030\n\023empAttrType_Percent\020\310\001*\215\003\n\026F"
    "QuestCompleteCondType\022\033\n\027FQuestCompleteT"
    "ype_None\020\000\022\"\n\036FQuestCompleteType_KillMon"
    "ster\020\001\022 \n\034FQuestCompleteType_VisitArea\020\002"
    "\022!\n\035FQuestCompleteType_ManualItem\020\003\022$\n F"
    "QuestCompleteType_FinishDungeon\020\004\022\"\n\036FQu"
    "estCompleteType_CollectItem\020\005\022!\n\035FQuestC"
    "ompleteType_MakeObject\020\006\022\037\n\033FQuestComple"
    "teType_Property\020\007\022\037\n\033FQuestCompleteType_"
    "VisitNpc\020\010\022\036\n\032FQuestCompleteType_Fishing"
    "\020\010\022\032\n\026FQuestCompleteType_Max\020\031\032\002\020\001*Y\n\013em"
    "pPackType\022\020\n\014empPack_Self\020\001\022\020\n\014empPack_M"
    "ain\020\002\022\017\n\013empPack_Arm\020\003\022\025\n\021empPack_Wareho"
    "use\020\004*\264\r\n\016FPropValueType\022\023\n\017FValueType_n"
    "one\020\000\022\024\n\020FValueType_maxhp\020\001\022\024\n\020FValueTyp"
    "e_maxmp\020\002\022\031\n\025FValueType_minpdamage\020\003\022\031\n\025"
    "FValueType_maxpdamage\020\004\022\031\n\025FValueType_mi"
    "nmdamage\020\005\022\031\n\025FValueType_maxmdamage\020\006\022\027\n"
    "\023FValueType_pdefence\020\007\022\027\n\023FValueType_mde"
    "fence\020\010\022\025\n\021FValueType_maxhpr\020\t\022\025\n\021FValue"
    "Type_maxmpr\020\n\022\032\n\026FValueType_minpdamager\020"
    "\013\022\032\n\026FValueType_maxpdamager\020\014\022\032\n\026FValueT"
    "ype_minmdamager\020\r\022\032\n\026FValueType_maxmdama"
    "ger\020\016\022\030\n\024FValueType_pdefencer\020\017\022\030\n\024FValu"
    "eType_mdefencer\020\020\022\025\n\021FValueType_damage\020\021"
    "\022\026\n\022FValueType_defence\020\022\022\026\n\022FValueType_a"
    "llattr\020\023\022\027\n\023FValueType_strength\020\024\022\030\n\024FVa"
    "lueType_dexterity\020\025\022\030\n\024FValueType_mental"
    "ity\020\026\022\033\n\027FValueType_constitution\020\027\022\026\n\022FV"
    "alueType_mvspeed\020\037\022\027\n\023FValueType_luckRat"
    "e\020 \022\026\n\022FValueType_hitRate\020!\022\027\n\023FValueTyp"
    "e_missRate\020\"\022\030\n\024FValueType_smiteRate\020#\022\032"
    "\n\026FValueType_reSmiteRate\020$\022\027\n\023FValueType"
    "_beatRate\020%\022\031\n\025FValueType_reBeatRate\020&\022\027"
    "\n\023FValueType_smiteAdd\020\'\022\033\n\027FValueType_fi"
    "xedHurtAdd\020(\022\033\n\027FValueType_fixedHurtSub\020"
    ")\022\027\n\023FValueType_pdamagep\0203\022\027\n\023FValueType"
    "_mdamagep\0204\022\030\n\024FValueType_pdefencep\0205\022\030\n"
    "\024FValueType_mdefencep\0206\022\027\n\023FValueType_at"
    "tlevel\020=\022\027\n\023FValueType_deflevel\020>\022\026\n\022FVa"
    "lueType_hplevel\020\?\022\034\n\030FValueType_paralysi"
    "sRate\020G\022\036\n\032FValueType_reParalysisRate\020H\022"
    "\027\n\023FValueType_coldRate\020I\022\031\n\025FValueType_r"
    "eColdRate\020J\022\030\n\024FValueType_reAllRate\020K\022\032\n"
    "\026FValueType_neglectRate\020L\022\030\n\024FValueType_"
    "damageInc\020M\022\027\n\023FValueType_hpsucker\020N\022\027\n\023"
    "FValueType_mpsucker\020O\022\033\n\027FValueType_hpsu"
    "ckerRate\020P\022\033\n\027FValueType_mpsuckerRate\020Q\022"
    "\024\n\020FValueType_addHp\020R\022\024\n\020FValueType_addM"
    "p\020S\022\026\n\022FValueType_reflect\020T\022\025\n\021FValueTyp"
    "e_shield\020U\022\025\n\021FValueType_resist\020V\022\030\n\024FVa"
    "lueType_butterfly\020W\022\034\n\030FValueType_reNegl"
    "ectRate\020X\022\034\n\030FValueType_moneyLostRate\020Z\022"
    "\034\n\030FValueType_equipLostRate\020[\022\030\n\024FValueT"
    "ype_phyresist\020\\\022\030\n\024FValueType_magresist\020"
    "]\022\024\n\020FValueType_skill\020e\022\023\n\017FValueType_st"
    "ar\020f*\233\001\n\017FProfessionType\022\024\n\020FProfession_"
    "None\020\000\022\027\n\023FProfession_Fighter\020\001\022\024\n\020FProf"
    "ession_Mage\020\002\022\026\n\022FProfession_Doctor\020\003\022\026\n"
    "\022FProfession_Archer\020\004\022\023\n\017FProfession_Max"
    "\020\005*%\n\nObjectType\022\027\n\023OBJECTCELLTYPE_NONE\020"
    "\000", 32641);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  II_PairData::default_instance_ = new II_PairData();
  QuestVar::default_instance_ = new QuestVar();
  PairDataDWORD::default_instance_ = new PairDataDWORD();
  TripleDataDWORD::default_instance_ = new TripleDataDWORD();
  QuestData::default_instance_ = new QuestData();
  DoingQuestData::default_instance_ = new DoingQuestData();
  QuestCompleteData::default_instance_ = new QuestCompleteData();
  QuestPairData::default_instance_ = new QuestPairData();
  QuestId::default_instance_ = new QuestId();
  BinarySaveQuest::default_instance_ = new BinarySaveQuest();
  ChangeEquipAccType::default_instance_ = new ChangeEquipAccType();
  ChangeEquip::default_instance_ = new ChangeEquip();
  ChangeEquip_stCE::default_instance_ = new ChangeEquip_stCE();
  stChangeEquip::default_instance_ = new stChangeEquip();
  TalismanStar::default_instance_ = new TalismanStar();
  TalismanStar_Prop::default_instance_ = new TalismanStar_Prop();
  TalismanData::default_instance_ = new TalismanData();
  TalismanData_Skill::default_instance_ = new TalismanData_Skill();
  ScenePetAutoFun::default_instance_ = new ScenePetAutoFun();
  ScenePetSkillData::default_instance_ = new ScenePetSkillData();
  ScenePetDoSkill::default_instance_ = new ScenePetDoSkill();
  ScenePetData::default_instance_ = new ScenePetData();
  ScenePetServerData::default_instance_ = new ScenePetServerData();
  optionBaseAutoTeamMember::default_instance_ = new optionBaseAutoTeamMember();
  stOptionBase::default_instance_ = new stOptionBase();
  stDayHonor::default_instance_ = new stDayHonor();
  stHonorKill::default_instance_ = new stHonorKill();
  stHonorData::default_instance_ = new stHonorData();
  stHonorLimit::default_instance_ = new stHonorLimit();
  stAddPointLimit::default_instance_ = new stAddPointLimit();
  SaveGuard::default_instance_ = new SaveGuard();
  SaveDropIncreaseTime::default_instance_ = new SaveDropIncreaseTime();
  stAccelKey::default_instance_ = new stAccelKey();
  stMapTermData::default_instance_ = new stMapTermData();
  OrderSysPresent::default_instance_ = new OrderSysPresent();
  UserCopyID::default_instance_ = new UserCopyID();
  UserCopyTimes::default_instance_ = new UserCopyTimes();
  UserCopyScore::default_instance_ = new UserCopyScore();
  UserCopySceneTimes::default_instance_ = new UserCopySceneTimes();
  SaveSkill::default_instance_ = new SaveSkill();
  BinarySaveSkill::default_instance_ = new BinarySaveSkill();
  NoPropertyIconState::default_instance_ = new NoPropertyIconState();
  SkillStatusElement::default_instance_ = new SkillStatusElement();
  SkillStatusElement_Pos::default_instance_ = new SkillStatusElement_Pos();
  ObjectLocation::default_instance_ = new ObjectLocation();
  stoneSocket::default_instance_ = new stoneSocket();
  diamondSoket::default_instance_ = new diamondSoket();
  diamondSoket_Diamond::default_instance_ = new diamondSoket_Diamond();
  wingData::default_instance_ = new wingData();
  wingData_Diamond::default_instance_ = new wingData_Diamond();
  wingData_ActiveSkill::default_instance_ = new wingData_ActiveSkill();
  flyPos::default_instance_ = new flyPos();
  flyMessage::default_instance_ = new flyMessage();
  PropertyValues::default_instance_ = new PropertyValues();
  PropertyValues_Value::default_instance_ = new PropertyValues_Value();
  PropertyValuesEx::default_instance_ = new PropertyValuesEx();
  PropertyValuesEx_Value::default_instance_ = new PropertyValuesEx_Value();
  EquipBaseValue::default_instance_ = new EquipBaseValue();
  EquipSplitData::default_instance_ = new EquipSplitData();
  t_Object::default_instance_ = new t_Object();
  ObjectMapData::default_instance_ = new ObjectMapData();
  stChatChannel::default_instance_ = new stChatChannel();
  stUserShopItemView::default_instance_ = new stUserShopItemView();
  LockItem::default_instance_ = new LockItem();
  CounterNum::default_instance_ = new CounterNum();
  CounterSave::default_instance_ = new CounterSave();
  TimeExpItem::default_instance_ = new TimeExpItem();
  TimeExpSave::default_instance_ = new TimeExpSave();
  ObjectArray::default_instance_ = new ObjectArray();
  MailOneObject::default_instance_ = new MailOneObject();
  MailObjects::default_instance_ = new MailObjects();
  SceneShowFuncNpcData::default_instance_ = new SceneShowFuncNpcData();
  MapFuncNpcList::default_instance_ = new MapFuncNpcList();
  MusterCount::default_instance_ = new MusterCount();
  septCartHelpBack::default_instance_ = new septCartHelpBack();
  septCartHelpSave::default_instance_ = new septCartHelpSave();
  BinaryGangData::default_instance_ = new BinaryGangData();
  GangServerSyncData::default_instance_ = new GangServerSyncData();
  StockAccountData::default_instance_ = new StockAccountData();
  OneStockItem::default_instance_ = new OneStockItem();
  SelfOneStockItem::default_instance_ = new SelfOneStockItem();
  StockTypeList::default_instance_ = new StockTypeList();
  SeptBuildingData::default_instance_ = new SeptBuildingData();
  SceneChariotSkill::default_instance_ = new SceneChariotSkill();
  SceneChariotBaseData::default_instance_ = new SceneChariotBaseData();
  SceneChariotBinaryData::default_instance_ = new SceneChariotBinaryData();
  UserTempPosition::default_instance_ = new UserTempPosition();
  BiGuanXiuXianData::default_instance_ = new BiGuanXiuXianData();
  ObjectDrop::default_instance_ = new ObjectDrop();
  ObjectDropSave::default_instance_ = new ObjectDropSave();
  CopyUserMember::default_instance_ = new CopyUserMember();
  DBCopySceneBinaryData::default_instance_ = new DBCopySceneBinaryData();
  HorseExtraData::default_instance_ = new HorseExtraData();
  CharacterMapShow::default_instance_ = new CharacterMapShow();
  StateData::default_instance_ = new StateData();
  CharacterMapData::default_instance_ = new CharacterMapData();
  CharacterMainData::default_instance_ = new CharacterMainData();
  NpcMapData::default_instance_ = new NpcMapData();
  NpcDeathMapData::default_instance_ = new NpcDeathMapData();
  EquipChangeMaterial::default_instance_ = new EquipChangeMaterial();
  AddMaxCount::default_instance_ = new AddMaxCount();
  AddMaxCount_Count::default_instance_ = new AddMaxCount_Count();
  BossReliveInfo::default_instance_ = new BossReliveInfo();
  ChangeZoneInfo::default_instance_ = new ChangeZoneInfo();
  UserScore::default_instance_ = new UserScore();
  OneYaoQianItem::default_instance_ = new OneYaoQianItem();
  YaoQianSaveData::default_instance_ = new YaoQianSaveData();
  DungeonSaveData::default_instance_ = new DungeonSaveData();
  VarInfo::default_instance_ = new VarInfo();
  BuildInfo::default_instance_ = new BuildInfo();
  MakeEquipInfo::default_instance_ = new MakeEquipInfo();
  CastleExploreInfo::default_instance_ = new CastleExploreInfo();
  BinaryCastle::default_instance_ = new BinaryCastle();
  BinaryMakeEquip::default_instance_ = new BinaryMakeEquip();
  CastlePetInfo::default_instance_ = new CastlePetInfo();
  CastleWorkPet::default_instance_ = new CastleWorkPet();
  BinaryCastlePet::default_instance_ = new BinaryCastlePet();
  CastlePetState::default_instance_ = new CastlePetState();
  CastleStatueInfo::default_instance_ = new CastleStatueInfo();
  BinaryCastleStatue::default_instance_ = new BinaryCastleStatue();
  ReplaceSkill::default_instance_ = new ReplaceSkill();
  RelicUserPos::default_instance_ = new RelicUserPos();
  RiskTaskInfo::default_instance_ = new RiskTaskInfo();
  BinaryRiskTaskInfo::default_instance_ = new BinaryRiskTaskInfo();
  LifeSkillInfo::default_instance_ = new LifeSkillInfo();
  BinaryLifeSkill::default_instance_ = new BinaryLifeSkill();
  DayGuideInfo::default_instance_ = new DayGuideInfo();
  TitleData::default_instance_ = new TitleData();
  MonthCardData::default_instance_ = new MonthCardData();
  WingSystemData::default_instance_ = new WingSystemData();
  StatHurtData::default_instance_ = new StatHurtData();
  TitleInfo::default_instance_ = new TitleInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  LimitShopData::default_instance_ = new LimitShopData();
  FundData::default_instance_ = new FundData();
  TotalReSpData::default_instance_ = new TotalReSpData();
  RechargeSpendData::default_instance_ = new RechargeSpendData();
  DeclareWarData::default_instance_ = new DeclareWarData();
  PropValues::default_instance_ = new PropValues();
  FPairDataDWORD::default_instance_ = new FPairDataDWORD();
  FPairDataStrDW::default_instance_ = new FPairDataStrDW();
  FTripleDataDWORD::default_instance_ = new FTripleDataDWORD();
  StpObjectNode::default_instance_ = new StpObjectNode();
  FMsgNpcFunction::default_instance_ = new FMsgNpcFunction();
  FNpcDlgPara::default_instance_ = new FNpcDlgPara();
  FValueCell::default_instance_ = new FValueCell();
  FPropertyValues::default_instance_ = new FPropertyValues();
  FPropertyValues_FValue::default_instance_ = new FPropertyValues_FValue();
  FNpcMapData::default_instance_ = new FNpcMapData();
  FStateData::default_instance_ = new FStateData();
  FCharacterMapShow::default_instance_ = new FCharacterMapShow();
  FCharacterMapData::default_instance_ = new FCharacterMapData();
  FNpcDeathMapData::default_instance_ = new FNpcDeathMapData();
  FCharacterMainData::default_instance_ = new FCharacterMainData();
  II_PairData::default_instance_->InitAsDefaultInstance();
  QuestVar::default_instance_->InitAsDefaultInstance();
  PairDataDWORD::default_instance_->InitAsDefaultInstance();
  TripleDataDWORD::default_instance_->InitAsDefaultInstance();
  QuestData::default_instance_->InitAsDefaultInstance();
  DoingQuestData::default_instance_->InitAsDefaultInstance();
  QuestCompleteData::default_instance_->InitAsDefaultInstance();
  QuestPairData::default_instance_->InitAsDefaultInstance();
  QuestId::default_instance_->InitAsDefaultInstance();
  BinarySaveQuest::default_instance_->InitAsDefaultInstance();
  ChangeEquipAccType::default_instance_->InitAsDefaultInstance();
  ChangeEquip::default_instance_->InitAsDefaultInstance();
  ChangeEquip_stCE::default_instance_->InitAsDefaultInstance();
  stChangeEquip::default_instance_->InitAsDefaultInstance();
  TalismanStar::default_instance_->InitAsDefaultInstance();
  TalismanStar_Prop::default_instance_->InitAsDefaultInstance();
  TalismanData::default_instance_->InitAsDefaultInstance();
  TalismanData_Skill::default_instance_->InitAsDefaultInstance();
  ScenePetAutoFun::default_instance_->InitAsDefaultInstance();
  ScenePetSkillData::default_instance_->InitAsDefaultInstance();
  ScenePetDoSkill::default_instance_->InitAsDefaultInstance();
  ScenePetData::default_instance_->InitAsDefaultInstance();
  ScenePetServerData::default_instance_->InitAsDefaultInstance();
  optionBaseAutoTeamMember::default_instance_->InitAsDefaultInstance();
  stOptionBase::default_instance_->InitAsDefaultInstance();
  stDayHonor::default_instance_->InitAsDefaultInstance();
  stHonorKill::default_instance_->InitAsDefaultInstance();
  stHonorData::default_instance_->InitAsDefaultInstance();
  stHonorLimit::default_instance_->InitAsDefaultInstance();
  stAddPointLimit::default_instance_->InitAsDefaultInstance();
  SaveGuard::default_instance_->InitAsDefaultInstance();
  SaveDropIncreaseTime::default_instance_->InitAsDefaultInstance();
  stAccelKey::default_instance_->InitAsDefaultInstance();
  stMapTermData::default_instance_->InitAsDefaultInstance();
  OrderSysPresent::default_instance_->InitAsDefaultInstance();
  UserCopyID::default_instance_->InitAsDefaultInstance();
  UserCopyTimes::default_instance_->InitAsDefaultInstance();
  UserCopyScore::default_instance_->InitAsDefaultInstance();
  UserCopySceneTimes::default_instance_->InitAsDefaultInstance();
  SaveSkill::default_instance_->InitAsDefaultInstance();
  BinarySaveSkill::default_instance_->InitAsDefaultInstance();
  NoPropertyIconState::default_instance_->InitAsDefaultInstance();
  SkillStatusElement::default_instance_->InitAsDefaultInstance();
  SkillStatusElement_Pos::default_instance_->InitAsDefaultInstance();
  ObjectLocation::default_instance_->InitAsDefaultInstance();
  stoneSocket::default_instance_->InitAsDefaultInstance();
  diamondSoket::default_instance_->InitAsDefaultInstance();
  diamondSoket_Diamond::default_instance_->InitAsDefaultInstance();
  wingData::default_instance_->InitAsDefaultInstance();
  wingData_Diamond::default_instance_->InitAsDefaultInstance();
  wingData_ActiveSkill::default_instance_->InitAsDefaultInstance();
  flyPos::default_instance_->InitAsDefaultInstance();
  flyMessage::default_instance_->InitAsDefaultInstance();
  PropertyValues::default_instance_->InitAsDefaultInstance();
  PropertyValues_Value::default_instance_->InitAsDefaultInstance();
  PropertyValuesEx::default_instance_->InitAsDefaultInstance();
  PropertyValuesEx_Value::default_instance_->InitAsDefaultInstance();
  EquipBaseValue::default_instance_->InitAsDefaultInstance();
  EquipSplitData::default_instance_->InitAsDefaultInstance();
  t_Object::default_instance_->InitAsDefaultInstance();
  ObjectMapData::default_instance_->InitAsDefaultInstance();
  stChatChannel::default_instance_->InitAsDefaultInstance();
  stUserShopItemView::default_instance_->InitAsDefaultInstance();
  LockItem::default_instance_->InitAsDefaultInstance();
  CounterNum::default_instance_->InitAsDefaultInstance();
  CounterSave::default_instance_->InitAsDefaultInstance();
  TimeExpItem::default_instance_->InitAsDefaultInstance();
  TimeExpSave::default_instance_->InitAsDefaultInstance();
  ObjectArray::default_instance_->InitAsDefaultInstance();
  MailOneObject::default_instance_->InitAsDefaultInstance();
  MailObjects::default_instance_->InitAsDefaultInstance();
  SceneShowFuncNpcData::default_instance_->InitAsDefaultInstance();
  MapFuncNpcList::default_instance_->InitAsDefaultInstance();
  MusterCount::default_instance_->InitAsDefaultInstance();
  septCartHelpBack::default_instance_->InitAsDefaultInstance();
  septCartHelpSave::default_instance_->InitAsDefaultInstance();
  BinaryGangData::default_instance_->InitAsDefaultInstance();
  GangServerSyncData::default_instance_->InitAsDefaultInstance();
  StockAccountData::default_instance_->InitAsDefaultInstance();
  OneStockItem::default_instance_->InitAsDefaultInstance();
  SelfOneStockItem::default_instance_->InitAsDefaultInstance();
  StockTypeList::default_instance_->InitAsDefaultInstance();
  SeptBuildingData::default_instance_->InitAsDefaultInstance();
  SceneChariotSkill::default_instance_->InitAsDefaultInstance();
  SceneChariotBaseData::default_instance_->InitAsDefaultInstance();
  SceneChariotBinaryData::default_instance_->InitAsDefaultInstance();
  UserTempPosition::default_instance_->InitAsDefaultInstance();
  BiGuanXiuXianData::default_instance_->InitAsDefaultInstance();
  ObjectDrop::default_instance_->InitAsDefaultInstance();
  ObjectDropSave::default_instance_->InitAsDefaultInstance();
  CopyUserMember::default_instance_->InitAsDefaultInstance();
  DBCopySceneBinaryData::default_instance_->InitAsDefaultInstance();
  HorseExtraData::default_instance_->InitAsDefaultInstance();
  CharacterMapShow::default_instance_->InitAsDefaultInstance();
  StateData::default_instance_->InitAsDefaultInstance();
  CharacterMapData::default_instance_->InitAsDefaultInstance();
  CharacterMainData::default_instance_->InitAsDefaultInstance();
  NpcMapData::default_instance_->InitAsDefaultInstance();
  NpcDeathMapData::default_instance_->InitAsDefaultInstance();
  EquipChangeMaterial::default_instance_->InitAsDefaultInstance();
  AddMaxCount::default_instance_->InitAsDefaultInstance();
  AddMaxCount_Count::default_instance_->InitAsDefaultInstance();
  BossReliveInfo::default_instance_->InitAsDefaultInstance();
  ChangeZoneInfo::default_instance_->InitAsDefaultInstance();
  UserScore::default_instance_->InitAsDefaultInstance();
  OneYaoQianItem::default_instance_->InitAsDefaultInstance();
  YaoQianSaveData::default_instance_->InitAsDefaultInstance();
  DungeonSaveData::default_instance_->InitAsDefaultInstance();
  VarInfo::default_instance_->InitAsDefaultInstance();
  BuildInfo::default_instance_->InitAsDefaultInstance();
  MakeEquipInfo::default_instance_->InitAsDefaultInstance();
  CastleExploreInfo::default_instance_->InitAsDefaultInstance();
  BinaryCastle::default_instance_->InitAsDefaultInstance();
  BinaryMakeEquip::default_instance_->InitAsDefaultInstance();
  CastlePetInfo::default_instance_->InitAsDefaultInstance();
  CastleWorkPet::default_instance_->InitAsDefaultInstance();
  BinaryCastlePet::default_instance_->InitAsDefaultInstance();
  CastlePetState::default_instance_->InitAsDefaultInstance();
  CastleStatueInfo::default_instance_->InitAsDefaultInstance();
  BinaryCastleStatue::default_instance_->InitAsDefaultInstance();
  ReplaceSkill::default_instance_->InitAsDefaultInstance();
  RelicUserPos::default_instance_->InitAsDefaultInstance();
  RiskTaskInfo::default_instance_->InitAsDefaultInstance();
  BinaryRiskTaskInfo::default_instance_->InitAsDefaultInstance();
  LifeSkillInfo::default_instance_->InitAsDefaultInstance();
  BinaryLifeSkill::default_instance_->InitAsDefaultInstance();
  DayGuideInfo::default_instance_->InitAsDefaultInstance();
  TitleData::default_instance_->InitAsDefaultInstance();
  MonthCardData::default_instance_->InitAsDefaultInstance();
  WingSystemData::default_instance_->InitAsDefaultInstance();
  StatHurtData::default_instance_->InitAsDefaultInstance();
  TitleInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  LimitShopData::default_instance_->InitAsDefaultInstance();
  FundData::default_instance_->InitAsDefaultInstance();
  TotalReSpData::default_instance_->InitAsDefaultInstance();
  RechargeSpendData::default_instance_->InitAsDefaultInstance();
  DeclareWarData::default_instance_->InitAsDefaultInstance();
  PropValues::default_instance_->InitAsDefaultInstance();
  FPairDataDWORD::default_instance_->InitAsDefaultInstance();
  FPairDataStrDW::default_instance_->InitAsDefaultInstance();
  FTripleDataDWORD::default_instance_->InitAsDefaultInstance();
  StpObjectNode::default_instance_->InitAsDefaultInstance();
  FMsgNpcFunction::default_instance_->InitAsDefaultInstance();
  FNpcDlgPara::default_instance_->InitAsDefaultInstance();
  FValueCell::default_instance_->InitAsDefaultInstance();
  FPropertyValues::default_instance_->InitAsDefaultInstance();
  FPropertyValues_FValue::default_instance_->InitAsDefaultInstance();
  FNpcMapData::default_instance_->InitAsDefaultInstance();
  FStateData::default_instance_->InitAsDefaultInstance();
  FCharacterMapShow::default_instance_->InitAsDefaultInstance();
  FCharacterMapData::default_instance_->InitAsDefaultInstance();
  FNpcDeathMapData::default_instance_->InitAsDefaultInstance();
  FCharacterMainData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* CountryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryType_descriptor_;
}
bool CountryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestStateType_descriptor_;
}
bool QuestStateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumQuestDoubleTimeLimit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumQuestDoubleTimeLimit_descriptor_;
}
bool enumQuestDoubleTimeLimit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeCycle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeCycle_descriptor_;
}
bool TimeCycle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CostType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostType_descriptor_;
}
bool CostType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerTitleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTitleType_descriptor_;
}
bool PlayerTitleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 15:
    case 16:
    case 17:
    case 18:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CountryOfficerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryOfficerType_descriptor_;
}
bool CountryOfficerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProfessionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionType_descriptor_;
}
bool ProfessionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PropGroupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropGroupType_descriptor_;
}
bool PropGroupType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PropValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropValueType_descriptor_;
}
bool PropValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 51:
    case 52:
    case 53:
    case 54:
    case 61:
    case 62:
    case 63:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 90:
    case 91:
    case 92:
    case 93:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ElementAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementAttrType_descriptor_;
}
bool ElementAttrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHANNEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHANNEL_descriptor_;
}
bool CHANNEL_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CounterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterType_descriptor_;
}
bool CounterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CounterFuncType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterFuncType_descriptor_;
}
bool CounterFuncType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MusterID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusterID_descriptor_;
}
bool MusterID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MusterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusterType_descriptor_;
}
bool MusterType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumUserPresentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumUserPresentType_descriptor_;
}
bool enumUserPresentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* septCartButtonAvailable_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return septCartButtonAvailable_descriptor_;
}
bool septCartButtonAvailable_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* septCartHelpFunctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return septCartHelpFunctionType_descriptor_;
}
bool septCartHelpFunctionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumStockAuctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumStockAuctionType_descriptor_;
}
bool enumStockAuctionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumCopySceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumCopySceneType_descriptor_;
}
bool enumCopySceneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumSceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumSceneType_descriptor_;
}
bool enumSceneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumSeptBuildingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumSeptBuildingType_descriptor_;
}
bool enumSeptBuildingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumMatchQueueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumMatchQueueType_descriptor_;
}
bool enumMatchQueueType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumUserInfluence_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumUserInfluence_descriptor_;
}
bool enumUserInfluence_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumCountryPower_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumCountryPower_descriptor_;
}
bool enumCountryPower_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumGlobalVar_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumGlobalVar_descriptor_;
}
bool enumGlobalVar_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumBiGuanXiuXianType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumBiGuanXiuXianType_descriptor_;
}
bool enumBiGuanXiuXianType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumObjectDropType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumObjectDropType_descriptor_;
}
bool enumObjectDropType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CountryOfficeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryOfficeType_descriptor_;
}
bool CountryOfficeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreType_descriptor_;
}
bool ScoreType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SpeakerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeakerType_descriptor_;
}
bool SpeakerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SpreaderGoldState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpreaderGoldState_descriptor_;
}
bool SpreaderGoldState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* empLoginError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return empLoginError_descriptor_;
}
bool empLoginError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* empTipsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return empTipsType_descriptor_;
}
bool empTipsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* empMagicAttackRetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return empMagicAttackRetType_descriptor_;
}
bool empMagicAttackRetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgBoxServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBoxServerType_descriptor_;
}
bool MsgBoxServerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* empSceneEntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return empSceneEntryType_descriptor_;
}
bool empSceneEntryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* empAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return empAttrType_descriptor_;
}
bool empAttrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 50:
    case 51:
    case 200:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FQuestCompleteCondType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FQuestCompleteCondType_descriptor_;
}
bool FQuestCompleteCondType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* empPackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return empPackType_descriptor_;
}
bool empPackType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FPropValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FPropValueType_descriptor_;
}
bool FPropValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 51:
    case 52:
    case 53:
    case 54:
    case 61:
    case 62:
    case 63:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 90:
    case 91:
    case 92:
    case 93:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FProfessionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FProfessionType_descriptor_;
}
bool FProfessionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectType_descriptor_;
}
bool ObjectType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int II_PairData::kFirstFieldNumber;
const int II_PairData::kSecondFieldNumber;
#endif  // !_MSC_VER

II_PairData::II_PairData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:II_PairData)
}

void II_PairData::InitAsDefaultInstance() {
}

II_PairData::II_PairData(const II_PairData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:II_PairData)
}

void II_PairData::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0u;
  second_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

II_PairData::~II_PairData() {
  // @@protoc_insertion_point(destructor:II_PairData)
  SharedDtor();
}

void II_PairData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void II_PairData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* II_PairData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return II_PairData_descriptor_;
}

const II_PairData& II_PairData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

II_PairData* II_PairData::default_instance_ = NULL;

II_PairData* II_PairData::New() const {
  return new II_PairData;
}

void II_PairData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<II_PairData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(first_, second_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool II_PairData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:II_PairData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 first = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // optional uint32 second = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:II_PairData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:II_PairData)
  return false;
#undef DO_
}

void II_PairData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:II_PairData)
  // optional uint32 first = 1 [default = 0];
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->first(), output);
  }

  // optional uint32 second = 2 [default = 0];
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:II_PairData)
}

::google::protobuf::uint8* II_PairData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:II_PairData)
  // optional uint32 first = 1 [default = 0];
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->first(), target);
  }

  // optional uint32 second = 2 [default = 0];
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:II_PairData)
  return target;
}

int II_PairData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 first = 1 [default = 0];
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }

    // optional uint32 second = 2 [default = 0];
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void II_PairData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const II_PairData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const II_PairData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void II_PairData::MergeFrom(const II_PairData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void II_PairData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void II_PairData::CopyFrom(const II_PairData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool II_PairData::IsInitialized() const {

  return true;
}

void II_PairData::Swap(II_PairData* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata II_PairData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = II_PairData_descriptor_;
  metadata.reflection = II_PairData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestVar::kSubidFieldNumber;
const int QuestVar::kValueFieldNumber;
#endif  // !_MSC_VER

QuestVar::QuestVar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuestVar)
}

void QuestVar::InitAsDefaultInstance() {
}

QuestVar::QuestVar(const QuestVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuestVar)
}

void QuestVar::SharedCtor() {
  _cached_size_ = 0;
  subid_ = 0u;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestVar::~QuestVar() {
  // @@protoc_insertion_point(destructor:QuestVar)
  SharedDtor();
}

void QuestVar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestVar_descriptor_;
}

const QuestVar& QuestVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

QuestVar* QuestVar::default_instance_ = NULL;

QuestVar* QuestVar::New() const {
  return new QuestVar;
}

void QuestVar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestVar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(subid_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuestVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 subid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subid_)));
          set_has_subid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuestVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuestVar)
  return false;
#undef DO_
}

void QuestVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuestVar)
  // optional uint32 subid = 1;
  if (has_subid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->subid(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuestVar)
}

::google::protobuf::uint8* QuestVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuestVar)
  // optional uint32 subid = 1;
  if (has_subid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->subid(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuestVar)
  return target;
}

int QuestVar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 subid = 1;
    if (has_subid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subid());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestVar::MergeFrom(const QuestVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subid()) {
      set_subid(from.subid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestVar::CopyFrom(const QuestVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestVar::IsInitialized() const {

  return true;
}

void QuestVar::Swap(QuestVar* other) {
  if (other != this) {
    std::swap(subid_, other->subid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestVar_descriptor_;
  metadata.reflection = QuestVar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairDataDWORD::kPara1FieldNumber;
const int PairDataDWORD::kPara2FieldNumber;
#endif  // !_MSC_VER

PairDataDWORD::PairDataDWORD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PairDataDWORD)
}

void PairDataDWORD::InitAsDefaultInstance() {
}

PairDataDWORD::PairDataDWORD(const PairDataDWORD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PairDataDWORD)
}

void PairDataDWORD::SharedCtor() {
  _cached_size_ = 0;
  para1_ = 0u;
  para2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairDataDWORD::~PairDataDWORD() {
  // @@protoc_insertion_point(destructor:PairDataDWORD)
  SharedDtor();
}

void PairDataDWORD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PairDataDWORD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairDataDWORD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairDataDWORD_descriptor_;
}

const PairDataDWORD& PairDataDWORD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PairDataDWORD* PairDataDWORD::default_instance_ = NULL;

PairDataDWORD* PairDataDWORD::New() const {
  return new PairDataDWORD;
}

void PairDataDWORD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PairDataDWORD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(para1_, para2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairDataDWORD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PairDataDWORD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 para1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para1_)));
          set_has_para1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_para2;
        break;
      }

      // optional uint32 para2 = 2;
      case 2: {
        if (tag == 16) {
         parse_para2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para2_)));
          set_has_para2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PairDataDWORD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PairDataDWORD)
  return false;
#undef DO_
}

void PairDataDWORD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PairDataDWORD)
  // optional uint32 para1 = 1;
  if (has_para1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->para1(), output);
  }

  // optional uint32 para2 = 2;
  if (has_para2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->para2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PairDataDWORD)
}

::google::protobuf::uint8* PairDataDWORD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PairDataDWORD)
  // optional uint32 para1 = 1;
  if (has_para1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->para1(), target);
  }

  // optional uint32 para2 = 2;
  if (has_para2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->para2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PairDataDWORD)
  return target;
}

int PairDataDWORD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 para1 = 1;
    if (has_para1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para1());
    }

    // optional uint32 para2 = 2;
    if (has_para2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairDataDWORD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairDataDWORD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairDataDWORD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairDataDWORD::MergeFrom(const PairDataDWORD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_para1()) {
      set_para1(from.para1());
    }
    if (from.has_para2()) {
      set_para2(from.para2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairDataDWORD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairDataDWORD::CopyFrom(const PairDataDWORD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairDataDWORD::IsInitialized() const {

  return true;
}

void PairDataDWORD::Swap(PairDataDWORD* other) {
  if (other != this) {
    std::swap(para1_, other->para1_);
    std::swap(para2_, other->para2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairDataDWORD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairDataDWORD_descriptor_;
  metadata.reflection = PairDataDWORD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TripleDataDWORD::kPara1FieldNumber;
const int TripleDataDWORD::kPara2FieldNumber;
const int TripleDataDWORD::kPara3FieldNumber;
#endif  // !_MSC_VER

TripleDataDWORD::TripleDataDWORD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TripleDataDWORD)
}

void TripleDataDWORD::InitAsDefaultInstance() {
}

TripleDataDWORD::TripleDataDWORD(const TripleDataDWORD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TripleDataDWORD)
}

void TripleDataDWORD::SharedCtor() {
  _cached_size_ = 0;
  para1_ = 0u;
  para2_ = 0u;
  para3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripleDataDWORD::~TripleDataDWORD() {
  // @@protoc_insertion_point(destructor:TripleDataDWORD)
  SharedDtor();
}

void TripleDataDWORD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripleDataDWORD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripleDataDWORD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripleDataDWORD_descriptor_;
}

const TripleDataDWORD& TripleDataDWORD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TripleDataDWORD* TripleDataDWORD::default_instance_ = NULL;

TripleDataDWORD* TripleDataDWORD::New() const {
  return new TripleDataDWORD;
}

void TripleDataDWORD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TripleDataDWORD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(para1_, para3_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripleDataDWORD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TripleDataDWORD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 para1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para1_)));
          set_has_para1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_para2;
        break;
      }

      // optional uint32 para2 = 2;
      case 2: {
        if (tag == 16) {
         parse_para2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para2_)));
          set_has_para2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_para3;
        break;
      }

      // optional uint32 para3 = 3;
      case 3: {
        if (tag == 24) {
         parse_para3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para3_)));
          set_has_para3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TripleDataDWORD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TripleDataDWORD)
  return false;
#undef DO_
}

void TripleDataDWORD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TripleDataDWORD)
  // optional uint32 para1 = 1;
  if (has_para1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->para1(), output);
  }

  // optional uint32 para2 = 2;
  if (has_para2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->para2(), output);
  }

  // optional uint32 para3 = 3;
  if (has_para3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->para3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TripleDataDWORD)
}

::google::protobuf::uint8* TripleDataDWORD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TripleDataDWORD)
  // optional uint32 para1 = 1;
  if (has_para1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->para1(), target);
  }

  // optional uint32 para2 = 2;
  if (has_para2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->para2(), target);
  }

  // optional uint32 para3 = 3;
  if (has_para3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->para3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TripleDataDWORD)
  return target;
}

int TripleDataDWORD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 para1 = 1;
    if (has_para1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para1());
    }

    // optional uint32 para2 = 2;
    if (has_para2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para2());
    }

    // optional uint32 para3 = 3;
    if (has_para3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripleDataDWORD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripleDataDWORD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripleDataDWORD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripleDataDWORD::MergeFrom(const TripleDataDWORD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_para1()) {
      set_para1(from.para1());
    }
    if (from.has_para2()) {
      set_para2(from.para2());
    }
    if (from.has_para3()) {
      set_para3(from.para3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripleDataDWORD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripleDataDWORD::CopyFrom(const TripleDataDWORD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripleDataDWORD::IsInitialized() const {

  return true;
}

void TripleDataDWORD::Swap(TripleDataDWORD* other) {
  if (other != this) {
    std::swap(para1_, other->para1_);
    std::swap(para2_, other->para2_);
    std::swap(para3_, other->para3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripleDataDWORD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripleDataDWORD_descriptor_;
  metadata.reflection = TripleDataDWORD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestData::kQuestidFieldNumber;
const int QuestData::kStateFieldNumber;
const int QuestData::kAddvarFieldNumber;
const int QuestData::kVarsFieldNumber;
const int QuestData::kAcceptTimeFieldNumber;
const int QuestData::kCompleteSubNumFieldNumber;
const int QuestData::kSubquestidFieldNumber;
const int QuestData::kQuestdataidFieldNumber;
const int QuestData::kCartceofFieldNumber;
const int QuestData::kIsAcceptDoubleFieldNumber;
#endif  // !_MSC_VER

QuestData::QuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuestData)
}

void QuestData::InitAsDefaultInstance() {
}

QuestData::QuestData(const QuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuestData)
}

void QuestData::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  state_ = 0;
  addvar_ = true;
  accepttime_ = 0u;
  completesubnum_ = 0u;
  questdataid_ = 0u;
  cartceof_ = 0;
  is_accept_double_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestData::~QuestData() {
  // @@protoc_insertion_point(destructor:QuestData)
  SharedDtor();
}

void QuestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestData_descriptor_;
}

const QuestData& QuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

QuestData* QuestData::default_instance_ = NULL;

QuestData* QuestData::New() const {
  return new QuestData;
}

void QuestData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 183) {
    ZR_(questid_, state_);
    ZR_(accepttime_, completesubnum_);
    addvar_ = true;
    questdataid_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    cartceof_ = 0;
    is_accept_double_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  vars_.Clear();
  subquestid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .QuestStateType state = 2 [default = QUESTSTATE_NONE];
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QuestStateType_IsValid(value)) {
            set_state(static_cast< ::QuestStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addvar;
        break;
      }

      // optional bool addvar = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_addvar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addvar_)));
          set_has_addvar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vars;
        break;
      }

      // repeated .QuestVar vars = 4;
      case 4: {
        if (tag == 34) {
         parse_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vars;
        if (input->ExpectTag(40)) goto parse_acceptTime;
        break;
      }

      // optional uint32 acceptTime = 5;
      case 5: {
        if (tag == 40) {
         parse_acceptTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accepttime_)));
          set_has_accepttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_completeSubNum;
        break;
      }

      // optional uint32 completeSubNum = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_completeSubNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completesubnum_)));
          set_has_completesubnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_subquestid;
        break;
      }

      // repeated uint32 subquestid = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_subquestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subquestid())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_subquestid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_questdataid;
        break;
      }

      // optional uint32 questdataid = 8;
      case 8: {
        if (tag == 64) {
         parse_questdataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questdataid_)));
          set_has_questdataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_cartceof;
        break;
      }

      // optional float cartceof = 9;
      case 9: {
        if (tag == 77) {
         parse_cartceof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cartceof_)));
          set_has_cartceof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_accept_double;
        break;
      }

      // optional bool is_accept_double = 10;
      case 10: {
        if (tag == 80) {
         parse_is_accept_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_double_)));
          set_has_is_accept_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuestData)
  return false;
#undef DO_
}

void QuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuestData)
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // optional .QuestStateType state = 2 [default = QUESTSTATE_NONE];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional bool addvar = 3 [default = true];
  if (has_addvar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->addvar(), output);
  }

  // repeated .QuestVar vars = 4;
  for (int i = 0; i < this->vars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vars(i), output);
  }

  // optional uint32 acceptTime = 5;
  if (has_accepttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->accepttime(), output);
  }

  // optional uint32 completeSubNum = 6 [default = 0];
  if (has_completesubnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->completesubnum(), output);
  }

  // repeated uint32 subquestid = 7 [packed = true];
  if (this->subquestid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_subquestid_cached_byte_size_);
  }
  for (int i = 0; i < this->subquestid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->subquestid(i), output);
  }

  // optional uint32 questdataid = 8;
  if (has_questdataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->questdataid(), output);
  }

  // optional float cartceof = 9;
  if (has_cartceof()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cartceof(), output);
  }

  // optional bool is_accept_double = 10;
  if (has_is_accept_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_accept_double(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuestData)
}

::google::protobuf::uint8* QuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuestData)
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // optional .QuestStateType state = 2 [default = QUESTSTATE_NONE];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional bool addvar = 3 [default = true];
  if (has_addvar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->addvar(), target);
  }

  // repeated .QuestVar vars = 4;
  for (int i = 0; i < this->vars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vars(i), target);
  }

  // optional uint32 acceptTime = 5;
  if (has_accepttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->accepttime(), target);
  }

  // optional uint32 completeSubNum = 6 [default = 0];
  if (has_completesubnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->completesubnum(), target);
  }

  // repeated uint32 subquestid = 7 [packed = true];
  if (this->subquestid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _subquestid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->subquestid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->subquestid(i), target);
  }

  // optional uint32 questdataid = 8;
  if (has_questdataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->questdataid(), target);
  }

  // optional float cartceof = 9;
  if (has_cartceof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cartceof(), target);
  }

  // optional bool is_accept_double = 10;
  if (has_is_accept_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_accept_double(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuestData)
  return target;
}

int QuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional .QuestStateType state = 2 [default = QUESTSTATE_NONE];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional bool addvar = 3 [default = true];
    if (has_addvar()) {
      total_size += 1 + 1;
    }

    // optional uint32 acceptTime = 5;
    if (has_accepttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accepttime());
    }

    // optional uint32 completeSubNum = 6 [default = 0];
    if (has_completesubnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completesubnum());
    }

    // optional uint32 questdataid = 8;
    if (has_questdataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questdataid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float cartceof = 9;
    if (has_cartceof()) {
      total_size += 1 + 4;
    }

    // optional bool is_accept_double = 10;
    if (has_is_accept_double()) {
      total_size += 1 + 1;
    }

  }
  // repeated .QuestVar vars = 4;
  total_size += 1 * this->vars_size();
  for (int i = 0; i < this->vars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vars(i));
  }

  // repeated uint32 subquestid = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->subquestid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subquestid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _subquestid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestData::MergeFrom(const QuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  vars_.MergeFrom(from.vars_);
  subquestid_.MergeFrom(from.subquestid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_addvar()) {
      set_addvar(from.addvar());
    }
    if (from.has_accepttime()) {
      set_accepttime(from.accepttime());
    }
    if (from.has_completesubnum()) {
      set_completesubnum(from.completesubnum());
    }
    if (from.has_questdataid()) {
      set_questdataid(from.questdataid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cartceof()) {
      set_cartceof(from.cartceof());
    }
    if (from.has_is_accept_double()) {
      set_is_accept_double(from.is_accept_double());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestData::CopyFrom(const QuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestData::IsInitialized() const {

  return true;
}

void QuestData::Swap(QuestData* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(state_, other->state_);
    std::swap(addvar_, other->addvar_);
    vars_.Swap(&other->vars_);
    std::swap(accepttime_, other->accepttime_);
    std::swap(completesubnum_, other->completesubnum_);
    subquestid_.Swap(&other->subquestid_);
    std::swap(questdataid_, other->questdataid_);
    std::swap(cartceof_, other->cartceof_);
    std::swap(is_accept_double_, other->is_accept_double_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestData_descriptor_;
  metadata.reflection = QuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoingQuestData::kDirtyFieldNumber;
const int DoingQuestData::kQuestFieldNumber;
#endif  // !_MSC_VER

DoingQuestData::DoingQuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DoingQuestData)
}

void DoingQuestData::InitAsDefaultInstance() {
}

DoingQuestData::DoingQuestData(const DoingQuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DoingQuestData)
}

void DoingQuestData::SharedCtor() {
  _cached_size_ = 0;
  dirty_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoingQuestData::~DoingQuestData() {
  // @@protoc_insertion_point(destructor:DoingQuestData)
  SharedDtor();
}

void DoingQuestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoingQuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoingQuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoingQuestData_descriptor_;
}

const DoingQuestData& DoingQuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

DoingQuestData* DoingQuestData::default_instance_ = NULL;

DoingQuestData* DoingQuestData::New() const {
  return new DoingQuestData;
}

void DoingQuestData::Clear() {
  dirty_ = false;
  quest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoingQuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DoingQuestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dirty = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quest;
        break;
      }

      // repeated .QuestData quest = 2;
      case 2: {
        if (tag == 18) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quest;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DoingQuestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DoingQuestData)
  return false;
#undef DO_
}

void DoingQuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DoingQuestData)
  // optional bool dirty = 1;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dirty(), output);
  }

  // repeated .QuestData quest = 2;
  for (int i = 0; i < this->quest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DoingQuestData)
}

::google::protobuf::uint8* DoingQuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DoingQuestData)
  // optional bool dirty = 1;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dirty(), target);
  }

  // repeated .QuestData quest = 2;
  for (int i = 0; i < this->quest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DoingQuestData)
  return target;
}

int DoingQuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool dirty = 1;
    if (has_dirty()) {
      total_size += 1 + 1;
    }

  }
  // repeated .QuestData quest = 2;
  total_size += 1 * this->quest_size();
  for (int i = 0; i < this->quest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoingQuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoingQuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoingQuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoingQuestData::MergeFrom(const DoingQuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  quest_.MergeFrom(from.quest_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoingQuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoingQuestData::CopyFrom(const DoingQuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoingQuestData::IsInitialized() const {

  return true;
}

void DoingQuestData::Swap(DoingQuestData* other) {
  if (other != this) {
    std::swap(dirty_, other->dirty_);
    quest_.Swap(&other->quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoingQuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoingQuestData_descriptor_;
  metadata.reflection = DoingQuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestCompleteData::kDirtyFieldNumber;
const int QuestCompleteData::kQuestFieldNumber;
#endif  // !_MSC_VER

QuestCompleteData::QuestCompleteData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuestCompleteData)
}

void QuestCompleteData::InitAsDefaultInstance() {
}

QuestCompleteData::QuestCompleteData(const QuestCompleteData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuestCompleteData)
}

void QuestCompleteData::SharedCtor() {
  _cached_size_ = 0;
  dirty_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestCompleteData::~QuestCompleteData() {
  // @@protoc_insertion_point(destructor:QuestCompleteData)
  SharedDtor();
}

void QuestCompleteData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestCompleteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestCompleteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestCompleteData_descriptor_;
}

const QuestCompleteData& QuestCompleteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

QuestCompleteData* QuestCompleteData::default_instance_ = NULL;

QuestCompleteData* QuestCompleteData::New() const {
  return new QuestCompleteData;
}

void QuestCompleteData::Clear() {
  dirty_ = false;
  quest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestCompleteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuestCompleteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dirty = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quest;
        break;
      }

      // repeated uint32 quest = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_quest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_quest())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_quest())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuestCompleteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuestCompleteData)
  return false;
#undef DO_
}

void QuestCompleteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuestCompleteData)
  // optional bool dirty = 1;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dirty(), output);
  }

  // repeated uint32 quest = 2 [packed = true];
  if (this->quest_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_quest_cached_byte_size_);
  }
  for (int i = 0; i < this->quest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->quest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuestCompleteData)
}

::google::protobuf::uint8* QuestCompleteData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuestCompleteData)
  // optional bool dirty = 1;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dirty(), target);
  }

  // repeated uint32 quest = 2 [packed = true];
  if (this->quest_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _quest_cached_byte_size_, target);
  }
  for (int i = 0; i < this->quest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->quest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuestCompleteData)
  return target;
}

int QuestCompleteData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool dirty = 1;
    if (has_dirty()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 quest = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->quest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->quest(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _quest_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestCompleteData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestCompleteData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestCompleteData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestCompleteData::MergeFrom(const QuestCompleteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  quest_.MergeFrom(from.quest_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestCompleteData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestCompleteData::CopyFrom(const QuestCompleteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestCompleteData::IsInitialized() const {

  return true;
}

void QuestCompleteData::Swap(QuestCompleteData* other) {
  if (other != this) {
    std::swap(dirty_, other->dirty_);
    quest_.Swap(&other->quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestCompleteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestCompleteData_descriptor_;
  metadata.reflection = QuestCompleteData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestPairData::kDirtyFieldNumber;
const int QuestPairData::kDataFieldNumber;
#endif  // !_MSC_VER

QuestPairData::QuestPairData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuestPairData)
}

void QuestPairData::InitAsDefaultInstance() {
}

QuestPairData::QuestPairData(const QuestPairData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuestPairData)
}

void QuestPairData::SharedCtor() {
  _cached_size_ = 0;
  dirty_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestPairData::~QuestPairData() {
  // @@protoc_insertion_point(destructor:QuestPairData)
  SharedDtor();
}

void QuestPairData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestPairData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestPairData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestPairData_descriptor_;
}

const QuestPairData& QuestPairData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

QuestPairData* QuestPairData::default_instance_ = NULL;

QuestPairData* QuestPairData::New() const {
  return new QuestPairData;
}

void QuestPairData::Clear() {
  dirty_ = false;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestPairData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuestPairData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dirty = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .II_PairData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuestPairData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuestPairData)
  return false;
#undef DO_
}

void QuestPairData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuestPairData)
  // optional bool dirty = 1;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dirty(), output);
  }

  // repeated .II_PairData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuestPairData)
}

::google::protobuf::uint8* QuestPairData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuestPairData)
  // optional bool dirty = 1;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dirty(), target);
  }

  // repeated .II_PairData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuestPairData)
  return target;
}

int QuestPairData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool dirty = 1;
    if (has_dirty()) {
      total_size += 1 + 1;
    }

  }
  // repeated .II_PairData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestPairData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestPairData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestPairData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestPairData::MergeFrom(const QuestPairData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestPairData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestPairData::CopyFrom(const QuestPairData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestPairData::IsInitialized() const {

  return true;
}

void QuestPairData::Swap(QuestPairData* other) {
  if (other != this) {
    std::swap(dirty_, other->dirty_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestPairData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestPairData_descriptor_;
  metadata.reflection = QuestPairData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestId::kQuestidFieldNumber;
const int QuestId::kSubidFieldNumber;
#endif  // !_MSC_VER

QuestId::QuestId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuestId)
}

void QuestId::InitAsDefaultInstance() {
}

QuestId::QuestId(const QuestId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuestId)
}

void QuestId::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestId::~QuestId() {
  // @@protoc_insertion_point(destructor:QuestId)
  SharedDtor();
}

void QuestId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestId_descriptor_;
}

const QuestId& QuestId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

QuestId* QuestId::default_instance_ = NULL;

QuestId* QuestId::New() const {
  return new QuestId;
}

void QuestId::Clear() {
  questid_ = 0u;
  subid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuestId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subid;
        break;
      }

      // repeated uint32 subid = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_subid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_subid())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_subid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuestId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuestId)
  return false;
#undef DO_
}

void QuestId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuestId)
  // optional uint32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // repeated uint32 subid = 2 [packed = true];
  if (this->subid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_subid_cached_byte_size_);
  }
  for (int i = 0; i < this->subid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->subid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuestId)
}

::google::protobuf::uint8* QuestId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuestId)
  // optional uint32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // repeated uint32 subid = 2 [packed = true];
  if (this->subid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _subid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->subid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->subid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuestId)
  return target;
}

int QuestId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

  }
  // repeated uint32 subid = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->subid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->subid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _subid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestId::MergeFrom(const QuestId& from) {
  GOOGLE_CHECK_NE(&from, this);
  subid_.MergeFrom(from.subid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestId::CopyFrom(const QuestId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestId::IsInitialized() const {

  return true;
}

void QuestId::Swap(QuestId* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    subid_.Swap(&other->subid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestId_descriptor_;
  metadata.reflection = QuestId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinarySaveQuest::kQuestsdataFieldNumber;
const int BinarySaveQuest::kCompletedquestsFieldNumber;
const int BinarySaveQuest::kGlobleQuestVarsFieldNumber;
const int BinarySaveQuest::kDailyQuestsCompletedFieldNumber;
const int BinarySaveQuest::kCycleQuestsCompletedFieldNumber;
const int BinarySaveQuest::kCancelquestidFieldNumber;
#endif  // !_MSC_VER

BinarySaveQuest::BinarySaveQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinarySaveQuest)
}

void BinarySaveQuest::InitAsDefaultInstance() {
  questsdata_ = const_cast< ::DoingQuestData*>(&::DoingQuestData::default_instance());
  completedquests_ = const_cast< ::QuestCompleteData*>(&::QuestCompleteData::default_instance());
  globlequestvars_ = const_cast< ::QuestPairData*>(&::QuestPairData::default_instance());
  dailyquestscompleted_ = const_cast< ::QuestPairData*>(&::QuestPairData::default_instance());
  cyclequestscompleted_ = const_cast< ::QuestPairData*>(&::QuestPairData::default_instance());
}

BinarySaveQuest::BinarySaveQuest(const BinarySaveQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BinarySaveQuest)
}

void BinarySaveQuest::SharedCtor() {
  _cached_size_ = 0;
  questsdata_ = NULL;
  completedquests_ = NULL;
  globlequestvars_ = NULL;
  dailyquestscompleted_ = NULL;
  cyclequestscompleted_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinarySaveQuest::~BinarySaveQuest() {
  // @@protoc_insertion_point(destructor:BinarySaveQuest)
  SharedDtor();
}

void BinarySaveQuest::SharedDtor() {
  if (this != default_instance_) {
    delete questsdata_;
    delete completedquests_;
    delete globlequestvars_;
    delete dailyquestscompleted_;
    delete cyclequestscompleted_;
  }
}

void BinarySaveQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinarySaveQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinarySaveQuest_descriptor_;
}

const BinarySaveQuest& BinarySaveQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BinarySaveQuest* BinarySaveQuest::default_instance_ = NULL;

BinarySaveQuest* BinarySaveQuest::New() const {
  return new BinarySaveQuest;
}

void BinarySaveQuest::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_questsdata()) {
      if (questsdata_ != NULL) questsdata_->::DoingQuestData::Clear();
    }
    if (has_completedquests()) {
      if (completedquests_ != NULL) completedquests_->::QuestCompleteData::Clear();
    }
    if (has_globlequestvars()) {
      if (globlequestvars_ != NULL) globlequestvars_->::QuestPairData::Clear();
    }
    if (has_dailyquestscompleted()) {
      if (dailyquestscompleted_ != NULL) dailyquestscompleted_->::QuestPairData::Clear();
    }
    if (has_cyclequestscompleted()) {
      if (cyclequestscompleted_ != NULL) cyclequestscompleted_->::QuestPairData::Clear();
    }
  }
  cancelquestid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinarySaveQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinarySaveQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DoingQuestData questsdata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questsdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_completedquests;
        break;
      }

      // optional .QuestCompleteData completedquests = 2;
      case 2: {
        if (tag == 18) {
         parse_completedquests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_completedquests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_globleQuestVars;
        break;
      }

      // optional .QuestPairData globleQuestVars = 3;
      case 3: {
        if (tag == 26) {
         parse_globleQuestVars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globlequestvars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dailyQuestsCompleted;
        break;
      }

      // optional .QuestPairData dailyQuestsCompleted = 4;
      case 4: {
        if (tag == 34) {
         parse_dailyQuestsCompleted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyquestscompleted()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cycleQuestsCompleted;
        break;
      }

      // optional .QuestPairData cycleQuestsCompleted = 5;
      case 5: {
        if (tag == 42) {
         parse_cycleQuestsCompleted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cyclequestscompleted()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cancelquestid;
        break;
      }

      // repeated .QuestId cancelquestid = 6;
      case 6: {
        if (tag == 50) {
         parse_cancelquestid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cancelquestid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cancelquestid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinarySaveQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinarySaveQuest)
  return false;
#undef DO_
}

void BinarySaveQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinarySaveQuest)
  // optional .DoingQuestData questsdata = 1;
  if (has_questsdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->questsdata(), output);
  }

  // optional .QuestCompleteData completedquests = 2;
  if (has_completedquests()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->completedquests(), output);
  }

  // optional .QuestPairData globleQuestVars = 3;
  if (has_globlequestvars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->globlequestvars(), output);
  }

  // optional .QuestPairData dailyQuestsCompleted = 4;
  if (has_dailyquestscompleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dailyquestscompleted(), output);
  }

  // optional .QuestPairData cycleQuestsCompleted = 5;
  if (has_cyclequestscompleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cyclequestscompleted(), output);
  }

  // repeated .QuestId cancelquestid = 6;
  for (int i = 0; i < this->cancelquestid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cancelquestid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinarySaveQuest)
}

::google::protobuf::uint8* BinarySaveQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinarySaveQuest)
  // optional .DoingQuestData questsdata = 1;
  if (has_questsdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->questsdata(), target);
  }

  // optional .QuestCompleteData completedquests = 2;
  if (has_completedquests()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->completedquests(), target);
  }

  // optional .QuestPairData globleQuestVars = 3;
  if (has_globlequestvars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->globlequestvars(), target);
  }

  // optional .QuestPairData dailyQuestsCompleted = 4;
  if (has_dailyquestscompleted()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dailyquestscompleted(), target);
  }

  // optional .QuestPairData cycleQuestsCompleted = 5;
  if (has_cyclequestscompleted()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cyclequestscompleted(), target);
  }

  // repeated .QuestId cancelquestid = 6;
  for (int i = 0; i < this->cancelquestid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cancelquestid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinarySaveQuest)
  return target;
}

int BinarySaveQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DoingQuestData questsdata = 1;
    if (has_questsdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questsdata());
    }

    // optional .QuestCompleteData completedquests = 2;
    if (has_completedquests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->completedquests());
    }

    // optional .QuestPairData globleQuestVars = 3;
    if (has_globlequestvars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->globlequestvars());
    }

    // optional .QuestPairData dailyQuestsCompleted = 4;
    if (has_dailyquestscompleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyquestscompleted());
    }

    // optional .QuestPairData cycleQuestsCompleted = 5;
    if (has_cyclequestscompleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cyclequestscompleted());
    }

  }
  // repeated .QuestId cancelquestid = 6;
  total_size += 1 * this->cancelquestid_size();
  for (int i = 0; i < this->cancelquestid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cancelquestid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinarySaveQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinarySaveQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinarySaveQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinarySaveQuest::MergeFrom(const BinarySaveQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  cancelquestid_.MergeFrom(from.cancelquestid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questsdata()) {
      mutable_questsdata()->::DoingQuestData::MergeFrom(from.questsdata());
    }
    if (from.has_completedquests()) {
      mutable_completedquests()->::QuestCompleteData::MergeFrom(from.completedquests());
    }
    if (from.has_globlequestvars()) {
      mutable_globlequestvars()->::QuestPairData::MergeFrom(from.globlequestvars());
    }
    if (from.has_dailyquestscompleted()) {
      mutable_dailyquestscompleted()->::QuestPairData::MergeFrom(from.dailyquestscompleted());
    }
    if (from.has_cyclequestscompleted()) {
      mutable_cyclequestscompleted()->::QuestPairData::MergeFrom(from.cyclequestscompleted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinarySaveQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinarySaveQuest::CopyFrom(const BinarySaveQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinarySaveQuest::IsInitialized() const {

  return true;
}

void BinarySaveQuest::Swap(BinarySaveQuest* other) {
  if (other != this) {
    std::swap(questsdata_, other->questsdata_);
    std::swap(completedquests_, other->completedquests_);
    std::swap(globlequestvars_, other->globlequestvars_);
    std::swap(dailyquestscompleted_, other->dailyquestscompleted_);
    std::swap(cyclequestscompleted_, other->cyclequestscompleted_);
    cancelquestid_.Swap(&other->cancelquestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinarySaveQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinarySaveQuest_descriptor_;
  metadata.reflection = BinarySaveQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeEquipAccType::kIdFieldNumber;
const int ChangeEquipAccType::kTypeFieldNumber;
const int ChangeEquipAccType::kIndexFieldNumber;
#endif  // !_MSC_VER

ChangeEquipAccType::ChangeEquipAccType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChangeEquipAccType)
}

void ChangeEquipAccType::InitAsDefaultInstance() {
}

ChangeEquipAccType::ChangeEquipAccType(const ChangeEquipAccType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChangeEquipAccType)
}

void ChangeEquipAccType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeEquipAccType::~ChangeEquipAccType() {
  // @@protoc_insertion_point(destructor:ChangeEquipAccType)
  SharedDtor();
}

void ChangeEquipAccType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeEquipAccType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeEquipAccType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeEquipAccType_descriptor_;
}

const ChangeEquipAccType& ChangeEquipAccType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ChangeEquipAccType* ChangeEquipAccType::default_instance_ = NULL;

ChangeEquipAccType* ChangeEquipAccType::New() const {
  return new ChangeEquipAccType;
}

void ChangeEquipAccType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeEquipAccType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeEquipAccType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChangeEquipAccType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChangeEquipAccType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChangeEquipAccType)
  return false;
#undef DO_
}

void ChangeEquipAccType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChangeEquipAccType)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChangeEquipAccType)
}

::google::protobuf::uint8* ChangeEquipAccType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeEquipAccType)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeEquipAccType)
  return target;
}

int ChangeEquipAccType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeEquipAccType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeEquipAccType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeEquipAccType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeEquipAccType::MergeFrom(const ChangeEquipAccType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeEquipAccType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeEquipAccType::CopyFrom(const ChangeEquipAccType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeEquipAccType::IsInitialized() const {

  return true;
}

void ChangeEquipAccType::Swap(ChangeEquipAccType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeEquipAccType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeEquipAccType_descriptor_;
  metadata.reflection = ChangeEquipAccType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeEquip_stCE::kXFieldNumber;
const int ChangeEquip_stCE::kYFieldNumber;
const int ChangeEquip_stCE::kIdFieldNumber;
#endif  // !_MSC_VER

ChangeEquip_stCE::ChangeEquip_stCE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChangeEquip.stCE)
}

void ChangeEquip_stCE::InitAsDefaultInstance() {
}

ChangeEquip_stCE::ChangeEquip_stCE(const ChangeEquip_stCE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChangeEquip.stCE)
}

void ChangeEquip_stCE::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeEquip_stCE::~ChangeEquip_stCE() {
  // @@protoc_insertion_point(destructor:ChangeEquip.stCE)
  SharedDtor();
}

void ChangeEquip_stCE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeEquip_stCE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeEquip_stCE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeEquip_stCE_descriptor_;
}

const ChangeEquip_stCE& ChangeEquip_stCE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ChangeEquip_stCE* ChangeEquip_stCE::default_instance_ = NULL;

ChangeEquip_stCE* ChangeEquip_stCE::New() const {
  return new ChangeEquip_stCE;
}

void ChangeEquip_stCE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeEquip_stCE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeEquip_stCE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChangeEquip.stCE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChangeEquip.stCE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChangeEquip.stCE)
  return false;
#undef DO_
}

void ChangeEquip_stCE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChangeEquip.stCE)
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChangeEquip.stCE)
}

::google::protobuf::uint8* ChangeEquip_stCE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeEquip.stCE)
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeEquip.stCE)
  return target;
}

int ChangeEquip_stCE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeEquip_stCE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeEquip_stCE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeEquip_stCE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeEquip_stCE::MergeFrom(const ChangeEquip_stCE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeEquip_stCE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeEquip_stCE::CopyFrom(const ChangeEquip_stCE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeEquip_stCE::IsInitialized() const {

  return true;
}

void ChangeEquip_stCE::Swap(ChangeEquip_stCE* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeEquip_stCE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeEquip_stCE_descriptor_;
  metadata.reflection = ChangeEquip_stCE_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChangeEquip::kIndexFieldNumber;
const int ChangeEquip::kChangeEquipsFieldNumber;
const int ChangeEquip::kChangeEquipAccsFieldNumber;
#endif  // !_MSC_VER

ChangeEquip::ChangeEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChangeEquip)
}

void ChangeEquip::InitAsDefaultInstance() {
}

ChangeEquip::ChangeEquip(const ChangeEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChangeEquip)
}

void ChangeEquip::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeEquip::~ChangeEquip() {
  // @@protoc_insertion_point(destructor:ChangeEquip)
  SharedDtor();
}

void ChangeEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeEquip_descriptor_;
}

const ChangeEquip& ChangeEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ChangeEquip* ChangeEquip::default_instance_ = NULL;

ChangeEquip* ChangeEquip::New() const {
  return new ChangeEquip;
}

void ChangeEquip::Clear() {
  index_ = 0u;
  changeequips_.Clear();
  changeequipaccs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChangeEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_changeEquips;
        break;
      }

      // repeated .ChangeEquip.stCE changeEquips = 2;
      case 2: {
        if (tag == 18) {
         parse_changeEquips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changeequips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_changeEquips;
        if (input->ExpectTag(26)) goto parse_changeEquipAccs;
        break;
      }

      // repeated .ChangeEquipAccType changeEquipAccs = 3;
      case 3: {
        if (tag == 26) {
         parse_changeEquipAccs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changeequipaccs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_changeEquipAccs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChangeEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChangeEquip)
  return false;
#undef DO_
}

void ChangeEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChangeEquip)
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // repeated .ChangeEquip.stCE changeEquips = 2;
  for (int i = 0; i < this->changeequips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->changeequips(i), output);
  }

  // repeated .ChangeEquipAccType changeEquipAccs = 3;
  for (int i = 0; i < this->changeequipaccs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->changeequipaccs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChangeEquip)
}

::google::protobuf::uint8* ChangeEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeEquip)
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // repeated .ChangeEquip.stCE changeEquips = 2;
  for (int i = 0; i < this->changeequips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->changeequips(i), target);
  }

  // repeated .ChangeEquipAccType changeEquipAccs = 3;
  for (int i = 0; i < this->changeequipaccs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->changeequipaccs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeEquip)
  return target;
}

int ChangeEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated .ChangeEquip.stCE changeEquips = 2;
  total_size += 1 * this->changeequips_size();
  for (int i = 0; i < this->changeequips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changeequips(i));
  }

  // repeated .ChangeEquipAccType changeEquipAccs = 3;
  total_size += 1 * this->changeequipaccs_size();
  for (int i = 0; i < this->changeequipaccs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changeequipaccs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeEquip::MergeFrom(const ChangeEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeequips_.MergeFrom(from.changeequips_);
  changeequipaccs_.MergeFrom(from.changeequipaccs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeEquip::CopyFrom(const ChangeEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeEquip::IsInitialized() const {

  return true;
}

void ChangeEquip::Swap(ChangeEquip* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    changeequips_.Swap(&other->changeequips_);
    changeequipaccs_.Swap(&other->changeequipaccs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeEquip_descriptor_;
  metadata.reflection = ChangeEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stChangeEquip::kIndexFieldNumber;
const int stChangeEquip::kEquipIDFieldNumber;
const int stChangeEquip::kAccKeyIDFieldNumber;
#endif  // !_MSC_VER

stChangeEquip::stChangeEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stChangeEquip)
}

void stChangeEquip::InitAsDefaultInstance() {
}

stChangeEquip::stChangeEquip(const stChangeEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stChangeEquip)
}

void stChangeEquip::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChangeEquip::~stChangeEquip() {
  // @@protoc_insertion_point(destructor:stChangeEquip)
  SharedDtor();
}

void stChangeEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChangeEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChangeEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeEquip_descriptor_;
}

const stChangeEquip& stChangeEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stChangeEquip* stChangeEquip::default_instance_ = NULL;

stChangeEquip* stChangeEquip::New() const {
  return new stChangeEquip;
}

void stChangeEquip::Clear() {
  index_ = 0u;
  equipid_.Clear();
  acckeyid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChangeEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stChangeEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipID;
        break;
      }

      // repeated uint32 equipID = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_equipID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equipid())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_equipid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accKeyID;
        break;
      }

      // repeated .ChangeEquipAccType accKeyID = 3;
      case 3: {
        if (tag == 26) {
         parse_accKeyID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acckeyid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accKeyID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stChangeEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stChangeEquip)
  return false;
#undef DO_
}

void stChangeEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stChangeEquip)
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // repeated uint32 equipID = 2 [packed = true];
  if (this->equipid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_equipid_cached_byte_size_);
  }
  for (int i = 0; i < this->equipid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->equipid(i), output);
  }

  // repeated .ChangeEquipAccType accKeyID = 3;
  for (int i = 0; i < this->acckeyid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->acckeyid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stChangeEquip)
}

::google::protobuf::uint8* stChangeEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stChangeEquip)
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // repeated uint32 equipID = 2 [packed = true];
  if (this->equipid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _equipid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->equipid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->equipid(i), target);
  }

  // repeated .ChangeEquipAccType accKeyID = 3;
  for (int i = 0; i < this->acckeyid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->acckeyid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stChangeEquip)
  return target;
}

int stChangeEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated uint32 equipID = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->equipid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equipid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _equipid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .ChangeEquipAccType accKeyID = 3;
  total_size += 1 * this->acckeyid_size();
  for (int i = 0; i < this->acckeyid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acckeyid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChangeEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChangeEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChangeEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChangeEquip::MergeFrom(const stChangeEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipid_.MergeFrom(from.equipid_);
  acckeyid_.MergeFrom(from.acckeyid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChangeEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChangeEquip::CopyFrom(const stChangeEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChangeEquip::IsInitialized() const {

  return true;
}

void stChangeEquip::Swap(stChangeEquip* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    equipid_.Swap(&other->equipid_);
    acckeyid_.Swap(&other->acckeyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChangeEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChangeEquip_descriptor_;
  metadata.reflection = stChangeEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalismanStar_Prop::kKeyFieldNumber;
const int TalismanStar_Prop::kValueFieldNumber;
const int TalismanStar_Prop::kStarFieldNumber;
#endif  // !_MSC_VER

TalismanStar_Prop::TalismanStar_Prop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TalismanStar.Prop)
}

void TalismanStar_Prop::InitAsDefaultInstance() {
}

TalismanStar_Prop::TalismanStar_Prop(const TalismanStar_Prop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TalismanStar.Prop)
}

void TalismanStar_Prop::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalismanStar_Prop::~TalismanStar_Prop() {
  // @@protoc_insertion_point(destructor:TalismanStar.Prop)
  SharedDtor();
}

void TalismanStar_Prop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalismanStar_Prop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalismanStar_Prop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalismanStar_Prop_descriptor_;
}

const TalismanStar_Prop& TalismanStar_Prop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TalismanStar_Prop* TalismanStar_Prop::default_instance_ = NULL;

TalismanStar_Prop* TalismanStar_Prop::New() const {
  return new TalismanStar_Prop;
}

void TalismanStar_Prop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TalismanStar_Prop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalismanStar_Prop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TalismanStar.Prop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (tag == 24) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TalismanStar.Prop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TalismanStar.Prop)
  return false;
#undef DO_
}

void TalismanStar_Prop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TalismanStar.Prop)
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TalismanStar.Prop)
}

::google::protobuf::uint8* TalismanStar_Prop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TalismanStar.Prop)
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TalismanStar.Prop)
  return target;
}

int TalismanStar_Prop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalismanStar_Prop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalismanStar_Prop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalismanStar_Prop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalismanStar_Prop::MergeFrom(const TalismanStar_Prop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalismanStar_Prop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalismanStar_Prop::CopyFrom(const TalismanStar_Prop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalismanStar_Prop::IsInitialized() const {

  return true;
}

void TalismanStar_Prop::Swap(TalismanStar_Prop* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalismanStar_Prop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalismanStar_Prop_descriptor_;
  metadata.reflection = TalismanStar_Prop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TalismanStar::kPropFieldNumber;
const int TalismanStar::kIndexFieldNumber;
#endif  // !_MSC_VER

TalismanStar::TalismanStar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TalismanStar)
}

void TalismanStar::InitAsDefaultInstance() {
}

TalismanStar::TalismanStar(const TalismanStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TalismanStar)
}

void TalismanStar::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalismanStar::~TalismanStar() {
  // @@protoc_insertion_point(destructor:TalismanStar)
  SharedDtor();
}

void TalismanStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalismanStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalismanStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalismanStar_descriptor_;
}

const TalismanStar& TalismanStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TalismanStar* TalismanStar::default_instance_ = NULL;

TalismanStar* TalismanStar::New() const {
  return new TalismanStar;
}

void TalismanStar::Clear() {
  index_ = 0u;
  prop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalismanStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TalismanStar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TalismanStar.Prop prop = 1;
      case 1: {
        if (tag == 10) {
         parse_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_prop;
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TalismanStar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TalismanStar)
  return false;
#undef DO_
}

void TalismanStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TalismanStar)
  // repeated .TalismanStar.Prop prop = 1;
  for (int i = 0; i < this->prop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prop(i), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TalismanStar)
}

::google::protobuf::uint8* TalismanStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TalismanStar)
  // repeated .TalismanStar.Prop prop = 1;
  for (int i = 0; i < this->prop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prop(i), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TalismanStar)
  return target;
}

int TalismanStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated .TalismanStar.Prop prop = 1;
  total_size += 1 * this->prop_size();
  for (int i = 0; i < this->prop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalismanStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalismanStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalismanStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalismanStar::MergeFrom(const TalismanStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  prop_.MergeFrom(from.prop_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalismanStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalismanStar::CopyFrom(const TalismanStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalismanStar::IsInitialized() const {

  return true;
}

void TalismanStar::Swap(TalismanStar* other) {
  if (other != this) {
    prop_.Swap(&other->prop_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalismanStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalismanStar_descriptor_;
  metadata.reflection = TalismanStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalismanData_Skill::kIdFieldNumber;
#endif  // !_MSC_VER

TalismanData_Skill::TalismanData_Skill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TalismanData.Skill)
}

void TalismanData_Skill::InitAsDefaultInstance() {
}

TalismanData_Skill::TalismanData_Skill(const TalismanData_Skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TalismanData.Skill)
}

void TalismanData_Skill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalismanData_Skill::~TalismanData_Skill() {
  // @@protoc_insertion_point(destructor:TalismanData.Skill)
  SharedDtor();
}

void TalismanData_Skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalismanData_Skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalismanData_Skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalismanData_Skill_descriptor_;
}

const TalismanData_Skill& TalismanData_Skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TalismanData_Skill* TalismanData_Skill::default_instance_ = NULL;

TalismanData_Skill* TalismanData_Skill::New() const {
  return new TalismanData_Skill;
}

void TalismanData_Skill::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalismanData_Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TalismanData.Skill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TalismanData.Skill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TalismanData.Skill)
  return false;
#undef DO_
}

void TalismanData_Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TalismanData.Skill)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TalismanData.Skill)
}

::google::protobuf::uint8* TalismanData_Skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TalismanData.Skill)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TalismanData.Skill)
  return target;
}

int TalismanData_Skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalismanData_Skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalismanData_Skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalismanData_Skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalismanData_Skill::MergeFrom(const TalismanData_Skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalismanData_Skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalismanData_Skill::CopyFrom(const TalismanData_Skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalismanData_Skill::IsInitialized() const {

  return true;
}

void TalismanData_Skill::Swap(TalismanData_Skill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalismanData_Skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalismanData_Skill_descriptor_;
  metadata.reflection = TalismanData_Skill_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TalismanData::kBorneFieldNumber;
const int TalismanData::kExpFieldNumber;
const int TalismanData::kLevelFieldNumber;
const int TalismanData::kHpFieldNumber;
const int TalismanData::kMpFieldNumber;
const int TalismanData::kAttackFieldNumber;
const int TalismanData::kDefenceFieldNumber;
const int TalismanData::kSkillFieldNumber;
const int TalismanData::kStarFieldNumber;
const int TalismanData::kStarpropFieldNumber;
const int TalismanData::kFreshnumFieldNumber;
#endif  // !_MSC_VER

TalismanData::TalismanData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TalismanData)
}

void TalismanData::InitAsDefaultInstance() {
  starprop_ = const_cast< ::TalismanStar*>(&::TalismanStar::default_instance());
}

TalismanData::TalismanData(const TalismanData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TalismanData)
}

void TalismanData::SharedCtor() {
  _cached_size_ = 0;
  borne_ = false;
  exp_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  hp_ = 0u;
  mp_ = 0u;
  attack_ = 0u;
  defence_ = 0u;
  star_ = 0u;
  starprop_ = NULL;
  freshnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalismanData::~TalismanData() {
  // @@protoc_insertion_point(destructor:TalismanData)
  SharedDtor();
}

void TalismanData::SharedDtor() {
  if (this != default_instance_) {
    delete starprop_;
  }
}

void TalismanData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalismanData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalismanData_descriptor_;
}

const TalismanData& TalismanData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TalismanData* TalismanData::default_instance_ = NULL;

TalismanData* TalismanData::New() const {
  return new TalismanData;
}

void TalismanData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TalismanData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(exp_, defence_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(star_, freshnum_);
    if (has_starprop()) {
      if (starprop_ != NULL) starprop_->::TalismanStar::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalismanData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TalismanData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool borne = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &borne_)));
          set_has_borne();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 2;
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 4;
      case 4: {
        if (tag == 32) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 5;
      case 5: {
        if (tag == 40) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attack;
        break;
      }

      // optional uint32 attack = 6;
      case 6: {
        if (tag == 48) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_defence;
        break;
      }

      // optional uint32 defence = 7;
      case 7: {
        if (tag == 56) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_skill;
        break;
      }

      // repeated .TalismanData.Skill skill = 9;
      case 9: {
        if (tag == 74) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_skill;
        if (input->ExpectTag(80)) goto parse_star;
        break;
      }

      // optional uint32 star = 10;
      case 10: {
        if (tag == 80) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_starprop;
        break;
      }

      // optional .TalismanStar starprop = 11;
      case 11: {
        if (tag == 90) {
         parse_starprop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starprop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_freshnum;
        break;
      }

      // optional uint32 freshnum = 12;
      case 12: {
        if (tag == 96) {
         parse_freshnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freshnum_)));
          set_has_freshnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TalismanData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TalismanData)
  return false;
#undef DO_
}

void TalismanData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TalismanData)
  // optional bool borne = 1;
  if (has_borne()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->borne(), output);
  }

  // optional uint64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exp(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hp(), output);
  }

  // optional uint32 mp = 5;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mp(), output);
  }

  // optional uint32 attack = 6;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attack(), output);
  }

  // optional uint32 defence = 7;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->defence(), output);
  }

  // repeated .TalismanData.Skill skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skill(i), output);
  }

  // optional uint32 star = 10;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->star(), output);
  }

  // optional .TalismanStar starprop = 11;
  if (has_starprop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->starprop(), output);
  }

  // optional uint32 freshnum = 12;
  if (has_freshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->freshnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TalismanData)
}

::google::protobuf::uint8* TalismanData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TalismanData)
  // optional bool borne = 1;
  if (has_borne()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->borne(), target);
  }

  // optional uint64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->exp(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hp(), target);
  }

  // optional uint32 mp = 5;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mp(), target);
  }

  // optional uint32 attack = 6;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->attack(), target);
  }

  // optional uint32 defence = 7;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->defence(), target);
  }

  // repeated .TalismanData.Skill skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->skill(i), target);
  }

  // optional uint32 star = 10;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->star(), target);
  }

  // optional .TalismanStar starprop = 11;
  if (has_starprop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->starprop(), target);
  }

  // optional uint32 freshnum = 12;
  if (has_freshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->freshnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TalismanData)
  return target;
}

int TalismanData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool borne = 1;
    if (has_borne()) {
      total_size += 1 + 1;
    }

    // optional uint64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 mp = 5;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 attack = 6;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }

    // optional uint32 defence = 7;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defence());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 star = 10;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional .TalismanStar starprop = 11;
    if (has_starprop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starprop());
    }

    // optional uint32 freshnum = 12;
    if (has_freshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freshnum());
    }

  }
  // repeated .TalismanData.Skill skill = 9;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalismanData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalismanData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalismanData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalismanData::MergeFrom(const TalismanData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_borne()) {
      set_borne(from.borne());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_starprop()) {
      mutable_starprop()->::TalismanStar::MergeFrom(from.starprop());
    }
    if (from.has_freshnum()) {
      set_freshnum(from.freshnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalismanData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalismanData::CopyFrom(const TalismanData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalismanData::IsInitialized() const {

  return true;
}

void TalismanData::Swap(TalismanData* other) {
  if (other != this) {
    std::swap(borne_, other->borne_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    skill_.Swap(&other->skill_);
    std::swap(star_, other->star_);
    std::swap(starprop_, other->starprop_);
    std::swap(freshnum_, other->freshnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalismanData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalismanData_descriptor_;
  metadata.reflection = TalismanData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScenePetAutoFun::kCanAutoPickupFieldNumber;
const int ScenePetAutoFun::kCanAutoAddHpMpFieldNumber;
const int ScenePetAutoFun::kLessHpPerFieldNumber;
const int ScenePetAutoFun::kUseHpObjFieldNumber;
const int ScenePetAutoFun::kLessMpPerFieldNumber;
const int ScenePetAutoFun::kUseMpObjFieldNumber;
const int ScenePetAutoFun::kUsePetHpObjFieldNumber;
const int ScenePetAutoFun::kLessPetHpPerFieldNumber;
#endif  // !_MSC_VER

ScenePetAutoFun::ScenePetAutoFun()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScenePetAutoFun)
}

void ScenePetAutoFun::InitAsDefaultInstance() {
}

ScenePetAutoFun::ScenePetAutoFun(const ScenePetAutoFun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScenePetAutoFun)
}

void ScenePetAutoFun::SharedCtor() {
  _cached_size_ = 0;
  canautopickup_ = false;
  canautoaddhpmp_ = false;
  lesshpper_ = 0u;
  usehpobj_ = 0u;
  lessmpper_ = 0u;
  usempobj_ = 0u;
  usepethpobj_ = 0u;
  lesspethpper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenePetAutoFun::~ScenePetAutoFun() {
  // @@protoc_insertion_point(destructor:ScenePetAutoFun)
  SharedDtor();
}

void ScenePetAutoFun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScenePetAutoFun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePetAutoFun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenePetAutoFun_descriptor_;
}

const ScenePetAutoFun& ScenePetAutoFun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ScenePetAutoFun* ScenePetAutoFun::default_instance_ = NULL;

ScenePetAutoFun* ScenePetAutoFun::New() const {
  return new ScenePetAutoFun;
}

void ScenePetAutoFun::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScenePetAutoFun*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(canautopickup_, lesspethpper_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScenePetAutoFun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScenePetAutoFun)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool canAutoPickup = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canautopickup_)));
          set_has_canautopickup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_canAutoAddHpMp;
        break;
      }

      // optional bool canAutoAddHpMp = 2;
      case 2: {
        if (tag == 16) {
         parse_canAutoAddHpMp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canautoaddhpmp_)));
          set_has_canautoaddhpmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lessHpPer;
        break;
      }

      // optional uint32 lessHpPer = 3;
      case 3: {
        if (tag == 24) {
         parse_lessHpPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lesshpper_)));
          set_has_lesshpper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_useHpObj;
        break;
      }

      // optional uint32 useHpObj = 4;
      case 4: {
        if (tag == 32) {
         parse_useHpObj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usehpobj_)));
          set_has_usehpobj();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lessMpPer;
        break;
      }

      // optional uint32 lessMpPer = 5;
      case 5: {
        if (tag == 40) {
         parse_lessMpPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lessmpper_)));
          set_has_lessmpper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_useMpObj;
        break;
      }

      // optional uint32 useMpObj = 6;
      case 6: {
        if (tag == 48) {
         parse_useMpObj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usempobj_)));
          set_has_usempobj();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_usePetHpObj;
        break;
      }

      // optional uint32 usePetHpObj = 7;
      case 7: {
        if (tag == 56) {
         parse_usePetHpObj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usepethpobj_)));
          set_has_usepethpobj();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lessPetHpPer;
        break;
      }

      // optional uint32 lessPetHpPer = 8;
      case 8: {
        if (tag == 64) {
         parse_lessPetHpPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lesspethpper_)));
          set_has_lesspethpper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScenePetAutoFun)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScenePetAutoFun)
  return false;
#undef DO_
}

void ScenePetAutoFun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScenePetAutoFun)
  // optional bool canAutoPickup = 1;
  if (has_canautopickup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->canautopickup(), output);
  }

  // optional bool canAutoAddHpMp = 2;
  if (has_canautoaddhpmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->canautoaddhpmp(), output);
  }

  // optional uint32 lessHpPer = 3;
  if (has_lesshpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lesshpper(), output);
  }

  // optional uint32 useHpObj = 4;
  if (has_usehpobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->usehpobj(), output);
  }

  // optional uint32 lessMpPer = 5;
  if (has_lessmpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lessmpper(), output);
  }

  // optional uint32 useMpObj = 6;
  if (has_usempobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->usempobj(), output);
  }

  // optional uint32 usePetHpObj = 7;
  if (has_usepethpobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->usepethpobj(), output);
  }

  // optional uint32 lessPetHpPer = 8;
  if (has_lesspethpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lesspethpper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScenePetAutoFun)
}

::google::protobuf::uint8* ScenePetAutoFun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScenePetAutoFun)
  // optional bool canAutoPickup = 1;
  if (has_canautopickup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->canautopickup(), target);
  }

  // optional bool canAutoAddHpMp = 2;
  if (has_canautoaddhpmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->canautoaddhpmp(), target);
  }

  // optional uint32 lessHpPer = 3;
  if (has_lesshpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lesshpper(), target);
  }

  // optional uint32 useHpObj = 4;
  if (has_usehpobj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->usehpobj(), target);
  }

  // optional uint32 lessMpPer = 5;
  if (has_lessmpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lessmpper(), target);
  }

  // optional uint32 useMpObj = 6;
  if (has_usempobj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->usempobj(), target);
  }

  // optional uint32 usePetHpObj = 7;
  if (has_usepethpobj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->usepethpobj(), target);
  }

  // optional uint32 lessPetHpPer = 8;
  if (has_lesspethpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lesspethpper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScenePetAutoFun)
  return target;
}

int ScenePetAutoFun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool canAutoPickup = 1;
    if (has_canautopickup()) {
      total_size += 1 + 1;
    }

    // optional bool canAutoAddHpMp = 2;
    if (has_canautoaddhpmp()) {
      total_size += 1 + 1;
    }

    // optional uint32 lessHpPer = 3;
    if (has_lesshpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lesshpper());
    }

    // optional uint32 useHpObj = 4;
    if (has_usehpobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usehpobj());
    }

    // optional uint32 lessMpPer = 5;
    if (has_lessmpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lessmpper());
    }

    // optional uint32 useMpObj = 6;
    if (has_usempobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usempobj());
    }

    // optional uint32 usePetHpObj = 7;
    if (has_usepethpobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usepethpobj());
    }

    // optional uint32 lessPetHpPer = 8;
    if (has_lesspethpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lesspethpper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePetAutoFun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScenePetAutoFun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScenePetAutoFun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScenePetAutoFun::MergeFrom(const ScenePetAutoFun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canautopickup()) {
      set_canautopickup(from.canautopickup());
    }
    if (from.has_canautoaddhpmp()) {
      set_canautoaddhpmp(from.canautoaddhpmp());
    }
    if (from.has_lesshpper()) {
      set_lesshpper(from.lesshpper());
    }
    if (from.has_usehpobj()) {
      set_usehpobj(from.usehpobj());
    }
    if (from.has_lessmpper()) {
      set_lessmpper(from.lessmpper());
    }
    if (from.has_usempobj()) {
      set_usempobj(from.usempobj());
    }
    if (from.has_usepethpobj()) {
      set_usepethpobj(from.usepethpobj());
    }
    if (from.has_lesspethpper()) {
      set_lesspethpper(from.lesspethpper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScenePetAutoFun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePetAutoFun::CopyFrom(const ScenePetAutoFun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePetAutoFun::IsInitialized() const {

  return true;
}

void ScenePetAutoFun::Swap(ScenePetAutoFun* other) {
  if (other != this) {
    std::swap(canautopickup_, other->canautopickup_);
    std::swap(canautoaddhpmp_, other->canautoaddhpmp_);
    std::swap(lesshpper_, other->lesshpper_);
    std::swap(usehpobj_, other->usehpobj_);
    std::swap(lessmpper_, other->lessmpper_);
    std::swap(usempobj_, other->usempobj_);
    std::swap(usepethpobj_, other->usepethpobj_);
    std::swap(lesspethpper_, other->lesspethpper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScenePetAutoFun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenePetAutoFun_descriptor_;
  metadata.reflection = ScenePetAutoFun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScenePetSkillData::kPetskillidFieldNumber;
const int ScenePetSkillData::kSkillidFieldNumber;
const int ScenePetSkillData::kSkilllevelFieldNumber;
const int ScenePetSkillData::kUsertypeFieldNumber;
#endif  // !_MSC_VER

ScenePetSkillData::ScenePetSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScenePetSkillData)
}

void ScenePetSkillData::InitAsDefaultInstance() {
}

ScenePetSkillData::ScenePetSkillData(const ScenePetSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScenePetSkillData)
}

void ScenePetSkillData::SharedCtor() {
  _cached_size_ = 0;
  petskillid_ = 0u;
  skillid_ = 0u;
  skilllevel_ = 0u;
  usertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenePetSkillData::~ScenePetSkillData() {
  // @@protoc_insertion_point(destructor:ScenePetSkillData)
  SharedDtor();
}

void ScenePetSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScenePetSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePetSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenePetSkillData_descriptor_;
}

const ScenePetSkillData& ScenePetSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ScenePetSkillData* ScenePetSkillData::default_instance_ = NULL;

ScenePetSkillData* ScenePetSkillData::New() const {
  return new ScenePetSkillData;
}

void ScenePetSkillData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScenePetSkillData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(petskillid_, usertype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScenePetSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScenePetSkillData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 petskillid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petskillid_)));
          set_has_petskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 2;
      case 2: {
        if (tag == 16) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skilllevel;
        break;
      }

      // optional uint32 skilllevel = 3;
      case 3: {
        if (tag == 24) {
         parse_skilllevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_usertype;
        break;
      }

      // optional uint32 usertype = 4;
      case 4: {
        if (tag == 32) {
         parse_usertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usertype_)));
          set_has_usertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScenePetSkillData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScenePetSkillData)
  return false;
#undef DO_
}

void ScenePetSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScenePetSkillData)
  // optional uint32 petskillid = 1;
  if (has_petskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petskillid(), output);
  }

  // optional uint32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional uint32 skilllevel = 3;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skilllevel(), output);
  }

  // optional uint32 usertype = 4;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->usertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScenePetSkillData)
}

::google::protobuf::uint8* ScenePetSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScenePetSkillData)
  // optional uint32 petskillid = 1;
  if (has_petskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petskillid(), target);
  }

  // optional uint32 skillid = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional uint32 skilllevel = 3;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skilllevel(), target);
  }

  // optional uint32 usertype = 4;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->usertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScenePetSkillData)
  return target;
}

int ScenePetSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 petskillid = 1;
    if (has_petskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petskillid());
    }

    // optional uint32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skilllevel = 3;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllevel());
    }

    // optional uint32 usertype = 4;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePetSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScenePetSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScenePetSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScenePetSkillData::MergeFrom(const ScenePetSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petskillid()) {
      set_petskillid(from.petskillid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScenePetSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePetSkillData::CopyFrom(const ScenePetSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePetSkillData::IsInitialized() const {

  return true;
}

void ScenePetSkillData::Swap(ScenePetSkillData* other) {
  if (other != this) {
    std::swap(petskillid_, other->petskillid_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(usertype_, other->usertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScenePetSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenePetSkillData_descriptor_;
  metadata.reflection = ScenePetSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScenePetDoSkill::kUseRateFieldNumber;
const int ScenePetDoSkill::kTargetFieldNumber;
#endif  // !_MSC_VER

ScenePetDoSkill::ScenePetDoSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScenePetDoSkill)
}

void ScenePetDoSkill::InitAsDefaultInstance() {
}

ScenePetDoSkill::ScenePetDoSkill(const ScenePetDoSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScenePetDoSkill)
}

void ScenePetDoSkill::SharedCtor() {
  _cached_size_ = 0;
  userate_ = 0u;
  target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenePetDoSkill::~ScenePetDoSkill() {
  // @@protoc_insertion_point(destructor:ScenePetDoSkill)
  SharedDtor();
}

void ScenePetDoSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScenePetDoSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePetDoSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenePetDoSkill_descriptor_;
}

const ScenePetDoSkill& ScenePetDoSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ScenePetDoSkill* ScenePetDoSkill::default_instance_ = NULL;

ScenePetDoSkill* ScenePetDoSkill::New() const {
  return new ScenePetDoSkill;
}

void ScenePetDoSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScenePetDoSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userate_, target_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScenePetDoSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScenePetDoSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 useRate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userate_)));
          set_has_userate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target;
        break;
      }

      // optional uint32 target = 2;
      case 2: {
        if (tag == 16) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScenePetDoSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScenePetDoSkill)
  return false;
#undef DO_
}

void ScenePetDoSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScenePetDoSkill)
  // optional uint32 useRate = 1;
  if (has_userate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userate(), output);
  }

  // optional uint32 target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScenePetDoSkill)
}

::google::protobuf::uint8* ScenePetDoSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScenePetDoSkill)
  // optional uint32 useRate = 1;
  if (has_userate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userate(), target);
  }

  // optional uint32 target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScenePetDoSkill)
  return target;
}

int ScenePetDoSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 useRate = 1;
    if (has_userate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userate());
    }

    // optional uint32 target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePetDoSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScenePetDoSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScenePetDoSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScenePetDoSkill::MergeFrom(const ScenePetDoSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userate()) {
      set_userate(from.userate());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScenePetDoSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePetDoSkill::CopyFrom(const ScenePetDoSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePetDoSkill::IsInitialized() const {

  return true;
}

void ScenePetDoSkill::Swap(ScenePetDoSkill* other) {
  if (other != this) {
    std::swap(userate_, other->userate_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScenePetDoSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenePetDoSkill_descriptor_;
  metadata.reflection = ScenePetDoSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScenePetData::kBaseIdFieldNumber;
const int ScenePetData::kMasterIdFieldNumber;
const int ScenePetData::kResIdFieldNumber;
const int ScenePetData::kIndexFieldNumber;
const int ScenePetData::kNameFieldNumber;
const int ScenePetData::kLevelFieldNumber;
const int ScenePetData::kUseLevelFieldNumber;
const int ScenePetData::kPetbindFieldNumber;
const int ScenePetData::kEnhanceLevelFieldNumber;
const int ScenePetData::kSexFieldNumber;
const int ScenePetData::kMettleFieldNumber;
const int ScenePetData::kExpFieldNumber;
const int ScenePetData::kHpFieldNumber;
const int ScenePetData::kMaxhpFieldNumber;
const int ScenePetData::kLifeFieldNumber;
const int ScenePetData::kHappyFieldNumber;
const int ScenePetData::kStrengthFieldNumber;
const int ScenePetData::kDexterityFieldNumber;
const int ScenePetData::kMentalityFieldNumber;
const int ScenePetData::kConstitutionFieldNumber;
const int ScenePetData::kGrowupLevelFieldNumber;
const int ScenePetData::kStreAptitudeFieldNumber;
const int ScenePetData::kDextAptitudeFieldNumber;
const int ScenePetData::kMentAptitudeFieldNumber;
const int ScenePetData::kConsAptitudeFieldNumber;
const int ScenePetData::kPmaxAttackFieldNumber;
const int ScenePetData::kMmaxAttackFieldNumber;
const int ScenePetData::kPminAttackFieldNumber;
const int ScenePetData::kMminAttackFieldNumber;
const int ScenePetData::kPDefenceFieldNumber;
const int ScenePetData::kMDefenceFieldNumber;
const int ScenePetData::kHeavyRateFieldNumber;
const int ScenePetData::kLuckyRateFieldNumber;
const int ScenePetData::kAttackSpeedLevelFieldNumber;
const int ScenePetData::kMoveSpeedLevelFieldNumber;
const int ScenePetData::kMemoryExpFieldNumber;
const int ScenePetData::kEquipGridFieldNumber;
const int ScenePetData::kActiveSkillGridFieldNumber;
const int ScenePetData::kSkillFieldNumber;
const int ScenePetData::kActiveskillFieldNumber;
const int ScenePetData::kEquipItemsFieldNumber;
const int ScenePetData::kKillEnemyCountFieldNumber;
const int ScenePetData::kSignFieldNumber;
const int ScenePetData::kKindFieldNumber;
const int ScenePetData::kGrowupFieldNumber;
const int ScenePetData::kFreePointFieldNumber;
const int ScenePetData::kAptitudeLevelFieldNumber;
const int ScenePetData::kActiveskillCooltimeFieldNumber;
const int ScenePetData::kIndentifyGrowupFieldNumber;
const int ScenePetData::kLingqiFieldNumber;
const int ScenePetData::kLingqiattrFieldNumber;
#endif  // !_MSC_VER

ScenePetData::ScenePetData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScenePetData)
}

void ScenePetData::InitAsDefaultInstance() {
}

ScenePetData::ScenePetData(const ScenePetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScenePetData)
}

void ScenePetData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  baseid_ = 0u;
  masterid_ = 0u;
  resid_ = 0u;
  index_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  uselevel_ = 0u;
  petbind_ = false;
  enhancelevel_ = 0u;
  sex_ = 0u;
  mettle_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  hp_ = 0u;
  maxhp_ = 0u;
  life_ = 0u;
  happy_ = 0u;
  strength_ = 0u;
  dexterity_ = 0u;
  mentality_ = 0u;
  constitution_ = 0u;
  growuplevel_ = 0u;
  streaptitude_ = 0u;
  dextaptitude_ = 0u;
  mentaptitude_ = 0u;
  consaptitude_ = 0u;
  pmaxattack_ = 0u;
  mmaxattack_ = 0u;
  pminattack_ = 0u;
  mminattack_ = 0u;
  pdefence_ = 0u;
  mdefence_ = 0u;
  heavyrate_ = 0u;
  luckyrate_ = 0u;
  attackspeedlevel_ = 0u;
  movespeedlevel_ = 0u;
  memory_exp_ = GOOGLE_ULONGLONG(0);
  equipgrid_ = 0u;
  activeskillgrid_ = 0u;
  killenemycount_ = 0u;
  kind_ = 0u;
  growup_ = 0u;
  freepoint_ = 0u;
  aptitudelevel_ = 0u;
  activeskill_cooltime_ = 0u;
  indentify_growup_ = false;
  lingqi_ = 0u;
  lingqiattr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenePetData::~ScenePetData() {
  // @@protoc_insertion_point(destructor:ScenePetData)
  SharedDtor();
}

void ScenePetData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ScenePetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenePetData_descriptor_;
}

const ScenePetData& ScenePetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ScenePetData* ScenePetData::default_instance_ = NULL;

ScenePetData* ScenePetData::New() const {
  return new ScenePetData;
}

void ScenePetData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScenePetData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(baseid_, index_);
    ZR_(level_, uselevel_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    petbind_ = false;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(enhancelevel_, happy_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(strength_, mentaptitude_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(consaptitude_, pminattack_);
    ZR_(mminattack_, heavyrate_);
  }
  if (_has_bits_[32 / 32] & 63) {
    ZR_(luckyrate_, equipgrid_);
    activeskillgrid_ = 0u;
  }
  if (_has_bits_[40 / 32] & 64000) {
    ZR_(kind_, activeskill_cooltime_);
    killenemycount_ = 0u;
  }
  if (_has_bits_[48 / 32] & 458752) {
    ZR_(lingqi_, lingqiattr_);
    indentify_growup_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skill_.Clear();
  activeskill_.Clear();
  equipitems_.Clear();
  sign_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScenePetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScenePetData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 baseId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseid_)));
          set_has_baseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_masterId;
        break;
      }

      // optional uint32 masterId = 2;
      case 2: {
        if (tag == 16) {
         parse_masterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resId;
        break;
      }

      // optional uint32 resId = 3;
      case 3: {
        if (tag == 24) {
         parse_resId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_useLevel;
        break;
      }

      // optional uint32 useLevel = 7;
      case 7: {
        if (tag == 56) {
         parse_useLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uselevel_)));
          set_has_uselevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_petbind;
        break;
      }

      // optional bool petbind = 8;
      case 8: {
        if (tag == 64) {
         parse_petbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &petbind_)));
          set_has_petbind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_enhanceLevel;
        break;
      }

      // optional uint32 enhanceLevel = 9;
      case 9: {
        if (tag == 72) {
         parse_enhanceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhancelevel_)));
          set_has_enhancelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 11;
      case 11: {
        if (tag == 88) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mettle;
        break;
      }

      // optional uint32 mettle = 12;
      case 12: {
        if (tag == 96) {
         parse_mettle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mettle_)));
          set_has_mettle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 13;
      case 13: {
        if (tag == 104) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 14;
      case 14: {
        if (tag == 112) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_maxhp;
        break;
      }

      // optional uint32 maxhp = 15;
      case 15: {
        if (tag == 120) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_life;
        break;
      }

      // optional uint32 life = 16;
      case 16: {
        if (tag == 128) {
         parse_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_)));
          set_has_life();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_happy;
        break;
      }

      // optional uint32 happy = 17;
      case 17: {
        if (tag == 136) {
         parse_happy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &happy_)));
          set_has_happy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_strength;
        break;
      }

      // optional uint32 strength = 18;
      case 18: {
        if (tag == 144) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_dexterity;
        break;
      }

      // optional uint32 dexterity = 19;
      case 19: {
        if (tag == 152) {
         parse_dexterity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dexterity_)));
          set_has_dexterity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_mentality;
        break;
      }

      // optional uint32 mentality = 20;
      case 20: {
        if (tag == 160) {
         parse_mentality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mentality_)));
          set_has_mentality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_constitution;
        break;
      }

      // optional uint32 constitution = 21;
      case 21: {
        if (tag == 168) {
         parse_constitution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constitution_)));
          set_has_constitution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_growupLevel;
        break;
      }

      // optional uint32 growupLevel = 22;
      case 22: {
        if (tag == 176) {
         parse_growupLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growuplevel_)));
          set_has_growuplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_streAptitude;
        break;
      }

      // optional uint32 streAptitude = 23;
      case 23: {
        if (tag == 184) {
         parse_streAptitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streaptitude_)));
          set_has_streaptitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_dextAptitude;
        break;
      }

      // optional uint32 dextAptitude = 24;
      case 24: {
        if (tag == 192) {
         parse_dextAptitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dextaptitude_)));
          set_has_dextaptitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_mentAptitude;
        break;
      }

      // optional uint32 mentAptitude = 25;
      case 25: {
        if (tag == 200) {
         parse_mentAptitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mentaptitude_)));
          set_has_mentaptitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_consAptitude;
        break;
      }

      // optional uint32 consAptitude = 26;
      case 26: {
        if (tag == 208) {
         parse_consAptitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consaptitude_)));
          set_has_consaptitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_pmaxAttack;
        break;
      }

      // optional uint32 pmaxAttack = 27;
      case 27: {
        if (tag == 216) {
         parse_pmaxAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pmaxattack_)));
          set_has_pmaxattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_mmaxAttack;
        break;
      }

      // optional uint32 mmaxAttack = 28;
      case 28: {
        if (tag == 224) {
         parse_mmaxAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mmaxattack_)));
          set_has_mmaxattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_pminAttack;
        break;
      }

      // optional uint32 pminAttack = 29;
      case 29: {
        if (tag == 232) {
         parse_pminAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pminattack_)));
          set_has_pminattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_mminAttack;
        break;
      }

      // optional uint32 mminAttack = 30;
      case 30: {
        if (tag == 240) {
         parse_mminAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mminattack_)));
          set_has_mminattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_pDefence;
        break;
      }

      // optional uint32 pDefence = 31;
      case 31: {
        if (tag == 248) {
         parse_pDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdefence_)));
          set_has_pdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_mDefence;
        break;
      }

      // optional uint32 mDefence = 32;
      case 32: {
        if (tag == 256) {
         parse_mDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdefence_)));
          set_has_mdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_heavyRate;
        break;
      }

      // optional uint32 heavyRate = 33;
      case 33: {
        if (tag == 264) {
         parse_heavyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heavyrate_)));
          set_has_heavyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_luckyRate;
        break;
      }

      // optional uint32 luckyRate = 34;
      case 34: {
        if (tag == 272) {
         parse_luckyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckyrate_)));
          set_has_luckyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_attackSpeedLevel;
        break;
      }

      // optional uint32 attackSpeedLevel = 35;
      case 35: {
        if (tag == 280) {
         parse_attackSpeedLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackspeedlevel_)));
          set_has_attackspeedlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_moveSpeedLevel;
        break;
      }

      // optional uint32 moveSpeedLevel = 36;
      case 36: {
        if (tag == 288) {
         parse_moveSpeedLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeedlevel_)));
          set_has_movespeedlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_memory_exp;
        break;
      }

      // optional uint64 memory_exp = 37;
      case 37: {
        if (tag == 296) {
         parse_memory_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_exp_)));
          set_has_memory_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_equipGrid;
        break;
      }

      // optional uint32 equipGrid = 40;
      case 40: {
        if (tag == 320) {
         parse_equipGrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipgrid_)));
          set_has_equipgrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_activeSkillGrid;
        break;
      }

      // optional uint32 activeSkillGrid = 41;
      case 41: {
        if (tag == 328) {
         parse_activeSkillGrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeskillgrid_)));
          set_has_activeskillgrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_skill;
        break;
      }

      // repeated .ScenePetSkillData skill = 43;
      case 43: {
        if (tag == 346) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_skill;
        if (input->ExpectTag(354)) goto parse_activeskill;
        break;
      }

      // repeated .ScenePetSkillData activeskill = 44;
      case 44: {
        if (tag == 354) {
         parse_activeskill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activeskill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_activeskill;
        if (input->ExpectTag(360)) goto parse_equipItems;
        break;
      }

      // repeated uint32 equipItems = 45;
      case 45: {
        if (tag == 360) {
         parse_equipItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 360, input, this->mutable_equipitems())));
        } else if (tag == 362) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equipitems())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_equipItems;
        if (input->ExpectTag(368)) goto parse_killEnemyCount;
        break;
      }

      // optional uint32 killEnemyCount = 46;
      case 46: {
        if (tag == 368) {
         parse_killEnemyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killenemycount_)));
          set_has_killenemycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_sign;
        break;
      }

      // repeated uint32 sign = 60 [packed = true];
      case 60: {
        if (tag == 482) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sign())));
        } else if (tag == 480) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 482, input, this->mutable_sign())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_kind;
        break;
      }

      // optional uint32 kind = 71;
      case 71: {
        if (tag == 568) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_growup;
        break;
      }

      // optional uint32 growup = 72;
      case 72: {
        if (tag == 576) {
         parse_growup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growup_)));
          set_has_growup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_freePoint;
        break;
      }

      // optional uint32 freePoint = 73;
      case 73: {
        if (tag == 584) {
         parse_freePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freepoint_)));
          set_has_freepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_aptitudeLevel;
        break;
      }

      // optional uint32 aptitudeLevel = 74;
      case 74: {
        if (tag == 592) {
         parse_aptitudeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aptitudelevel_)));
          set_has_aptitudelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_activeskill_cooltime;
        break;
      }

      // optional uint32 activeskill_cooltime = 75;
      case 75: {
        if (tag == 600) {
         parse_activeskill_cooltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeskill_cooltime_)));
          set_has_activeskill_cooltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_indentify_growup;
        break;
      }

      // optional bool indentify_growup = 76 [default = false];
      case 76: {
        if (tag == 608) {
         parse_indentify_growup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &indentify_growup_)));
          set_has_indentify_growup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_lingqi;
        break;
      }

      // optional uint32 lingqi = 77;
      case 77: {
        if (tag == 616) {
         parse_lingqi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lingqi_)));
          set_has_lingqi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_lingqiattr;
        break;
      }

      // optional uint32 lingqiattr = 78;
      case 78: {
        if (tag == 624) {
         parse_lingqiattr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lingqiattr_)));
          set_has_lingqiattr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScenePetData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScenePetData)
  return false;
#undef DO_
}

void ScenePetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScenePetData)
  // optional uint32 baseId = 1;
  if (has_baseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->baseid(), output);
  }

  // optional uint32 masterId = 2;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->masterid(), output);
  }

  // optional uint32 resId = 3;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resid(), output);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 useLevel = 7;
  if (has_uselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uselevel(), output);
  }

  // optional bool petbind = 8;
  if (has_petbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->petbind(), output);
  }

  // optional uint32 enhanceLevel = 9;
  if (has_enhancelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->enhancelevel(), output);
  }

  // optional uint32 sex = 11;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sex(), output);
  }

  // optional uint32 mettle = 12;
  if (has_mettle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mettle(), output);
  }

  // optional uint64 exp = 13;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->exp(), output);
  }

  // optional uint32 hp = 14;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->hp(), output);
  }

  // optional uint32 maxhp = 15;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->maxhp(), output);
  }

  // optional uint32 life = 16;
  if (has_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->life(), output);
  }

  // optional uint32 happy = 17;
  if (has_happy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->happy(), output);
  }

  // optional uint32 strength = 18;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->strength(), output);
  }

  // optional uint32 dexterity = 19;
  if (has_dexterity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->dexterity(), output);
  }

  // optional uint32 mentality = 20;
  if (has_mentality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mentality(), output);
  }

  // optional uint32 constitution = 21;
  if (has_constitution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->constitution(), output);
  }

  // optional uint32 growupLevel = 22;
  if (has_growuplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->growuplevel(), output);
  }

  // optional uint32 streAptitude = 23;
  if (has_streaptitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->streaptitude(), output);
  }

  // optional uint32 dextAptitude = 24;
  if (has_dextaptitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->dextaptitude(), output);
  }

  // optional uint32 mentAptitude = 25;
  if (has_mentaptitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->mentaptitude(), output);
  }

  // optional uint32 consAptitude = 26;
  if (has_consaptitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->consaptitude(), output);
  }

  // optional uint32 pmaxAttack = 27;
  if (has_pmaxattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->pmaxattack(), output);
  }

  // optional uint32 mmaxAttack = 28;
  if (has_mmaxattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->mmaxattack(), output);
  }

  // optional uint32 pminAttack = 29;
  if (has_pminattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->pminattack(), output);
  }

  // optional uint32 mminAttack = 30;
  if (has_mminattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->mminattack(), output);
  }

  // optional uint32 pDefence = 31;
  if (has_pdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->pdefence(), output);
  }

  // optional uint32 mDefence = 32;
  if (has_mdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->mdefence(), output);
  }

  // optional uint32 heavyRate = 33;
  if (has_heavyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->heavyrate(), output);
  }

  // optional uint32 luckyRate = 34;
  if (has_luckyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->luckyrate(), output);
  }

  // optional uint32 attackSpeedLevel = 35;
  if (has_attackspeedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->attackspeedlevel(), output);
  }

  // optional uint32 moveSpeedLevel = 36;
  if (has_movespeedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->movespeedlevel(), output);
  }

  // optional uint64 memory_exp = 37;
  if (has_memory_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(37, this->memory_exp(), output);
  }

  // optional uint32 equipGrid = 40;
  if (has_equipgrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->equipgrid(), output);
  }

  // optional uint32 activeSkillGrid = 41;
  if (has_activeskillgrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->activeskillgrid(), output);
  }

  // repeated .ScenePetSkillData skill = 43;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->skill(i), output);
  }

  // repeated .ScenePetSkillData activeskill = 44;
  for (int i = 0; i < this->activeskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->activeskill(i), output);
  }

  // repeated uint32 equipItems = 45;
  for (int i = 0; i < this->equipitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      45, this->equipitems(i), output);
  }

  // optional uint32 killEnemyCount = 46;
  if (has_killenemycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->killenemycount(), output);
  }

  // repeated uint32 sign = 60 [packed = true];
  if (this->sign_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(60, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sign_cached_byte_size_);
  }
  for (int i = 0; i < this->sign_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->sign(i), output);
  }

  // optional uint32 kind = 71;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->kind(), output);
  }

  // optional uint32 growup = 72;
  if (has_growup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->growup(), output);
  }

  // optional uint32 freePoint = 73;
  if (has_freepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->freepoint(), output);
  }

  // optional uint32 aptitudeLevel = 74;
  if (has_aptitudelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->aptitudelevel(), output);
  }

  // optional uint32 activeskill_cooltime = 75;
  if (has_activeskill_cooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->activeskill_cooltime(), output);
  }

  // optional bool indentify_growup = 76 [default = false];
  if (has_indentify_growup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->indentify_growup(), output);
  }

  // optional uint32 lingqi = 77;
  if (has_lingqi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->lingqi(), output);
  }

  // optional uint32 lingqiattr = 78;
  if (has_lingqiattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->lingqiattr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScenePetData)
}

::google::protobuf::uint8* ScenePetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScenePetData)
  // optional uint32 baseId = 1;
  if (has_baseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->baseid(), target);
  }

  // optional uint32 masterId = 2;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->masterid(), target);
  }

  // optional uint32 resId = 3;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resid(), target);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 useLevel = 7;
  if (has_uselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uselevel(), target);
  }

  // optional bool petbind = 8;
  if (has_petbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->petbind(), target);
  }

  // optional uint32 enhanceLevel = 9;
  if (has_enhancelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->enhancelevel(), target);
  }

  // optional uint32 sex = 11;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sex(), target);
  }

  // optional uint32 mettle = 12;
  if (has_mettle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mettle(), target);
  }

  // optional uint64 exp = 13;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->exp(), target);
  }

  // optional uint32 hp = 14;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->hp(), target);
  }

  // optional uint32 maxhp = 15;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->maxhp(), target);
  }

  // optional uint32 life = 16;
  if (has_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->life(), target);
  }

  // optional uint32 happy = 17;
  if (has_happy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->happy(), target);
  }

  // optional uint32 strength = 18;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->strength(), target);
  }

  // optional uint32 dexterity = 19;
  if (has_dexterity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->dexterity(), target);
  }

  // optional uint32 mentality = 20;
  if (has_mentality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->mentality(), target);
  }

  // optional uint32 constitution = 21;
  if (has_constitution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->constitution(), target);
  }

  // optional uint32 growupLevel = 22;
  if (has_growuplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->growuplevel(), target);
  }

  // optional uint32 streAptitude = 23;
  if (has_streaptitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->streaptitude(), target);
  }

  // optional uint32 dextAptitude = 24;
  if (has_dextaptitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->dextaptitude(), target);
  }

  // optional uint32 mentAptitude = 25;
  if (has_mentaptitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->mentaptitude(), target);
  }

  // optional uint32 consAptitude = 26;
  if (has_consaptitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->consaptitude(), target);
  }

  // optional uint32 pmaxAttack = 27;
  if (has_pmaxattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->pmaxattack(), target);
  }

  // optional uint32 mmaxAttack = 28;
  if (has_mmaxattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->mmaxattack(), target);
  }

  // optional uint32 pminAttack = 29;
  if (has_pminattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->pminattack(), target);
  }

  // optional uint32 mminAttack = 30;
  if (has_mminattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->mminattack(), target);
  }

  // optional uint32 pDefence = 31;
  if (has_pdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->pdefence(), target);
  }

  // optional uint32 mDefence = 32;
  if (has_mdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->mdefence(), target);
  }

  // optional uint32 heavyRate = 33;
  if (has_heavyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->heavyrate(), target);
  }

  // optional uint32 luckyRate = 34;
  if (has_luckyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->luckyrate(), target);
  }

  // optional uint32 attackSpeedLevel = 35;
  if (has_attackspeedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->attackspeedlevel(), target);
  }

  // optional uint32 moveSpeedLevel = 36;
  if (has_movespeedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->movespeedlevel(), target);
  }

  // optional uint64 memory_exp = 37;
  if (has_memory_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(37, this->memory_exp(), target);
  }

  // optional uint32 equipGrid = 40;
  if (has_equipgrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->equipgrid(), target);
  }

  // optional uint32 activeSkillGrid = 41;
  if (has_activeskillgrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->activeskillgrid(), target);
  }

  // repeated .ScenePetSkillData skill = 43;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->skill(i), target);
  }

  // repeated .ScenePetSkillData activeskill = 44;
  for (int i = 0; i < this->activeskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->activeskill(i), target);
  }

  // repeated uint32 equipItems = 45;
  for (int i = 0; i < this->equipitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(45, this->equipitems(i), target);
  }

  // optional uint32 killEnemyCount = 46;
  if (has_killenemycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->killenemycount(), target);
  }

  // repeated uint32 sign = 60 [packed = true];
  if (this->sign_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      60,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sign_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sign_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->sign(i), target);
  }

  // optional uint32 kind = 71;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->kind(), target);
  }

  // optional uint32 growup = 72;
  if (has_growup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->growup(), target);
  }

  // optional uint32 freePoint = 73;
  if (has_freepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->freepoint(), target);
  }

  // optional uint32 aptitudeLevel = 74;
  if (has_aptitudelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->aptitudelevel(), target);
  }

  // optional uint32 activeskill_cooltime = 75;
  if (has_activeskill_cooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->activeskill_cooltime(), target);
  }

  // optional bool indentify_growup = 76 [default = false];
  if (has_indentify_growup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(76, this->indentify_growup(), target);
  }

  // optional uint32 lingqi = 77;
  if (has_lingqi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(77, this->lingqi(), target);
  }

  // optional uint32 lingqiattr = 78;
  if (has_lingqiattr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->lingqiattr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScenePetData)
  return target;
}

int ScenePetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 baseId = 1;
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseid());
    }

    // optional uint32 masterId = 2;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterid());
    }

    // optional uint32 resId = 3;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

    // optional uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 useLevel = 7;
    if (has_uselevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uselevel());
    }

    // optional bool petbind = 8;
    if (has_petbind()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 enhanceLevel = 9;
    if (has_enhancelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhancelevel());
    }

    // optional uint32 sex = 11;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 mettle = 12;
    if (has_mettle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mettle());
    }

    // optional uint64 exp = 13;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint32 hp = 14;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 maxhp = 15;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 life = 16;
    if (has_life()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->life());
    }

    // optional uint32 happy = 17;
    if (has_happy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->happy());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 strength = 18;
    if (has_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 dexterity = 19;
    if (has_dexterity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dexterity());
    }

    // optional uint32 mentality = 20;
    if (has_mentality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mentality());
    }

    // optional uint32 constitution = 21;
    if (has_constitution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constitution());
    }

    // optional uint32 growupLevel = 22;
    if (has_growuplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growuplevel());
    }

    // optional uint32 streAptitude = 23;
    if (has_streaptitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streaptitude());
    }

    // optional uint32 dextAptitude = 24;
    if (has_dextaptitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dextaptitude());
    }

    // optional uint32 mentAptitude = 25;
    if (has_mentaptitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mentaptitude());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 consAptitude = 26;
    if (has_consaptitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consaptitude());
    }

    // optional uint32 pmaxAttack = 27;
    if (has_pmaxattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pmaxattack());
    }

    // optional uint32 mmaxAttack = 28;
    if (has_mmaxattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mmaxattack());
    }

    // optional uint32 pminAttack = 29;
    if (has_pminattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pminattack());
    }

    // optional uint32 mminAttack = 30;
    if (has_mminattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mminattack());
    }

    // optional uint32 pDefence = 31;
    if (has_pdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdefence());
    }

    // optional uint32 mDefence = 32;
    if (has_mdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdefence());
    }

    // optional uint32 heavyRate = 33;
    if (has_heavyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heavyrate());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 luckyRate = 34;
    if (has_luckyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckyrate());
    }

    // optional uint32 attackSpeedLevel = 35;
    if (has_attackspeedlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackspeedlevel());
    }

    // optional uint32 moveSpeedLevel = 36;
    if (has_movespeedlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeedlevel());
    }

    // optional uint64 memory_exp = 37;
    if (has_memory_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memory_exp());
    }

    // optional uint32 equipGrid = 40;
    if (has_equipgrid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipgrid());
    }

    // optional uint32 activeSkillGrid = 41;
    if (has_activeskillgrid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activeskillgrid());
    }

  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    // optional uint32 killEnemyCount = 46;
    if (has_killenemycount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killenemycount());
    }

    // optional uint32 kind = 71;
    if (has_kind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional uint32 growup = 72;
    if (has_growup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growup());
    }

    // optional uint32 freePoint = 73;
    if (has_freepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freepoint());
    }

    // optional uint32 aptitudeLevel = 74;
    if (has_aptitudelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aptitudelevel());
    }

    // optional uint32 activeskill_cooltime = 75;
    if (has_activeskill_cooltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activeskill_cooltime());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool indentify_growup = 76 [default = false];
    if (has_indentify_growup()) {
      total_size += 2 + 1;
    }

    // optional uint32 lingqi = 77;
    if (has_lingqi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lingqi());
    }

    // optional uint32 lingqiattr = 78;
    if (has_lingqiattr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lingqiattr());
    }

  }
  // repeated .ScenePetSkillData skill = 43;
  total_size += 2 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  // repeated .ScenePetSkillData activeskill = 44;
  total_size += 2 * this->activeskill_size();
  for (int i = 0; i < this->activeskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activeskill(i));
  }

  // repeated uint32 equipItems = 45;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipitems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equipitems(i));
    }
    total_size += 2 * this->equipitems_size() + data_size;
  }

  // repeated uint32 sign = 60 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->sign_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sign(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sign_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScenePetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScenePetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScenePetData::MergeFrom(const ScenePetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  activeskill_.MergeFrom(from.activeskill_);
  equipitems_.MergeFrom(from.equipitems_);
  sign_.MergeFrom(from.sign_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseid()) {
      set_baseid(from.baseid());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_uselevel()) {
      set_uselevel(from.uselevel());
    }
    if (from.has_petbind()) {
      set_petbind(from.petbind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enhancelevel()) {
      set_enhancelevel(from.enhancelevel());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_mettle()) {
      set_mettle(from.mettle());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_life()) {
      set_life(from.life());
    }
    if (from.has_happy()) {
      set_happy(from.happy());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_dexterity()) {
      set_dexterity(from.dexterity());
    }
    if (from.has_mentality()) {
      set_mentality(from.mentality());
    }
    if (from.has_constitution()) {
      set_constitution(from.constitution());
    }
    if (from.has_growuplevel()) {
      set_growuplevel(from.growuplevel());
    }
    if (from.has_streaptitude()) {
      set_streaptitude(from.streaptitude());
    }
    if (from.has_dextaptitude()) {
      set_dextaptitude(from.dextaptitude());
    }
    if (from.has_mentaptitude()) {
      set_mentaptitude(from.mentaptitude());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_consaptitude()) {
      set_consaptitude(from.consaptitude());
    }
    if (from.has_pmaxattack()) {
      set_pmaxattack(from.pmaxattack());
    }
    if (from.has_mmaxattack()) {
      set_mmaxattack(from.mmaxattack());
    }
    if (from.has_pminattack()) {
      set_pminattack(from.pminattack());
    }
    if (from.has_mminattack()) {
      set_mminattack(from.mminattack());
    }
    if (from.has_pdefence()) {
      set_pdefence(from.pdefence());
    }
    if (from.has_mdefence()) {
      set_mdefence(from.mdefence());
    }
    if (from.has_heavyrate()) {
      set_heavyrate(from.heavyrate());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_luckyrate()) {
      set_luckyrate(from.luckyrate());
    }
    if (from.has_attackspeedlevel()) {
      set_attackspeedlevel(from.attackspeedlevel());
    }
    if (from.has_movespeedlevel()) {
      set_movespeedlevel(from.movespeedlevel());
    }
    if (from.has_memory_exp()) {
      set_memory_exp(from.memory_exp());
    }
    if (from.has_equipgrid()) {
      set_equipgrid(from.equipgrid());
    }
    if (from.has_activeskillgrid()) {
      set_activeskillgrid(from.activeskillgrid());
    }
  }
  if (from._has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    if (from.has_killenemycount()) {
      set_killenemycount(from.killenemycount());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_growup()) {
      set_growup(from.growup());
    }
    if (from.has_freepoint()) {
      set_freepoint(from.freepoint());
    }
    if (from.has_aptitudelevel()) {
      set_aptitudelevel(from.aptitudelevel());
    }
    if (from.has_activeskill_cooltime()) {
      set_activeskill_cooltime(from.activeskill_cooltime());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_indentify_growup()) {
      set_indentify_growup(from.indentify_growup());
    }
    if (from.has_lingqi()) {
      set_lingqi(from.lingqi());
    }
    if (from.has_lingqiattr()) {
      set_lingqiattr(from.lingqiattr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScenePetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePetData::CopyFrom(const ScenePetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePetData::IsInitialized() const {

  return true;
}

void ScenePetData::Swap(ScenePetData* other) {
  if (other != this) {
    std::swap(baseid_, other->baseid_);
    std::swap(masterid_, other->masterid_);
    std::swap(resid_, other->resid_);
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(uselevel_, other->uselevel_);
    std::swap(petbind_, other->petbind_);
    std::swap(enhancelevel_, other->enhancelevel_);
    std::swap(sex_, other->sex_);
    std::swap(mettle_, other->mettle_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(life_, other->life_);
    std::swap(happy_, other->happy_);
    std::swap(strength_, other->strength_);
    std::swap(dexterity_, other->dexterity_);
    std::swap(mentality_, other->mentality_);
    std::swap(constitution_, other->constitution_);
    std::swap(growuplevel_, other->growuplevel_);
    std::swap(streaptitude_, other->streaptitude_);
    std::swap(dextaptitude_, other->dextaptitude_);
    std::swap(mentaptitude_, other->mentaptitude_);
    std::swap(consaptitude_, other->consaptitude_);
    std::swap(pmaxattack_, other->pmaxattack_);
    std::swap(mmaxattack_, other->mmaxattack_);
    std::swap(pminattack_, other->pminattack_);
    std::swap(mminattack_, other->mminattack_);
    std::swap(pdefence_, other->pdefence_);
    std::swap(mdefence_, other->mdefence_);
    std::swap(heavyrate_, other->heavyrate_);
    std::swap(luckyrate_, other->luckyrate_);
    std::swap(attackspeedlevel_, other->attackspeedlevel_);
    std::swap(movespeedlevel_, other->movespeedlevel_);
    std::swap(memory_exp_, other->memory_exp_);
    std::swap(equipgrid_, other->equipgrid_);
    std::swap(activeskillgrid_, other->activeskillgrid_);
    skill_.Swap(&other->skill_);
    activeskill_.Swap(&other->activeskill_);
    equipitems_.Swap(&other->equipitems_);
    std::swap(killenemycount_, other->killenemycount_);
    sign_.Swap(&other->sign_);
    std::swap(kind_, other->kind_);
    std::swap(growup_, other->growup_);
    std::swap(freepoint_, other->freepoint_);
    std::swap(aptitudelevel_, other->aptitudelevel_);
    std::swap(activeskill_cooltime_, other->activeskill_cooltime_);
    std::swap(indentify_growup_, other->indentify_growup_);
    std::swap(lingqi_, other->lingqi_);
    std::swap(lingqiattr_, other->lingqiattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScenePetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenePetData_descriptor_;
  metadata.reflection = ScenePetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScenePetServerData::kCommonFieldNumber;
const int ScenePetServerData::kTmpIdFieldNumber;
const int ScenePetServerData::kFirstNameFieldNumber;
const int ScenePetServerData::kXFieldNumber;
const int ScenePetServerData::kYFieldNumber;
const int ScenePetServerData::kMaxlifeFieldNumber;
const int ScenePetServerData::kSkillMaxFieldNumber;
const int ScenePetServerData::kCreateItemIdFieldNumber;
const int ScenePetServerData::kAiFieldNumber;
const int ScenePetServerData::kInitLevelFieldNumber;
const int ScenePetServerData::kIntiAttrFieldNumber;
const int ScenePetServerData::kRetrnAptiLevelFieldNumber;
const int ScenePetServerData::kRetrnAptiFieldNumber;
#endif  // !_MSC_VER

ScenePetServerData::ScenePetServerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScenePetServerData)
}

void ScenePetServerData::InitAsDefaultInstance() {
  common_ = const_cast< ::ScenePetData*>(&::ScenePetData::default_instance());
}

ScenePetServerData::ScenePetServerData(const ScenePetServerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScenePetServerData)
}

void ScenePetServerData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  common_ = NULL;
  tmpid_ = 0u;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0u;
  y_ = 0u;
  maxlife_ = 0u;
  skillmax_ = 0u;
  create_item_id_ = 0u;
  initlevel_ = 0u;
  retrnaptilevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenePetServerData::~ScenePetServerData() {
  // @@protoc_insertion_point(destructor:ScenePetServerData)
  SharedDtor();
}

void ScenePetServerData::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (this != default_instance_) {
    delete common_;
  }
}

void ScenePetServerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePetServerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenePetServerData_descriptor_;
}

const ScenePetServerData& ScenePetServerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ScenePetServerData* ScenePetServerData::default_instance_ = NULL;

ScenePetServerData* ScenePetServerData::New() const {
  return new ScenePetServerData;
}

void ScenePetServerData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScenePetServerData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tmpid_, create_item_id_);
    if (has_common()) {
      if (common_ != NULL) common_->::ScenePetData::Clear();
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
  }
  ZR_(initlevel_, retrnaptilevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ai_.Clear();
  intiattr_.Clear();
  retrnapti_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScenePetServerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScenePetServerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ScenePetData common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tmpId;
        break;
      }

      // optional uint32 tmpId = 2;
      case 2: {
        if (tag == 16) {
         parse_tmpId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_firstName;
        break;
      }

      // optional string firstName = 3;
      case 3: {
        if (tag == 26) {
         parse_firstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }

      // optional uint32 x = 4;
      case 4: {
        if (tag == 32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }

      // optional uint32 y = 5;
      case 5: {
        if (tag == 40) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxlife;
        break;
      }

      // optional uint32 maxlife = 6;
      case 6: {
        if (tag == 48) {
         parse_maxlife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlife_)));
          set_has_maxlife();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ai;
        break;
      }

      // repeated uint32 ai = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_ai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ai())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74, input, this->mutable_ai())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_initLevel;
        break;
      }

      // optional uint32 initLevel = 10;
      case 10: {
        if (tag == 80) {
         parse_initLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initlevel_)));
          set_has_initlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_intiAttr;
        break;
      }

      // repeated uint32 intiAttr = 11 [packed = true];
      case 11: {
        if (tag == 90) {
         parse_intiAttr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_intiattr())));
        } else if (tag == 88) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90, input, this->mutable_intiattr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_retrnAptiLevel;
        break;
      }

      // optional uint32 retrnAptiLevel = 12;
      case 12: {
        if (tag == 96) {
         parse_retrnAptiLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrnaptilevel_)));
          set_has_retrnaptilevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_retrnApti;
        break;
      }

      // repeated uint32 retrnApti = 13 [packed = true];
      case 13: {
        if (tag == 106) {
         parse_retrnApti:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_retrnapti())));
        } else if (tag == 104) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106, input, this->mutable_retrnapti())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_skillMax;
        break;
      }

      // optional uint32 skillMax = 14;
      case 14: {
        if (tag == 112) {
         parse_skillMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillmax_)));
          set_has_skillmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_create_item_id;
        break;
      }

      // optional uint32 create_item_id = 17;
      case 17: {
        if (tag == 136) {
         parse_create_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_item_id_)));
          set_has_create_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScenePetServerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScenePetServerData)
  return false;
#undef DO_
}

void ScenePetServerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScenePetServerData)
  // optional .ScenePetData common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  // optional uint32 tmpId = 2;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tmpid(), output);
  }

  // optional string firstName = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firstname(), output);
  }

  // optional uint32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->x(), output);
  }

  // optional uint32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->y(), output);
  }

  // optional uint32 maxlife = 6;
  if (has_maxlife()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxlife(), output);
  }

  // repeated uint32 ai = 9 [packed = true];
  if (this->ai_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ai_cached_byte_size_);
  }
  for (int i = 0; i < this->ai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ai(i), output);
  }

  // optional uint32 initLevel = 10;
  if (has_initlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->initlevel(), output);
  }

  // repeated uint32 intiAttr = 11 [packed = true];
  if (this->intiattr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_intiattr_cached_byte_size_);
  }
  for (int i = 0; i < this->intiattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->intiattr(i), output);
  }

  // optional uint32 retrnAptiLevel = 12;
  if (has_retrnaptilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->retrnaptilevel(), output);
  }

  // repeated uint32 retrnApti = 13 [packed = true];
  if (this->retrnapti_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_retrnapti_cached_byte_size_);
  }
  for (int i = 0; i < this->retrnapti_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->retrnapti(i), output);
  }

  // optional uint32 skillMax = 14;
  if (has_skillmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->skillmax(), output);
  }

  // optional uint32 create_item_id = 17;
  if (has_create_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->create_item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScenePetServerData)
}

::google::protobuf::uint8* ScenePetServerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScenePetServerData)
  // optional .ScenePetData common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  // optional uint32 tmpId = 2;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tmpid(), target);
  }

  // optional string firstName = 3;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->firstname(), target);
  }

  // optional uint32 x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->x(), target);
  }

  // optional uint32 y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->y(), target);
  }

  // optional uint32 maxlife = 6;
  if (has_maxlife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxlife(), target);
  }

  // repeated uint32 ai = 9 [packed = true];
  if (this->ai_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ai_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ai(i), target);
  }

  // optional uint32 initLevel = 10;
  if (has_initlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->initlevel(), target);
  }

  // repeated uint32 intiAttr = 11 [packed = true];
  if (this->intiattr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _intiattr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->intiattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->intiattr(i), target);
  }

  // optional uint32 retrnAptiLevel = 12;
  if (has_retrnaptilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->retrnaptilevel(), target);
  }

  // repeated uint32 retrnApti = 13 [packed = true];
  if (this->retrnapti_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _retrnapti_cached_byte_size_, target);
  }
  for (int i = 0; i < this->retrnapti_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->retrnapti(i), target);
  }

  // optional uint32 skillMax = 14;
  if (has_skillmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->skillmax(), target);
  }

  // optional uint32 create_item_id = 17;
  if (has_create_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->create_item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScenePetServerData)
  return target;
}

int ScenePetServerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ScenePetData common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional uint32 tmpId = 2;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmpid());
    }

    // optional string firstName = 3;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional uint32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 maxlife = 6;
    if (has_maxlife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlife());
    }

    // optional uint32 skillMax = 14;
    if (has_skillmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillmax());
    }

    // optional uint32 create_item_id = 17;
    if (has_create_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_item_id());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 initLevel = 10;
    if (has_initlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initlevel());
    }

    // optional uint32 retrnAptiLevel = 12;
    if (has_retrnaptilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retrnaptilevel());
    }

  }
  // repeated uint32 ai = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->ai_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ai(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ai_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 intiAttr = 11 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->intiattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->intiattr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _intiattr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 retrnApti = 13 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->retrnapti_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->retrnapti(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _retrnapti_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePetServerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScenePetServerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScenePetServerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScenePetServerData::MergeFrom(const ScenePetServerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ai_.MergeFrom(from.ai_);
  intiattr_.MergeFrom(from.intiattr_);
  retrnapti_.MergeFrom(from.retrnapti_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::ScenePetData::MergeFrom(from.common());
    }
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_maxlife()) {
      set_maxlife(from.maxlife());
    }
    if (from.has_skillmax()) {
      set_skillmax(from.skillmax());
    }
    if (from.has_create_item_id()) {
      set_create_item_id(from.create_item_id());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_initlevel()) {
      set_initlevel(from.initlevel());
    }
    if (from.has_retrnaptilevel()) {
      set_retrnaptilevel(from.retrnaptilevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScenePetServerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePetServerData::CopyFrom(const ScenePetServerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePetServerData::IsInitialized() const {

  return true;
}

void ScenePetServerData::Swap(ScenePetServerData* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(tmpid_, other->tmpid_);
    std::swap(firstname_, other->firstname_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(maxlife_, other->maxlife_);
    std::swap(skillmax_, other->skillmax_);
    std::swap(create_item_id_, other->create_item_id_);
    ai_.Swap(&other->ai_);
    std::swap(initlevel_, other->initlevel_);
    intiattr_.Swap(&other->intiattr_);
    std::swap(retrnaptilevel_, other->retrnaptilevel_);
    retrnapti_.Swap(&other->retrnapti_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScenePetServerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenePetServerData_descriptor_;
  metadata.reflection = ScenePetServerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int optionBaseAutoTeamMember::kCharidFieldNumber;
const int optionBaseAutoTeamMember::kNameFieldNumber;
#endif  // !_MSC_VER

optionBaseAutoTeamMember::optionBaseAutoTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:optionBaseAutoTeamMember)
}

void optionBaseAutoTeamMember::InitAsDefaultInstance() {
}

optionBaseAutoTeamMember::optionBaseAutoTeamMember(const optionBaseAutoTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:optionBaseAutoTeamMember)
}

void optionBaseAutoTeamMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

optionBaseAutoTeamMember::~optionBaseAutoTeamMember() {
  // @@protoc_insertion_point(destructor:optionBaseAutoTeamMember)
  SharedDtor();
}

void optionBaseAutoTeamMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void optionBaseAutoTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* optionBaseAutoTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return optionBaseAutoTeamMember_descriptor_;
}

const optionBaseAutoTeamMember& optionBaseAutoTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

optionBaseAutoTeamMember* optionBaseAutoTeamMember::default_instance_ = NULL;

optionBaseAutoTeamMember* optionBaseAutoTeamMember::New() const {
  return new optionBaseAutoTeamMember;
}

void optionBaseAutoTeamMember::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool optionBaseAutoTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:optionBaseAutoTeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:optionBaseAutoTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:optionBaseAutoTeamMember)
  return false;
#undef DO_
}

void optionBaseAutoTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:optionBaseAutoTeamMember)
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:optionBaseAutoTeamMember)
}

::google::protobuf::uint8* optionBaseAutoTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:optionBaseAutoTeamMember)
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optionBaseAutoTeamMember)
  return target;
}

int optionBaseAutoTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void optionBaseAutoTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const optionBaseAutoTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const optionBaseAutoTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void optionBaseAutoTeamMember::MergeFrom(const optionBaseAutoTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void optionBaseAutoTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void optionBaseAutoTeamMember::CopyFrom(const optionBaseAutoTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool optionBaseAutoTeamMember::IsInitialized() const {

  return true;
}

void optionBaseAutoTeamMember::Swap(optionBaseAutoTeamMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata optionBaseAutoTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = optionBaseAutoTeamMember_descriptor_;
  metadata.reflection = optionBaseAutoTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stOptionBase::kAllowTeamFieldNumber;
const int stOptionBase::kAllowTradeFieldNumber;
const int stOptionBase::kAllowSeptFieldNumber;
const int stOptionBase::kAllowGangFieldNumber;
const int stOptionBase::kAllowFriendFieldNumber;
const int stOptionBase::kAllowBanNameFieldNumber;
const int stOptionBase::kAllowintoteamFieldNumber;
const int stOptionBase::kIntoteamLevelFieldNumber;
const int stOptionBase::kTeammemberFieldNumber;
const int stOptionBase::kAutorideFieldNumber;
#endif  // !_MSC_VER

stOptionBase::stOptionBase()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stOptionBase)
}

void stOptionBase::InitAsDefaultInstance() {
}

stOptionBase::stOptionBase(const stOptionBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stOptionBase)
}

void stOptionBase::SharedCtor() {
  _cached_size_ = 0;
  allowteam_ = true;
  allowtrade_ = true;
  allowsept_ = true;
  allowgang_ = true;
  allowfriend_ = true;
  allowbanname_ = true;
  allowintoteam_ = false;
  intoteam_level_ = 0u;
  autoride_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOptionBase::~stOptionBase() {
  // @@protoc_insertion_point(destructor:stOptionBase)
  SharedDtor();
}

void stOptionBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOptionBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOptionBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOptionBase_descriptor_;
}

const stOptionBase& stOptionBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stOptionBase* stOptionBase::default_instance_ = NULL;

stOptionBase* stOptionBase::New() const {
  return new stOptionBase;
}

void stOptionBase::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    allowteam_ = true;
    allowtrade_ = true;
    allowsept_ = true;
    allowgang_ = true;
    allowfriend_ = true;
    allowbanname_ = true;
    allowintoteam_ = false;
    intoteam_level_ = 0u;
  }
  autoride_ = true;
  teammember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOptionBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stOptionBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allowTeam = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowteam_)));
          set_has_allowteam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allowTrade;
        break;
      }

      // optional bool allowTrade = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_allowTrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowtrade_)));
          set_has_allowtrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_allowSept;
        break;
      }

      // optional bool allowSept = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_allowSept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowsept_)));
          set_has_allowsept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allowGang;
        break;
      }

      // optional bool allowGang = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_allowGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowgang_)));
          set_has_allowgang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_allowFriend;
        break;
      }

      // optional bool allowFriend = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_allowFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowfriend_)));
          set_has_allowfriend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allowBanName;
        break;
      }

      // optional bool allowBanName = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_allowBanName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowbanname_)));
          set_has_allowbanname();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_allowintoteam;
        break;
      }

      // optional bool allowintoteam = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_allowintoteam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowintoteam_)));
          set_has_allowintoteam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_intoteam_level;
        break;
      }

      // optional uint32 intoteam_level = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_intoteam_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intoteam_level_)));
          set_has_intoteam_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_teammember;
        break;
      }

      // repeated .optionBaseAutoTeamMember teammember = 9;
      case 9: {
        if (tag == 74) {
         parse_teammember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teammember()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_teammember;
        if (input->ExpectTag(80)) goto parse_autoride;
        break;
      }

      // optional bool autoride = 10 [default = true];
      case 10: {
        if (tag == 80) {
         parse_autoride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoride_)));
          set_has_autoride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stOptionBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stOptionBase)
  return false;
#undef DO_
}

void stOptionBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stOptionBase)
  // optional bool allowTeam = 1 [default = true];
  if (has_allowteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allowteam(), output);
  }

  // optional bool allowTrade = 2 [default = true];
  if (has_allowtrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allowtrade(), output);
  }

  // optional bool allowSept = 3 [default = true];
  if (has_allowsept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allowsept(), output);
  }

  // optional bool allowGang = 4 [default = true];
  if (has_allowgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->allowgang(), output);
  }

  // optional bool allowFriend = 5 [default = true];
  if (has_allowfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allowfriend(), output);
  }

  // optional bool allowBanName = 6 [default = true];
  if (has_allowbanname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allowbanname(), output);
  }

  // optional bool allowintoteam = 7 [default = false];
  if (has_allowintoteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->allowintoteam(), output);
  }

  // optional uint32 intoteam_level = 8 [default = 0];
  if (has_intoteam_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->intoteam_level(), output);
  }

  // repeated .optionBaseAutoTeamMember teammember = 9;
  for (int i = 0; i < this->teammember_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->teammember(i), output);
  }

  // optional bool autoride = 10 [default = true];
  if (has_autoride()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->autoride(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stOptionBase)
}

::google::protobuf::uint8* stOptionBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stOptionBase)
  // optional bool allowTeam = 1 [default = true];
  if (has_allowteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allowteam(), target);
  }

  // optional bool allowTrade = 2 [default = true];
  if (has_allowtrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allowtrade(), target);
  }

  // optional bool allowSept = 3 [default = true];
  if (has_allowsept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allowsept(), target);
  }

  // optional bool allowGang = 4 [default = true];
  if (has_allowgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->allowgang(), target);
  }

  // optional bool allowFriend = 5 [default = true];
  if (has_allowfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allowfriend(), target);
  }

  // optional bool allowBanName = 6 [default = true];
  if (has_allowbanname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allowbanname(), target);
  }

  // optional bool allowintoteam = 7 [default = false];
  if (has_allowintoteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->allowintoteam(), target);
  }

  // optional uint32 intoteam_level = 8 [default = 0];
  if (has_intoteam_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->intoteam_level(), target);
  }

  // repeated .optionBaseAutoTeamMember teammember = 9;
  for (int i = 0; i < this->teammember_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->teammember(i), target);
  }

  // optional bool autoride = 10 [default = true];
  if (has_autoride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->autoride(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stOptionBase)
  return target;
}

int stOptionBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool allowTeam = 1 [default = true];
    if (has_allowteam()) {
      total_size += 1 + 1;
    }

    // optional bool allowTrade = 2 [default = true];
    if (has_allowtrade()) {
      total_size += 1 + 1;
    }

    // optional bool allowSept = 3 [default = true];
    if (has_allowsept()) {
      total_size += 1 + 1;
    }

    // optional bool allowGang = 4 [default = true];
    if (has_allowgang()) {
      total_size += 1 + 1;
    }

    // optional bool allowFriend = 5 [default = true];
    if (has_allowfriend()) {
      total_size += 1 + 1;
    }

    // optional bool allowBanName = 6 [default = true];
    if (has_allowbanname()) {
      total_size += 1 + 1;
    }

    // optional bool allowintoteam = 7 [default = false];
    if (has_allowintoteam()) {
      total_size += 1 + 1;
    }

    // optional uint32 intoteam_level = 8 [default = 0];
    if (has_intoteam_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intoteam_level());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool autoride = 10 [default = true];
    if (has_autoride()) {
      total_size += 1 + 1;
    }

  }
  // repeated .optionBaseAutoTeamMember teammember = 9;
  total_size += 1 * this->teammember_size();
  for (int i = 0; i < this->teammember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teammember(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOptionBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOptionBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOptionBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOptionBase::MergeFrom(const stOptionBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  teammember_.MergeFrom(from.teammember_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allowteam()) {
      set_allowteam(from.allowteam());
    }
    if (from.has_allowtrade()) {
      set_allowtrade(from.allowtrade());
    }
    if (from.has_allowsept()) {
      set_allowsept(from.allowsept());
    }
    if (from.has_allowgang()) {
      set_allowgang(from.allowgang());
    }
    if (from.has_allowfriend()) {
      set_allowfriend(from.allowfriend());
    }
    if (from.has_allowbanname()) {
      set_allowbanname(from.allowbanname());
    }
    if (from.has_allowintoteam()) {
      set_allowintoteam(from.allowintoteam());
    }
    if (from.has_intoteam_level()) {
      set_intoteam_level(from.intoteam_level());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_autoride()) {
      set_autoride(from.autoride());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOptionBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOptionBase::CopyFrom(const stOptionBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOptionBase::IsInitialized() const {

  return true;
}

void stOptionBase::Swap(stOptionBase* other) {
  if (other != this) {
    std::swap(allowteam_, other->allowteam_);
    std::swap(allowtrade_, other->allowtrade_);
    std::swap(allowsept_, other->allowsept_);
    std::swap(allowgang_, other->allowgang_);
    std::swap(allowfriend_, other->allowfriend_);
    std::swap(allowbanname_, other->allowbanname_);
    std::swap(allowintoteam_, other->allowintoteam_);
    std::swap(intoteam_level_, other->intoteam_level_);
    teammember_.Swap(&other->teammember_);
    std::swap(autoride_, other->autoride_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOptionBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOptionBase_descriptor_;
  metadata.reflection = stOptionBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDayHonor::kHonorFieldNumber;
const int stDayHonor::kTimeFieldNumber;
#endif  // !_MSC_VER

stDayHonor::stDayHonor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stDayHonor)
}

void stDayHonor::InitAsDefaultInstance() {
}

stDayHonor::stDayHonor(const stDayHonor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stDayHonor)
}

void stDayHonor::SharedCtor() {
  _cached_size_ = 0;
  honor_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDayHonor::~stDayHonor() {
  // @@protoc_insertion_point(destructor:stDayHonor)
  SharedDtor();
}

void stDayHonor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDayHonor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDayHonor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDayHonor_descriptor_;
}

const stDayHonor& stDayHonor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stDayHonor* stDayHonor::default_instance_ = NULL;

stDayHonor* stDayHonor::New() const {
  return new stDayHonor;
}

void stDayHonor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stDayHonor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(honor_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDayHonor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stDayHonor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 honor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stDayHonor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stDayHonor)
  return false;
#undef DO_
}

void stDayHonor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stDayHonor)
  // optional uint32 honor = 1;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->honor(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stDayHonor)
}

::google::protobuf::uint8* stDayHonor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stDayHonor)
  // optional uint32 honor = 1;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->honor(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stDayHonor)
  return target;
}

int stDayHonor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 honor = 1;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDayHonor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDayHonor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDayHonor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDayHonor::MergeFrom(const stDayHonor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDayHonor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDayHonor::CopyFrom(const stDayHonor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDayHonor::IsInitialized() const {

  return true;
}

void stDayHonor::Swap(stDayHonor* other) {
  if (other != this) {
    std::swap(honor_, other->honor_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDayHonor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDayHonor_descriptor_;
  metadata.reflection = stDayHonor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stHonorKill::kRevenUserIdFieldNumber;
const int stHonorKill::kHonorKillTimeFieldNumber;
const int stHonorKill::kRevenKillTimeFieldNumber;
const int stHonorKill::kKillCounterFieldNumber;
#endif  // !_MSC_VER

stHonorKill::stHonorKill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stHonorKill)
}

void stHonorKill::InitAsDefaultInstance() {
}

stHonorKill::stHonorKill(const stHonorKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stHonorKill)
}

void stHonorKill::SharedCtor() {
  _cached_size_ = 0;
  revenuserid_ = 0u;
  honorkilltime_ = 0u;
  revenkilltime_ = 0u;
  killcounter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHonorKill::~stHonorKill() {
  // @@protoc_insertion_point(destructor:stHonorKill)
  SharedDtor();
}

void stHonorKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHonorKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHonorKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHonorKill_descriptor_;
}

const stHonorKill& stHonorKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stHonorKill* stHonorKill::default_instance_ = NULL;

stHonorKill* stHonorKill::New() const {
  return new stHonorKill;
}

void stHonorKill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stHonorKill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(revenuserid_, killcounter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHonorKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stHonorKill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 revenUserId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revenuserid_)));
          set_has_revenuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_honorKillTime;
        break;
      }

      // optional uint32 honorKillTime = 2;
      case 2: {
        if (tag == 16) {
         parse_honorKillTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honorkilltime_)));
          set_has_honorkilltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_revenKillTime;
        break;
      }

      // optional uint32 revenKillTime = 3;
      case 3: {
        if (tag == 24) {
         parse_revenKillTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revenkilltime_)));
          set_has_revenkilltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_killCounter;
        break;
      }

      // optional uint32 killCounter = 4;
      case 4: {
        if (tag == 32) {
         parse_killCounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcounter_)));
          set_has_killcounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stHonorKill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stHonorKill)
  return false;
#undef DO_
}

void stHonorKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stHonorKill)
  // optional uint32 revenUserId = 1;
  if (has_revenuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->revenuserid(), output);
  }

  // optional uint32 honorKillTime = 2;
  if (has_honorkilltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->honorkilltime(), output);
  }

  // optional uint32 revenKillTime = 3;
  if (has_revenkilltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revenkilltime(), output);
  }

  // optional uint32 killCounter = 4;
  if (has_killcounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killcounter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stHonorKill)
}

::google::protobuf::uint8* stHonorKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stHonorKill)
  // optional uint32 revenUserId = 1;
  if (has_revenuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->revenuserid(), target);
  }

  // optional uint32 honorKillTime = 2;
  if (has_honorkilltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->honorkilltime(), target);
  }

  // optional uint32 revenKillTime = 3;
  if (has_revenkilltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revenkilltime(), target);
  }

  // optional uint32 killCounter = 4;
  if (has_killcounter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killcounter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stHonorKill)
  return target;
}

int stHonorKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 revenUserId = 1;
    if (has_revenuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revenuserid());
    }

    // optional uint32 honorKillTime = 2;
    if (has_honorkilltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honorkilltime());
    }

    // optional uint32 revenKillTime = 3;
    if (has_revenkilltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revenkilltime());
    }

    // optional uint32 killCounter = 4;
    if (has_killcounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcounter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHonorKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHonorKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHonorKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHonorKill::MergeFrom(const stHonorKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_revenuserid()) {
      set_revenuserid(from.revenuserid());
    }
    if (from.has_honorkilltime()) {
      set_honorkilltime(from.honorkilltime());
    }
    if (from.has_revenkilltime()) {
      set_revenkilltime(from.revenkilltime());
    }
    if (from.has_killcounter()) {
      set_killcounter(from.killcounter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHonorKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHonorKill::CopyFrom(const stHonorKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHonorKill::IsInitialized() const {

  return true;
}

void stHonorKill::Swap(stHonorKill* other) {
  if (other != this) {
    std::swap(revenuserid_, other->revenuserid_);
    std::swap(honorkilltime_, other->honorkilltime_);
    std::swap(revenkilltime_, other->revenkilltime_);
    std::swap(killcounter_, other->killcounter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHonorKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHonorKill_descriptor_;
  metadata.reflection = stHonorKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stHonorData::kHonorFieldNumber;
#endif  // !_MSC_VER

stHonorData::stHonorData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stHonorData)
}

void stHonorData::InitAsDefaultInstance() {
}

stHonorData::stHonorData(const stHonorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stHonorData)
}

void stHonorData::SharedCtor() {
  _cached_size_ = 0;
  honor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHonorData::~stHonorData() {
  // @@protoc_insertion_point(destructor:stHonorData)
  SharedDtor();
}

void stHonorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHonorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHonorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHonorData_descriptor_;
}

const stHonorData& stHonorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stHonorData* stHonorData::default_instance_ = NULL;

stHonorData* stHonorData::New() const {
  return new stHonorData;
}

void stHonorData::Clear() {
  honor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHonorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stHonorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 honor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stHonorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stHonorData)
  return false;
#undef DO_
}

void stHonorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stHonorData)
  // optional uint32 honor = 1;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->honor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stHonorData)
}

::google::protobuf::uint8* stHonorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stHonorData)
  // optional uint32 honor = 1;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->honor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stHonorData)
  return target;
}

int stHonorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 honor = 1;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHonorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHonorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHonorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHonorData::MergeFrom(const stHonorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_honor()) {
      set_honor(from.honor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHonorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHonorData::CopyFrom(const stHonorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHonorData::IsInitialized() const {

  return true;
}

void stHonorData::Swap(stHonorData* other) {
  if (other != this) {
    std::swap(honor_, other->honor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHonorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHonorData_descriptor_;
  metadata.reflection = stHonorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stHonorLimit::kMapidFieldNumber;
const int stHonorLimit::kCharidFieldNumber;
const int stHonorLimit::kKilltimeFieldNumber;
#endif  // !_MSC_VER

stHonorLimit::stHonorLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stHonorLimit)
}

void stHonorLimit::InitAsDefaultInstance() {
}

stHonorLimit::stHonorLimit(const stHonorLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stHonorLimit)
}

void stHonorLimit::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  charid_ = 0u;
  killtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHonorLimit::~stHonorLimit() {
  // @@protoc_insertion_point(destructor:stHonorLimit)
  SharedDtor();
}

void stHonorLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHonorLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHonorLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHonorLimit_descriptor_;
}

const stHonorLimit& stHonorLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stHonorLimit* stHonorLimit::default_instance_ = NULL;

stHonorLimit* stHonorLimit::New() const {
  return new stHonorLimit;
}

void stHonorLimit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stHonorLimit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mapid_, killtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHonorLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stHonorLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killtime;
        break;
      }

      // optional uint32 killtime = 3;
      case 3: {
        if (tag == 24) {
         parse_killtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killtime_)));
          set_has_killtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stHonorLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stHonorLimit)
  return false;
#undef DO_
}

void stHonorLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stHonorLimit)
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 killtime = 3;
  if (has_killtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stHonorLimit)
}

::google::protobuf::uint8* stHonorLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stHonorLimit)
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 killtime = 3;
  if (has_killtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stHonorLimit)
  return target;
}

int stHonorLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 killtime = 3;
    if (has_killtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHonorLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHonorLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHonorLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHonorLimit::MergeFrom(const stHonorLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_killtime()) {
      set_killtime(from.killtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHonorLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHonorLimit::CopyFrom(const stHonorLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHonorLimit::IsInitialized() const {

  return true;
}

void stHonorLimit::Swap(stHonorLimit* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(killtime_, other->killtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHonorLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHonorLimit_descriptor_;
  metadata.reflection = stHonorLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAddPointLimit::kCharidFieldNumber;
const int stAddPointLimit::kAddTimeFieldNumber;
#endif  // !_MSC_VER

stAddPointLimit::stAddPointLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stAddPointLimit)
}

void stAddPointLimit::InitAsDefaultInstance() {
}

stAddPointLimit::stAddPointLimit(const stAddPointLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stAddPointLimit)
}

void stAddPointLimit::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  add_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddPointLimit::~stAddPointLimit() {
  // @@protoc_insertion_point(destructor:stAddPointLimit)
  SharedDtor();
}

void stAddPointLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAddPointLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddPointLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddPointLimit_descriptor_;
}

const stAddPointLimit& stAddPointLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stAddPointLimit* stAddPointLimit::default_instance_ = NULL;

stAddPointLimit* stAddPointLimit::New() const {
  return new stAddPointLimit;
}

void stAddPointLimit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stAddPointLimit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charid_, add_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddPointLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stAddPointLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_add_time;
        break;
      }

      // optional uint32 add_time = 2;
      case 2: {
        if (tag == 16) {
         parse_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_time_)));
          set_has_add_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stAddPointLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stAddPointLimit)
  return false;
#undef DO_
}

void stAddPointLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stAddPointLimit)
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 add_time = 2;
  if (has_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stAddPointLimit)
}

::google::protobuf::uint8* stAddPointLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stAddPointLimit)
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 add_time = 2;
  if (has_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stAddPointLimit)
  return target;
}

int stAddPointLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 add_time = 2;
    if (has_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddPointLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddPointLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddPointLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddPointLimit::MergeFrom(const stAddPointLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_add_time()) {
      set_add_time(from.add_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddPointLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddPointLimit::CopyFrom(const stAddPointLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddPointLimit::IsInitialized() const {

  return true;
}

void stAddPointLimit::Swap(stAddPointLimit* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(add_time_, other->add_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddPointLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddPointLimit_descriptor_;
  metadata.reflection = stAddPointLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveGuard::kCartBaseIdFieldNumber;
const int SaveGuard::kCartTmpIdFieldNumber;
const int SaveGuard::kCartSceneIdFieldNumber;
const int SaveGuard::kCartTimeEndFieldNumber;
#endif  // !_MSC_VER

SaveGuard::SaveGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SaveGuard)
}

void SaveGuard::InitAsDefaultInstance() {
}

SaveGuard::SaveGuard(const SaveGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SaveGuard)
}

void SaveGuard::SharedCtor() {
  _cached_size_ = 0;
  cartbaseid_ = 0u;
  carttmpid_ = 0u;
  cartsceneid_ = 0u;
  carttimeend_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveGuard::~SaveGuard() {
  // @@protoc_insertion_point(destructor:SaveGuard)
  SharedDtor();
}

void SaveGuard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveGuard_descriptor_;
}

const SaveGuard& SaveGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SaveGuard* SaveGuard::default_instance_ = NULL;

SaveGuard* SaveGuard::New() const {
  return new SaveGuard;
}

void SaveGuard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SaveGuard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cartbaseid_, carttimeend_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SaveGuard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cartBaseId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cartbaseid_)));
          set_has_cartbaseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cartTmpId;
        break;
      }

      // optional uint32 cartTmpId = 2;
      case 2: {
        if (tag == 16) {
         parse_cartTmpId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carttmpid_)));
          set_has_carttmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cartSceneId;
        break;
      }

      // optional uint32 cartSceneId = 3;
      case 3: {
        if (tag == 24) {
         parse_cartSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cartsceneid_)));
          set_has_cartsceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cartTimeEnd;
        break;
      }

      // optional uint32 cartTimeEnd = 4;
      case 4: {
        if (tag == 32) {
         parse_cartTimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carttimeend_)));
          set_has_carttimeend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SaveGuard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SaveGuard)
  return false;
#undef DO_
}

void SaveGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SaveGuard)
  // optional uint32 cartBaseId = 1;
  if (has_cartbaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cartbaseid(), output);
  }

  // optional uint32 cartTmpId = 2;
  if (has_carttmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->carttmpid(), output);
  }

  // optional uint32 cartSceneId = 3;
  if (has_cartsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cartsceneid(), output);
  }

  // optional uint32 cartTimeEnd = 4;
  if (has_carttimeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->carttimeend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SaveGuard)
}

::google::protobuf::uint8* SaveGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveGuard)
  // optional uint32 cartBaseId = 1;
  if (has_cartbaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cartbaseid(), target);
  }

  // optional uint32 cartTmpId = 2;
  if (has_carttmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->carttmpid(), target);
  }

  // optional uint32 cartSceneId = 3;
  if (has_cartsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cartsceneid(), target);
  }

  // optional uint32 cartTimeEnd = 4;
  if (has_carttimeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->carttimeend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveGuard)
  return target;
}

int SaveGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cartBaseId = 1;
    if (has_cartbaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cartbaseid());
    }

    // optional uint32 cartTmpId = 2;
    if (has_carttmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carttmpid());
    }

    // optional uint32 cartSceneId = 3;
    if (has_cartsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cartsceneid());
    }

    // optional uint32 cartTimeEnd = 4;
    if (has_carttimeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carttimeend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveGuard::MergeFrom(const SaveGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cartbaseid()) {
      set_cartbaseid(from.cartbaseid());
    }
    if (from.has_carttmpid()) {
      set_carttmpid(from.carttmpid());
    }
    if (from.has_cartsceneid()) {
      set_cartsceneid(from.cartsceneid());
    }
    if (from.has_carttimeend()) {
      set_carttimeend(from.carttimeend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveGuard::CopyFrom(const SaveGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveGuard::IsInitialized() const {

  return true;
}

void SaveGuard::Swap(SaveGuard* other) {
  if (other != this) {
    std::swap(cartbaseid_, other->cartbaseid_);
    std::swap(carttmpid_, other->carttmpid_);
    std::swap(cartsceneid_, other->cartsceneid_);
    std::swap(carttimeend_, other->carttimeend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveGuard_descriptor_;
  metadata.reflection = SaveGuard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveDropIncreaseTime::kTimeLeftForIncRateFieldNumber;
const int SaveDropIncreaseTime::kSavetimeFieldNumber;
#endif  // !_MSC_VER

SaveDropIncreaseTime::SaveDropIncreaseTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SaveDropIncreaseTime)
}

void SaveDropIncreaseTime::InitAsDefaultInstance() {
}

SaveDropIncreaseTime::SaveDropIncreaseTime(const SaveDropIncreaseTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SaveDropIncreaseTime)
}

void SaveDropIncreaseTime::SharedCtor() {
  _cached_size_ = 0;
  timeleftforincrate_ = 0u;
  savetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveDropIncreaseTime::~SaveDropIncreaseTime() {
  // @@protoc_insertion_point(destructor:SaveDropIncreaseTime)
  SharedDtor();
}

void SaveDropIncreaseTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveDropIncreaseTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveDropIncreaseTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveDropIncreaseTime_descriptor_;
}

const SaveDropIncreaseTime& SaveDropIncreaseTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SaveDropIncreaseTime* SaveDropIncreaseTime::default_instance_ = NULL;

SaveDropIncreaseTime* SaveDropIncreaseTime::New() const {
  return new SaveDropIncreaseTime;
}

void SaveDropIncreaseTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SaveDropIncreaseTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timeleftforincrate_, savetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveDropIncreaseTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SaveDropIncreaseTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeLeftForIncRate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeleftforincrate_)));
          set_has_timeleftforincrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_savetime;
        break;
      }

      // optional uint32 savetime = 2;
      case 2: {
        if (tag == 16) {
         parse_savetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savetime_)));
          set_has_savetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SaveDropIncreaseTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SaveDropIncreaseTime)
  return false;
#undef DO_
}

void SaveDropIncreaseTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SaveDropIncreaseTime)
  // optional uint32 timeLeftForIncRate = 1;
  if (has_timeleftforincrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timeleftforincrate(), output);
  }

  // optional uint32 savetime = 2;
  if (has_savetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->savetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SaveDropIncreaseTime)
}

::google::protobuf::uint8* SaveDropIncreaseTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveDropIncreaseTime)
  // optional uint32 timeLeftForIncRate = 1;
  if (has_timeleftforincrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timeleftforincrate(), target);
  }

  // optional uint32 savetime = 2;
  if (has_savetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->savetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveDropIncreaseTime)
  return target;
}

int SaveDropIncreaseTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timeLeftForIncRate = 1;
    if (has_timeleftforincrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeleftforincrate());
    }

    // optional uint32 savetime = 2;
    if (has_savetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveDropIncreaseTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveDropIncreaseTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveDropIncreaseTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveDropIncreaseTime::MergeFrom(const SaveDropIncreaseTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeleftforincrate()) {
      set_timeleftforincrate(from.timeleftforincrate());
    }
    if (from.has_savetime()) {
      set_savetime(from.savetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveDropIncreaseTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveDropIncreaseTime::CopyFrom(const SaveDropIncreaseTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveDropIncreaseTime::IsInitialized() const {

  return true;
}

void SaveDropIncreaseTime::Swap(SaveDropIncreaseTime* other) {
  if (other != this) {
    std::swap(timeleftforincrate_, other->timeleftforincrate_);
    std::swap(savetime_, other->savetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveDropIncreaseTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveDropIncreaseTime_descriptor_;
  metadata.reflection = SaveDropIncreaseTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAccelKey::kTypeFieldNumber;
const int stAccelKey::kEAccelTypeFieldNumber;
const int stAccelKey::kDwIDFieldNumber;
const int stAccelKey::kIndexFieldNumber;
#endif  // !_MSC_VER

stAccelKey::stAccelKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stAccelKey)
}

void stAccelKey::InitAsDefaultInstance() {
}

stAccelKey::stAccelKey(const stAccelKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stAccelKey)
}

void stAccelKey::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  eacceltype_ = 0u;
  dwid_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAccelKey::~stAccelKey() {
  // @@protoc_insertion_point(destructor:stAccelKey)
  SharedDtor();
}

void stAccelKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAccelKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAccelKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAccelKey_descriptor_;
}

const stAccelKey& stAccelKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stAccelKey* stAccelKey::default_instance_ = NULL;

stAccelKey* stAccelKey::New() const {
  return new stAccelKey;
}

void stAccelKey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stAccelKey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAccelKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stAccelKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eAccelType;
        break;
      }

      // optional uint32 eAccelType = 2;
      case 2: {
        if (tag == 16) {
         parse_eAccelType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eacceltype_)));
          set_has_eacceltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwID;
        break;
      }

      // optional uint32 dwID = 3;
      case 3: {
        if (tag == 24) {
         parse_dwID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwid_)));
          set_has_dwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stAccelKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stAccelKey)
  return false;
#undef DO_
}

void stAccelKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stAccelKey)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 eAccelType = 2;
  if (has_eacceltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eacceltype(), output);
  }

  // optional uint32 dwID = 3;
  if (has_dwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dwid(), output);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stAccelKey)
}

::google::protobuf::uint8* stAccelKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stAccelKey)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 eAccelType = 2;
  if (has_eacceltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eacceltype(), target);
  }

  // optional uint32 dwID = 3;
  if (has_dwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dwid(), target);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stAccelKey)
  return target;
}

int stAccelKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 eAccelType = 2;
    if (has_eacceltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eacceltype());
    }

    // optional uint32 dwID = 3;
    if (has_dwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwid());
    }

    // optional uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAccelKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAccelKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAccelKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAccelKey::MergeFrom(const stAccelKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_eacceltype()) {
      set_eacceltype(from.eacceltype());
    }
    if (from.has_dwid()) {
      set_dwid(from.dwid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAccelKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAccelKey::CopyFrom(const stAccelKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAccelKey::IsInitialized() const {

  return true;
}

void stAccelKey::Swap(stAccelKey* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(eacceltype_, other->eacceltype_);
    std::swap(dwid_, other->dwid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAccelKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAccelKey_descriptor_;
  metadata.reflection = stAccelKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stMapTermData::kMapidFieldNumber;
const int stMapTermData::kTimeFieldNumber;
#endif  // !_MSC_VER

stMapTermData::stMapTermData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stMapTermData)
}

void stMapTermData::InitAsDefaultInstance() {
}

stMapTermData::stMapTermData(const stMapTermData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stMapTermData)
}

void stMapTermData::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMapTermData::~stMapTermData() {
  // @@protoc_insertion_point(destructor:stMapTermData)
  SharedDtor();
}

void stMapTermData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMapTermData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMapTermData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMapTermData_descriptor_;
}

const stMapTermData& stMapTermData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stMapTermData* stMapTermData::default_instance_ = NULL;

stMapTermData* stMapTermData::New() const {
  return new stMapTermData;
}

void stMapTermData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stMapTermData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mapid_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMapTermData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stMapTermData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stMapTermData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stMapTermData)
  return false;
#undef DO_
}

void stMapTermData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stMapTermData)
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stMapTermData)
}

::google::protobuf::uint8* stMapTermData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stMapTermData)
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stMapTermData)
  return target;
}

int stMapTermData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMapTermData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMapTermData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMapTermData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMapTermData::MergeFrom(const stMapTermData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMapTermData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMapTermData::CopyFrom(const stMapTermData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMapTermData::IsInitialized() const {

  return true;
}

void stMapTermData::Swap(stMapTermData* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMapTermData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMapTermData_descriptor_;
  metadata.reflection = stMapTermData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderSysPresent::kOrderidFieldNumber;
#endif  // !_MSC_VER

OrderSysPresent::OrderSysPresent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrderSysPresent)
}

void OrderSysPresent::InitAsDefaultInstance() {
}

OrderSysPresent::OrderSysPresent(const OrderSysPresent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OrderSysPresent)
}

void OrderSysPresent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderSysPresent::~OrderSysPresent() {
  // @@protoc_insertion_point(destructor:OrderSysPresent)
  SharedDtor();
}

void OrderSysPresent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderSysPresent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderSysPresent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderSysPresent_descriptor_;
}

const OrderSysPresent& OrderSysPresent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

OrderSysPresent* OrderSysPresent::default_instance_ = NULL;

OrderSysPresent* OrderSysPresent::New() const {
  return new OrderSysPresent;
}

void OrderSysPresent::Clear() {
  orderid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderSysPresent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OrderSysPresent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 orderid = 1;
      case 1: {
        if (tag == 8) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_orderid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_orderid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_orderid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrderSysPresent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrderSysPresent)
  return false;
#undef DO_
}

void OrderSysPresent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrderSysPresent)
  // repeated uint32 orderid = 1;
  for (int i = 0; i < this->orderid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->orderid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OrderSysPresent)
}

::google::protobuf::uint8* OrderSysPresent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OrderSysPresent)
  // repeated uint32 orderid = 1;
  for (int i = 0; i < this->orderid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->orderid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OrderSysPresent)
  return target;
}

int OrderSysPresent::ByteSize() const {
  int total_size = 0;

  // repeated uint32 orderid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->orderid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->orderid(i));
    }
    total_size += 1 * this->orderid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderSysPresent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderSysPresent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderSysPresent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderSysPresent::MergeFrom(const OrderSysPresent& from) {
  GOOGLE_CHECK_NE(&from, this);
  orderid_.MergeFrom(from.orderid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderSysPresent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderSysPresent::CopyFrom(const OrderSysPresent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderSysPresent::IsInitialized() const {

  return true;
}

void OrderSysPresent::Swap(OrderSysPresent* other) {
  if (other != this) {
    orderid_.Swap(&other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderSysPresent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderSysPresent_descriptor_;
  metadata.reflection = OrderSysPresent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserCopyID::kTypeFieldNumber;
const int UserCopyID::kCopytypeidFieldNumber;
const int UserCopyID::kCopyidFieldNumber;
#endif  // !_MSC_VER

UserCopyID::UserCopyID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserCopyID)
}

void UserCopyID::InitAsDefaultInstance() {
}

UserCopyID::UserCopyID(const UserCopyID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserCopyID)
}

void UserCopyID::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  copytypeid_ = 0u;
  copyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCopyID::~UserCopyID() {
  // @@protoc_insertion_point(destructor:UserCopyID)
  SharedDtor();
}

void UserCopyID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCopyID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCopyID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCopyID_descriptor_;
}

const UserCopyID& UserCopyID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UserCopyID* UserCopyID::default_instance_ = NULL;

UserCopyID* UserCopyID::New() const {
  return new UserCopyID;
}

void UserCopyID::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserCopyID*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, copyid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCopyID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserCopyID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumCopySceneType_IsValid(value)) {
            set_type(static_cast< ::enumCopySceneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_copytypeid;
        break;
      }

      // optional uint32 copytypeid = 2;
      case 2: {
        if (tag == 16) {
         parse_copytypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copytypeid_)));
          set_has_copytypeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_copyid;
        break;
      }

      // optional uint32 copyid = 3;
      case 3: {
        if (tag == 24) {
         parse_copyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserCopyID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserCopyID)
  return false;
#undef DO_
}

void UserCopyID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserCopyID)
  // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 copytypeid = 2;
  if (has_copytypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copytypeid(), output);
  }

  // optional uint32 copyid = 3;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->copyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserCopyID)
}

::google::protobuf::uint8* UserCopyID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserCopyID)
  // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 copytypeid = 2;
  if (has_copytypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copytypeid(), target);
  }

  // optional uint32 copyid = 3;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->copyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserCopyID)
  return target;
}

int UserCopyID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 copytypeid = 2;
    if (has_copytypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copytypeid());
    }

    // optional uint32 copyid = 3;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCopyID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCopyID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCopyID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCopyID::MergeFrom(const UserCopyID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_copytypeid()) {
      set_copytypeid(from.copytypeid());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCopyID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCopyID::CopyFrom(const UserCopyID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCopyID::IsInitialized() const {

  return true;
}

void UserCopyID::Swap(UserCopyID* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(copytypeid_, other->copytypeid_);
    std::swap(copyid_, other->copyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCopyID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCopyID_descriptor_;
  metadata.reflection = UserCopyID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserCopyTimes::kTypeFieldNumber;
const int UserCopyTimes::kCopytypeidFieldNumber;
const int UserCopyTimes::kTimeFieldNumber;
const int UserCopyTimes::kCyctypeFieldNumber;
const int UserCopyTimes::kStateFieldNumber;
#endif  // !_MSC_VER

UserCopyTimes::UserCopyTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserCopyTimes)
}

void UserCopyTimes::InitAsDefaultInstance() {
}

UserCopyTimes::UserCopyTimes(const UserCopyTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserCopyTimes)
}

void UserCopyTimes::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  copytypeid_ = 0u;
  time_ = 0u;
  cyctype_ = 0;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCopyTimes::~UserCopyTimes() {
  // @@protoc_insertion_point(destructor:UserCopyTimes)
  SharedDtor();
}

void UserCopyTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCopyTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCopyTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCopyTimes_descriptor_;
}

const UserCopyTimes& UserCopyTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UserCopyTimes* UserCopyTimes::default_instance_ = NULL;

UserCopyTimes* UserCopyTimes::New() const {
  return new UserCopyTimes;
}

void UserCopyTimes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserCopyTimes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, state_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCopyTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserCopyTimes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumCopySceneType_IsValid(value)) {
            set_type(static_cast< ::enumCopySceneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cyctype;
        break;
      }

      // optional .TimeCycle cyctype = 3 [default = TimeCycle_None];
      case 3: {
        if (tag == 24) {
         parse_cyctype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TimeCycle_IsValid(value)) {
            set_cyctype(static_cast< ::TimeCycle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_copytypeid;
        break;
      }

      // optional uint32 copytypeid = 4;
      case 4: {
        if (tag == 32) {
         parse_copytypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copytypeid_)));
          set_has_copytypeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional uint32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserCopyTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserCopyTimes)
  return false;
#undef DO_
}

void UserCopyTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserCopyTimes)
  // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional .TimeCycle cyctype = 3 [default = TimeCycle_None];
  if (has_cyctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cyctype(), output);
  }

  // optional uint32 copytypeid = 4;
  if (has_copytypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->copytypeid(), output);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserCopyTimes)
}

::google::protobuf::uint8* UserCopyTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserCopyTimes)
  // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional .TimeCycle cyctype = 3 [default = TimeCycle_None];
  if (has_cyctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cyctype(), target);
  }

  // optional uint32 copytypeid = 4;
  if (has_copytypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->copytypeid(), target);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserCopyTimes)
  return target;
}

int UserCopyTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 copytypeid = 4;
    if (has_copytypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copytypeid());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .TimeCycle cyctype = 3 [default = TimeCycle_None];
    if (has_cyctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cyctype());
    }

    // optional uint32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCopyTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCopyTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCopyTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCopyTimes::MergeFrom(const UserCopyTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_copytypeid()) {
      set_copytypeid(from.copytypeid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_cyctype()) {
      set_cyctype(from.cyctype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCopyTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCopyTimes::CopyFrom(const UserCopyTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCopyTimes::IsInitialized() const {

  return true;
}

void UserCopyTimes::Swap(UserCopyTimes* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(copytypeid_, other->copytypeid_);
    std::swap(time_, other->time_);
    std::swap(cyctype_, other->cyctype_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCopyTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCopyTimes_descriptor_;
  metadata.reflection = UserCopyTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserCopyScore::kTypeFieldNumber;
const int UserCopyScore::kCopytypeidFieldNumber;
const int UserCopyScore::kScoreFieldNumber;
const int UserCopyScore::kNumberFieldNumber;
const int UserCopyScore::kCyctypeFieldNumber;
#endif  // !_MSC_VER

UserCopyScore::UserCopyScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserCopyScore)
}

void UserCopyScore::InitAsDefaultInstance() {
}

UserCopyScore::UserCopyScore(const UserCopyScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserCopyScore)
}

void UserCopyScore::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  copytypeid_ = 0u;
  score_ = 0u;
  number_ = 0u;
  cyctype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCopyScore::~UserCopyScore() {
  // @@protoc_insertion_point(destructor:UserCopyScore)
  SharedDtor();
}

void UserCopyScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCopyScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCopyScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCopyScore_descriptor_;
}

const UserCopyScore& UserCopyScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UserCopyScore* UserCopyScore::default_instance_ = NULL;

UserCopyScore* UserCopyScore::New() const {
  return new UserCopyScore;
}

void UserCopyScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserCopyScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, cyctype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCopyScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserCopyScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumCopySceneType_IsValid(value)) {
            set_type(static_cast< ::enumCopySceneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional uint32 number = 3;
      case 3: {
        if (tag == 24) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cyctype;
        break;
      }

      // optional .TimeCycle cyctype = 4 [default = TimeCycle_None];
      case 4: {
        if (tag == 32) {
         parse_cyctype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TimeCycle_IsValid(value)) {
            set_cyctype(static_cast< ::TimeCycle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_copytypeid;
        break;
      }

      // optional uint32 copytypeid = 5;
      case 5: {
        if (tag == 40) {
         parse_copytypeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copytypeid_)));
          set_has_copytypeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserCopyScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserCopyScore)
  return false;
#undef DO_
}

void UserCopyScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserCopyScore)
  // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number(), output);
  }

  // optional .TimeCycle cyctype = 4 [default = TimeCycle_None];
  if (has_cyctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cyctype(), output);
  }

  // optional uint32 copytypeid = 5;
  if (has_copytypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->copytypeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserCopyScore)
}

::google::protobuf::uint8* UserCopyScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserCopyScore)
  // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number(), target);
  }

  // optional .TimeCycle cyctype = 4 [default = TimeCycle_None];
  if (has_cyctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cyctype(), target);
  }

  // optional uint32 copytypeid = 5;
  if (has_copytypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->copytypeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserCopyScore)
  return target;
}

int UserCopyScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .enumCopySceneType type = 1 [default = enumCopyScene_None];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 copytypeid = 5;
    if (has_copytypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copytypeid());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional .TimeCycle cyctype = 4 [default = TimeCycle_None];
    if (has_cyctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cyctype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCopyScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCopyScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCopyScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCopyScore::MergeFrom(const UserCopyScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_copytypeid()) {
      set_copytypeid(from.copytypeid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_cyctype()) {
      set_cyctype(from.cyctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCopyScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCopyScore::CopyFrom(const UserCopyScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCopyScore::IsInitialized() const {

  return true;
}

void UserCopyScore::Swap(UserCopyScore* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(copytypeid_, other->copytypeid_);
    std::swap(score_, other->score_);
    std::swap(number_, other->number_);
    std::swap(cyctype_, other->cyctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCopyScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCopyScore_descriptor_;
  metadata.reflection = UserCopyScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserCopySceneTimes::kTeammonsterFieldNumber;
#endif  // !_MSC_VER

UserCopySceneTimes::UserCopySceneTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserCopySceneTimes)
}

void UserCopySceneTimes::InitAsDefaultInstance() {
}

UserCopySceneTimes::UserCopySceneTimes(const UserCopySceneTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserCopySceneTimes)
}

void UserCopySceneTimes::SharedCtor() {
  _cached_size_ = 0;
  teammonster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCopySceneTimes::~UserCopySceneTimes() {
  // @@protoc_insertion_point(destructor:UserCopySceneTimes)
  SharedDtor();
}

void UserCopySceneTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCopySceneTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCopySceneTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCopySceneTimes_descriptor_;
}

const UserCopySceneTimes& UserCopySceneTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UserCopySceneTimes* UserCopySceneTimes::default_instance_ = NULL;

UserCopySceneTimes* UserCopySceneTimes::New() const {
  return new UserCopySceneTimes;
}

void UserCopySceneTimes::Clear() {
  teammonster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCopySceneTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserCopySceneTimes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teammonster = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammonster_)));
          set_has_teammonster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserCopySceneTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserCopySceneTimes)
  return false;
#undef DO_
}

void UserCopySceneTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserCopySceneTimes)
  // optional uint32 teammonster = 1;
  if (has_teammonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teammonster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserCopySceneTimes)
}

::google::protobuf::uint8* UserCopySceneTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserCopySceneTimes)
  // optional uint32 teammonster = 1;
  if (has_teammonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teammonster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserCopySceneTimes)
  return target;
}

int UserCopySceneTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teammonster = 1;
    if (has_teammonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammonster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCopySceneTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCopySceneTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCopySceneTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCopySceneTimes::MergeFrom(const UserCopySceneTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teammonster()) {
      set_teammonster(from.teammonster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCopySceneTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCopySceneTimes::CopyFrom(const UserCopySceneTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCopySceneTimes::IsInitialized() const {

  return true;
}

void UserCopySceneTimes::Swap(UserCopySceneTimes* other) {
  if (other != this) {
    std::swap(teammonster_, other->teammonster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCopySceneTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCopySceneTimes_descriptor_;
  metadata.reflection = UserCopySceneTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveSkill::kSkillidFieldNumber;
const int SaveSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

SaveSkill::SaveSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SaveSkill)
}

void SaveSkill::InitAsDefaultInstance() {
}

SaveSkill::SaveSkill(const SaveSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SaveSkill)
}

void SaveSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveSkill::~SaveSkill() {
  // @@protoc_insertion_point(destructor:SaveSkill)
  SharedDtor();
}

void SaveSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveSkill_descriptor_;
}

const SaveSkill& SaveSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SaveSkill* SaveSkill::default_instance_ = NULL;

SaveSkill* SaveSkill::New() const {
  return new SaveSkill;
}

void SaveSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SaveSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skillid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SaveSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SaveSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SaveSkill)
  return false;
#undef DO_
}

void SaveSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SaveSkill)
  // required uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SaveSkill)
}

::google::protobuf::uint8* SaveSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveSkill)
  // required uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveSkill)
  return target;
}

int SaveSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveSkill::MergeFrom(const SaveSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveSkill::CopyFrom(const SaveSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SaveSkill::Swap(SaveSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveSkill_descriptor_;
  metadata.reflection = SaveSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinarySaveSkill::kSkillsFieldNumber;
#endif  // !_MSC_VER

BinarySaveSkill::BinarySaveSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinarySaveSkill)
}

void BinarySaveSkill::InitAsDefaultInstance() {
}

BinarySaveSkill::BinarySaveSkill(const BinarySaveSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BinarySaveSkill)
}

void BinarySaveSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinarySaveSkill::~BinarySaveSkill() {
  // @@protoc_insertion_point(destructor:BinarySaveSkill)
  SharedDtor();
}

void BinarySaveSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinarySaveSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinarySaveSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinarySaveSkill_descriptor_;
}

const BinarySaveSkill& BinarySaveSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BinarySaveSkill* BinarySaveSkill::default_instance_ = NULL;

BinarySaveSkill* BinarySaveSkill::New() const {
  return new BinarySaveSkill;
}

void BinarySaveSkill::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinarySaveSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinarySaveSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SaveSkill skills = 1;
      case 1: {
        if (tag == 10) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinarySaveSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinarySaveSkill)
  return false;
#undef DO_
}

void BinarySaveSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinarySaveSkill)
  // repeated .SaveSkill skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinarySaveSkill)
}

::google::protobuf::uint8* BinarySaveSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinarySaveSkill)
  // repeated .SaveSkill skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinarySaveSkill)
  return target;
}

int BinarySaveSkill::ByteSize() const {
  int total_size = 0;

  // repeated .SaveSkill skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinarySaveSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinarySaveSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinarySaveSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinarySaveSkill::MergeFrom(const BinarySaveSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinarySaveSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinarySaveSkill::CopyFrom(const BinarySaveSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinarySaveSkill::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->skills())) return false;
  return true;
}

void BinarySaveSkill::Swap(BinarySaveSkill* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinarySaveSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinarySaveSkill_descriptor_;
  metadata.reflection = BinarySaveSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoPropertyIconState::kStateidFieldNumber;
const int NoPropertyIconState::kEndtimeFieldNumber;
#endif  // !_MSC_VER

NoPropertyIconState::NoPropertyIconState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NoPropertyIconState)
}

void NoPropertyIconState::InitAsDefaultInstance() {
}

NoPropertyIconState::NoPropertyIconState(const NoPropertyIconState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NoPropertyIconState)
}

void NoPropertyIconState::SharedCtor() {
  _cached_size_ = 0;
  stateid_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoPropertyIconState::~NoPropertyIconState() {
  // @@protoc_insertion_point(destructor:NoPropertyIconState)
  SharedDtor();
}

void NoPropertyIconState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoPropertyIconState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoPropertyIconState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoPropertyIconState_descriptor_;
}

const NoPropertyIconState& NoPropertyIconState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NoPropertyIconState* NoPropertyIconState::default_instance_ = NULL;

NoPropertyIconState* NoPropertyIconState::New() const {
  return new NoPropertyIconState;
}

void NoPropertyIconState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NoPropertyIconState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stateid_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoPropertyIconState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NoPropertyIconState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NoPropertyIconState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NoPropertyIconState)
  return false;
#undef DO_
}

void NoPropertyIconState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NoPropertyIconState)
  // optional uint32 stateid = 1;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stateid(), output);
  }

  // optional uint32 endtime = 2 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NoPropertyIconState)
}

::google::protobuf::uint8* NoPropertyIconState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NoPropertyIconState)
  // optional uint32 stateid = 1;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stateid(), target);
  }

  // optional uint32 endtime = 2 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NoPropertyIconState)
  return target;
}

int NoPropertyIconState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stateid = 1;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stateid());
    }

    // optional uint32 endtime = 2 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoPropertyIconState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoPropertyIconState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoPropertyIconState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoPropertyIconState::MergeFrom(const NoPropertyIconState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoPropertyIconState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoPropertyIconState::CopyFrom(const NoPropertyIconState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoPropertyIconState::IsInitialized() const {

  return true;
}

void NoPropertyIconState::Swap(NoPropertyIconState* other) {
  if (other != this) {
    std::swap(stateid_, other->stateid_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoPropertyIconState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoPropertyIconState_descriptor_;
  metadata.reflection = NoPropertyIconState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillStatusElement_Pos::kXFieldNumber;
const int SkillStatusElement_Pos::kYFieldNumber;
#endif  // !_MSC_VER

SkillStatusElement_Pos::SkillStatusElement_Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkillStatusElement.Pos)
}

void SkillStatusElement_Pos::InitAsDefaultInstance() {
}

SkillStatusElement_Pos::SkillStatusElement_Pos(const SkillStatusElement_Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkillStatusElement.Pos)
}

void SkillStatusElement_Pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillStatusElement_Pos::~SkillStatusElement_Pos() {
  // @@protoc_insertion_point(destructor:SkillStatusElement.Pos)
  SharedDtor();
}

void SkillStatusElement_Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillStatusElement_Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillStatusElement_Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillStatusElement_Pos_descriptor_;
}

const SkillStatusElement_Pos& SkillStatusElement_Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SkillStatusElement_Pos* SkillStatusElement_Pos::default_instance_ = NULL;

SkillStatusElement_Pos* SkillStatusElement_Pos::New() const {
  return new SkillStatusElement_Pos;
}

void SkillStatusElement_Pos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillStatusElement_Pos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillStatusElement_Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkillStatusElement.Pos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkillStatusElement.Pos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkillStatusElement.Pos)
  return false;
#undef DO_
}

void SkillStatusElement_Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkillStatusElement.Pos)
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SkillStatusElement.Pos)
}

::google::protobuf::uint8* SkillStatusElement_Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkillStatusElement.Pos)
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SkillStatusElement.Pos)
  return target;
}

int SkillStatusElement_Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillStatusElement_Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillStatusElement_Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillStatusElement_Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillStatusElement_Pos::MergeFrom(const SkillStatusElement_Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillStatusElement_Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillStatusElement_Pos::CopyFrom(const SkillStatusElement_Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillStatusElement_Pos::IsInitialized() const {

  return true;
}

void SkillStatusElement_Pos::Swap(SkillStatusElement_Pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillStatusElement_Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillStatusElement_Pos_descriptor_;
  metadata.reflection = SkillStatusElement_Pos_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SkillStatusElement::kKeyidFieldNumber;
const int SkillStatusElement::kSkillidFieldNumber;
const int SkillStatusElement::kIdFieldNumber;
const int SkillStatusElement::kStateFieldNumber;
const int SkillStatusElement::kPercentFieldNumber;
const int SkillStatusElement::kValueFieldNumber;
const int SkillStatusElement::kBackvalueFieldNumber;
const int SkillStatusElement::kTimeFieldNumber;
const int SkillStatusElement::kEndtimeFieldNumber;
const int SkillStatusElement::kStepFieldNumber;
const int SkillStatusElement::kSkillTypeFieldNumber;
const int SkillStatusElement::kRefreshFieldNumber;
const int SkillStatusElement::kDirFieldNumber;
const int SkillStatusElement::kPosFieldNumber;
const int SkillStatusElement::kAttackerIDFieldNumber;
const int SkillStatusElement::kAttacktypeFieldNumber;
const int SkillStatusElement::kTargetIDFieldNumber;
const int SkillStatusElement::kTargetTypeFieldNumber;
const int SkillStatusElement::kLayersFieldNumber;
#endif  // !_MSC_VER

SkillStatusElement::SkillStatusElement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkillStatusElement)
}

void SkillStatusElement::InitAsDefaultInstance() {
  pos_ = const_cast< ::SkillStatusElement_Pos*>(&::SkillStatusElement_Pos::default_instance());
}

SkillStatusElement::SkillStatusElement(const SkillStatusElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkillStatusElement)
}

void SkillStatusElement::SharedCtor() {
  _cached_size_ = 0;
  keyid_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  id_ = 0u;
  state_ = 0u;
  percent_ = 0u;
  value_ = 0;
  backvalue_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  step_ = 0u;
  skilltype_ = 0u;
  refresh_ = false;
  dir_ = 0u;
  pos_ = NULL;
  attackerid_ = 0u;
  attacktype_ = 0u;
  targetid_ = 0u;
  targettype_ = 0u;
  layers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillStatusElement::~SkillStatusElement() {
  // @@protoc_insertion_point(destructor:SkillStatusElement)
  SharedDtor();
}

void SkillStatusElement::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void SkillStatusElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillStatusElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillStatusElement_descriptor_;
}

const SkillStatusElement& SkillStatusElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SkillStatusElement* SkillStatusElement::default_instance_ = NULL;

SkillStatusElement* SkillStatusElement::New() const {
  return new SkillStatusElement;
}

void SkillStatusElement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillStatusElement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(keyid_, time_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(endtime_, dir_);
    ZR_(attackerid_, attacktype_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::SkillStatusElement_Pos::Clear();
    }
  }
  ZR_(targetid_, layers_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillStatusElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkillStatusElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 keyid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keyid_)));
          set_has_keyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 2;
      case 2: {
        if (tag == 16) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional uint32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_percent;
        break;
      }

      // optional uint32 percent = 5;
      case 5: {
        if (tag == 40) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_value;
        break;
      }

      // optional int32 value = 6;
      case 6: {
        if (tag == 48) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_backvalue;
        break;
      }

      // optional uint32 backvalue = 7;
      case 7: {
        if (tag == 56) {
         parse_backvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backvalue_)));
          set_has_backvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional uint64 time = 8;
      case 8: {
        if (tag == 64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 9;
      case 9: {
        if (tag == 72) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_step;
        break;
      }

      // optional uint32 step = 10;
      case 10: {
        if (tag == 80) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_skillType;
        break;
      }

      // optional uint32 skillType = 11;
      case 11: {
        if (tag == 88) {
         parse_skillType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilltype_)));
          set_has_skilltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_refresh;
        break;
      }

      // optional bool refresh = 12;
      case 12: {
        if (tag == 96) {
         parse_refresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_)));
          set_has_refresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 13;
      case 13: {
        if (tag == 104) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_pos;
        break;
      }

      // optional .SkillStatusElement.Pos pos = 14;
      case 14: {
        if (tag == 114) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_attackerID;
        break;
      }

      // optional uint32 attackerID = 15;
      case 15: {
        if (tag == 120) {
         parse_attackerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackerid_)));
          set_has_attackerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_attacktype;
        break;
      }

      // optional uint32 attacktype = 16;
      case 16: {
        if (tag == 128) {
         parse_attacktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacktype_)));
          set_has_attacktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_targetID;
        break;
      }

      // optional uint32 targetID = 17;
      case 17: {
        if (tag == 136) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_targetType;
        break;
      }

      // optional uint32 targetType = 18;
      case 18: {
        if (tag == 144) {
         parse_targetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_layers;
        break;
      }

      // optional uint32 layers = 19;
      case 19: {
        if (tag == 152) {
         parse_layers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layers_)));
          set_has_layers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkillStatusElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkillStatusElement)
  return false;
#undef DO_
}

void SkillStatusElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkillStatusElement)
  // optional uint64 keyid = 1;
  if (has_keyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->keyid(), output);
  }

  // optional uint32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // optional uint32 percent = 5;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->percent(), output);
  }

  // optional int32 value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->value(), output);
  }

  // optional uint32 backvalue = 7;
  if (has_backvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->backvalue(), output);
  }

  // optional uint64 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->time(), output);
  }

  // optional uint64 endtime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->endtime(), output);
  }

  // optional uint32 step = 10;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->step(), output);
  }

  // optional uint32 skillType = 11;
  if (has_skilltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->skilltype(), output);
  }

  // optional bool refresh = 12;
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->refresh(), output);
  }

  // optional uint32 dir = 13;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->dir(), output);
  }

  // optional .SkillStatusElement.Pos pos = 14;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->pos(), output);
  }

  // optional uint32 attackerID = 15;
  if (has_attackerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->attackerid(), output);
  }

  // optional uint32 attacktype = 16;
  if (has_attacktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->attacktype(), output);
  }

  // optional uint32 targetID = 17;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->targetid(), output);
  }

  // optional uint32 targetType = 18;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->targettype(), output);
  }

  // optional uint32 layers = 19;
  if (has_layers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->layers(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SkillStatusElement)
}

::google::protobuf::uint8* SkillStatusElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkillStatusElement)
  // optional uint64 keyid = 1;
  if (has_keyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->keyid(), target);
  }

  // optional uint32 skillid = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }

  // optional uint32 percent = 5;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->percent(), target);
  }

  // optional int32 value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->value(), target);
  }

  // optional uint32 backvalue = 7;
  if (has_backvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->backvalue(), target);
  }

  // optional uint64 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->time(), target);
  }

  // optional uint64 endtime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->endtime(), target);
  }

  // optional uint32 step = 10;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->step(), target);
  }

  // optional uint32 skillType = 11;
  if (has_skilltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->skilltype(), target);
  }

  // optional bool refresh = 12;
  if (has_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->refresh(), target);
  }

  // optional uint32 dir = 13;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->dir(), target);
  }

  // optional .SkillStatusElement.Pos pos = 14;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->pos(), target);
  }

  // optional uint32 attackerID = 15;
  if (has_attackerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->attackerid(), target);
  }

  // optional uint32 attacktype = 16;
  if (has_attacktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->attacktype(), target);
  }

  // optional uint32 targetID = 17;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->targetid(), target);
  }

  // optional uint32 targetType = 18;
  if (has_targettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->targettype(), target);
  }

  // optional uint32 layers = 19;
  if (has_layers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->layers(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SkillStatusElement)
  return target;
}

int SkillStatusElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 keyid = 1;
    if (has_keyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->keyid());
    }

    // optional uint32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 percent = 5;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percent());
    }

    // optional int32 value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional uint32 backvalue = 7;
    if (has_backvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backvalue());
    }

    // optional uint64 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 endtime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 step = 10;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

    // optional uint32 skillType = 11;
    if (has_skilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilltype());
    }

    // optional bool refresh = 12;
    if (has_refresh()) {
      total_size += 1 + 1;
    }

    // optional uint32 dir = 13;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

    // optional .SkillStatusElement.Pos pos = 14;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 attackerID = 15;
    if (has_attackerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackerid());
    }

    // optional uint32 attacktype = 16;
    if (has_attacktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacktype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 targetID = 17;
    if (has_targetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }

    // optional uint32 targetType = 18;
    if (has_targettype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettype());
    }

    // optional uint32 layers = 19;
    if (has_layers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layers());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillStatusElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillStatusElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillStatusElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillStatusElement::MergeFrom(const SkillStatusElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyid()) {
      set_keyid(from.keyid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_backvalue()) {
      set_backvalue(from.backvalue());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_skilltype()) {
      set_skilltype(from.skilltype());
    }
    if (from.has_refresh()) {
      set_refresh(from.refresh());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_pos()) {
      mutable_pos()->::SkillStatusElement_Pos::MergeFrom(from.pos());
    }
    if (from.has_attackerid()) {
      set_attackerid(from.attackerid());
    }
    if (from.has_attacktype()) {
      set_attacktype(from.attacktype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_layers()) {
      set_layers(from.layers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillStatusElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillStatusElement::CopyFrom(const SkillStatusElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillStatusElement::IsInitialized() const {

  return true;
}

void SkillStatusElement::Swap(SkillStatusElement* other) {
  if (other != this) {
    std::swap(keyid_, other->keyid_);
    std::swap(skillid_, other->skillid_);
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(percent_, other->percent_);
    std::swap(value_, other->value_);
    std::swap(backvalue_, other->backvalue_);
    std::swap(time_, other->time_);
    std::swap(endtime_, other->endtime_);
    std::swap(step_, other->step_);
    std::swap(skilltype_, other->skilltype_);
    std::swap(refresh_, other->refresh_);
    std::swap(dir_, other->dir_);
    std::swap(pos_, other->pos_);
    std::swap(attackerid_, other->attackerid_);
    std::swap(attacktype_, other->attacktype_);
    std::swap(targetid_, other->targetid_);
    std::swap(targettype_, other->targettype_);
    std::swap(layers_, other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillStatusElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillStatusElement_descriptor_;
  metadata.reflection = SkillStatusElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectLocation::kLocationFieldNumber;
const int ObjectLocation::kTableFieldNumber;
const int ObjectLocation::kXFieldNumber;
const int ObjectLocation::kYFieldNumber;
#endif  // !_MSC_VER

ObjectLocation::ObjectLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObjectLocation)
}

void ObjectLocation::InitAsDefaultInstance() {
}

ObjectLocation::ObjectLocation(const ObjectLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ObjectLocation)
}

void ObjectLocation::SharedCtor() {
  _cached_size_ = 0;
  location_ = 0u;
  table_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectLocation::~ObjectLocation() {
  // @@protoc_insertion_point(destructor:ObjectLocation)
  SharedDtor();
}

void ObjectLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectLocation_descriptor_;
}

const ObjectLocation& ObjectLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ObjectLocation* ObjectLocation::default_instance_ = NULL;

ObjectLocation* ObjectLocation::New() const {
  return new ObjectLocation;
}

void ObjectLocation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ObjectLocation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(location_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ObjectLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 location = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_table;
        break;
      }

      // optional uint32 table = 2;
      case 2: {
        if (tag == 16) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ObjectLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ObjectLocation)
  return false;
#undef DO_
}

void ObjectLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ObjectLocation)
  // optional uint32 location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->location(), output);
  }

  // optional uint32 table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ObjectLocation)
}

::google::protobuf::uint8* ObjectLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectLocation)
  // optional uint32 location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->location(), target);
  }

  // optional uint32 table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectLocation)
  return target;
}

int ObjectLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location());
    }

    // optional uint32 table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectLocation::MergeFrom(const ObjectLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectLocation::CopyFrom(const ObjectLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectLocation::IsInitialized() const {

  return true;
}

void ObjectLocation::Swap(ObjectLocation* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(table_, other->table_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectLocation_descriptor_;
  metadata.reflection = ObjectLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stoneSocket::kStoneIDFieldNumber;
const int stoneSocket::kStoneRankFieldNumber;
const int stoneSocket::kValueFieldNumber;
#endif  // !_MSC_VER

stoneSocket::stoneSocket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stoneSocket)
}

void stoneSocket::InitAsDefaultInstance() {
}

stoneSocket::stoneSocket(const stoneSocket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stoneSocket)
}

void stoneSocket::SharedCtor() {
  _cached_size_ = 0;
  stoneid_ = 0u;
  stonerank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stoneSocket::~stoneSocket() {
  // @@protoc_insertion_point(destructor:stoneSocket)
  SharedDtor();
}

void stoneSocket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stoneSocket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stoneSocket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stoneSocket_descriptor_;
}

const stoneSocket& stoneSocket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stoneSocket* stoneSocket::default_instance_ = NULL;

stoneSocket* stoneSocket::New() const {
  return new stoneSocket;
}

void stoneSocket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stoneSocket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stoneid_, stonerank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stoneSocket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stoneSocket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stoneID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoneid_)));
          set_has_stoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stoneRank;
        break;
      }

      // optional uint32 stoneRank = 2;
      case 2: {
        if (tag == 16) {
         parse_stoneRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stonerank_)));
          set_has_stonerank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated uint32 value = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stoneSocket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stoneSocket)
  return false;
#undef DO_
}

void stoneSocket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stoneSocket)
  // optional uint32 stoneID = 1;
  if (has_stoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stoneid(), output);
  }

  // optional uint32 stoneRank = 2;
  if (has_stonerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stonerank(), output);
  }

  // repeated uint32 value = 3 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stoneSocket)
}

::google::protobuf::uint8* stoneSocket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stoneSocket)
  // optional uint32 stoneID = 1;
  if (has_stoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stoneid(), target);
  }

  // optional uint32 stoneRank = 2;
  if (has_stonerank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stonerank(), target);
  }

  // repeated uint32 value = 3 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stoneSocket)
  return target;
}

int stoneSocket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stoneID = 1;
    if (has_stoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoneid());
    }

    // optional uint32 stoneRank = 2;
    if (has_stonerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stonerank());
    }

  }
  // repeated uint32 value = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stoneSocket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stoneSocket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stoneSocket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stoneSocket::MergeFrom(const stoneSocket& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stoneid()) {
      set_stoneid(from.stoneid());
    }
    if (from.has_stonerank()) {
      set_stonerank(from.stonerank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stoneSocket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stoneSocket::CopyFrom(const stoneSocket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stoneSocket::IsInitialized() const {

  return true;
}

void stoneSocket::Swap(stoneSocket* other) {
  if (other != this) {
    std::swap(stoneid_, other->stoneid_);
    std::swap(stonerank_, other->stonerank_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stoneSocket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stoneSocket_descriptor_;
  metadata.reflection = stoneSocket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int diamondSoket_Diamond::kIndexFieldNumber;
const int diamondSoket_Diamond::kStatusFieldNumber;
const int diamondSoket_Diamond::kBaseidFieldNumber;
const int diamondSoket_Diamond::kUpgradeFieldNumber;
const int diamondSoket_Diamond::kTypeFieldNumber;
const int diamondSoket_Diamond::kValueFieldNumber;
#endif  // !_MSC_VER

diamondSoket_Diamond::diamondSoket_Diamond()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:diamondSoket.Diamond)
}

void diamondSoket_Diamond::InitAsDefaultInstance() {
}

diamondSoket_Diamond::diamondSoket_Diamond(const diamondSoket_Diamond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:diamondSoket.Diamond)
}

void diamondSoket_Diamond::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  status_ = 0u;
  baseid_ = 0u;
  upgrade_ = 0u;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

diamondSoket_Diamond::~diamondSoket_Diamond() {
  // @@protoc_insertion_point(destructor:diamondSoket.Diamond)
  SharedDtor();
}

void diamondSoket_Diamond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void diamondSoket_Diamond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* diamondSoket_Diamond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return diamondSoket_Diamond_descriptor_;
}

const diamondSoket_Diamond& diamondSoket_Diamond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

diamondSoket_Diamond* diamondSoket_Diamond::default_instance_ = NULL;

diamondSoket_Diamond* diamondSoket_Diamond::New() const {
  return new diamondSoket_Diamond;
}

void diamondSoket_Diamond::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<diamondSoket_Diamond*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(index_, value_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool diamondSoket_Diamond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diamondSoket.Diamond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_baseid;
        break;
      }

      // optional uint32 baseid = 2;
      case 2: {
        if (tag == 16) {
         parse_baseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseid_)));
          set_has_baseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upgrade;
        break;
      }

      // optional uint32 upgrade = 3;
      case 3: {
        if (tag == 24) {
         parse_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_)));
          set_has_upgrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional uint32 value = 5;
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }

      // optional uint32 index = 6;
      case 6: {
        if (tag == 48) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diamondSoket.Diamond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diamondSoket.Diamond)
  return false;
#undef DO_
}

void diamondSoket_Diamond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diamondSoket.Diamond)
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 baseid = 2;
  if (has_baseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->baseid(), output);
  }

  // optional uint32 upgrade = 3;
  if (has_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upgrade(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value(), output);
  }

  // optional uint32 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:diamondSoket.Diamond)
}

::google::protobuf::uint8* diamondSoket_Diamond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:diamondSoket.Diamond)
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 baseid = 2;
  if (has_baseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->baseid(), target);
  }

  // optional uint32 upgrade = 3;
  if (has_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upgrade(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value(), target);
  }

  // optional uint32 index = 6;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diamondSoket.Diamond)
  return target;
}

int diamondSoket_Diamond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 baseid = 2;
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseid());
    }

    // optional uint32 upgrade = 3;
    if (has_upgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void diamondSoket_Diamond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const diamondSoket_Diamond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const diamondSoket_Diamond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void diamondSoket_Diamond::MergeFrom(const diamondSoket_Diamond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_baseid()) {
      set_baseid(from.baseid());
    }
    if (from.has_upgrade()) {
      set_upgrade(from.upgrade());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void diamondSoket_Diamond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void diamondSoket_Diamond::CopyFrom(const diamondSoket_Diamond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool diamondSoket_Diamond::IsInitialized() const {

  return true;
}

void diamondSoket_Diamond::Swap(diamondSoket_Diamond* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(status_, other->status_);
    std::swap(baseid_, other->baseid_);
    std::swap(upgrade_, other->upgrade_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata diamondSoket_Diamond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = diamondSoket_Diamond_descriptor_;
  metadata.reflection = diamondSoket_Diamond_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int diamondSoket::kDiamondFieldNumber;
#endif  // !_MSC_VER

diamondSoket::diamondSoket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:diamondSoket)
}

void diamondSoket::InitAsDefaultInstance() {
}

diamondSoket::diamondSoket(const diamondSoket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:diamondSoket)
}

void diamondSoket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

diamondSoket::~diamondSoket() {
  // @@protoc_insertion_point(destructor:diamondSoket)
  SharedDtor();
}

void diamondSoket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void diamondSoket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* diamondSoket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return diamondSoket_descriptor_;
}

const diamondSoket& diamondSoket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

diamondSoket* diamondSoket::default_instance_ = NULL;

diamondSoket* diamondSoket::New() const {
  return new diamondSoket;
}

void diamondSoket::Clear() {
  diamond_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool diamondSoket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diamondSoket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .diamondSoket.Diamond diamond = 1;
      case 1: {
        if (tag == 10) {
         parse_diamond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diamond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_diamond;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diamondSoket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diamondSoket)
  return false;
#undef DO_
}

void diamondSoket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diamondSoket)
  // repeated .diamondSoket.Diamond diamond = 1;
  for (int i = 0; i < this->diamond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->diamond(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:diamondSoket)
}

::google::protobuf::uint8* diamondSoket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:diamondSoket)
  // repeated .diamondSoket.Diamond diamond = 1;
  for (int i = 0; i < this->diamond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->diamond(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diamondSoket)
  return target;
}

int diamondSoket::ByteSize() const {
  int total_size = 0;

  // repeated .diamondSoket.Diamond diamond = 1;
  total_size += 1 * this->diamond_size();
  for (int i = 0; i < this->diamond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diamond(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void diamondSoket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const diamondSoket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const diamondSoket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void diamondSoket::MergeFrom(const diamondSoket& from) {
  GOOGLE_CHECK_NE(&from, this);
  diamond_.MergeFrom(from.diamond_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void diamondSoket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void diamondSoket::CopyFrom(const diamondSoket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool diamondSoket::IsInitialized() const {

  return true;
}

void diamondSoket::Swap(diamondSoket* other) {
  if (other != this) {
    diamond_.Swap(&other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata diamondSoket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = diamondSoket_descriptor_;
  metadata.reflection = diamondSoket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wingData_Diamond::kBaseidFieldNumber;
const int wingData_Diamond::kLevelFieldNumber;
const int wingData_Diamond::kExpFieldNumber;
#endif  // !_MSC_VER

wingData_Diamond::wingData_Diamond()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wingData.Diamond)
}

void wingData_Diamond::InitAsDefaultInstance() {
}

wingData_Diamond::wingData_Diamond(const wingData_Diamond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wingData.Diamond)
}

void wingData_Diamond::SharedCtor() {
  _cached_size_ = 0;
  baseid_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingData_Diamond::~wingData_Diamond() {
  // @@protoc_insertion_point(destructor:wingData.Diamond)
  SharedDtor();
}

void wingData_Diamond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wingData_Diamond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingData_Diamond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingData_Diamond_descriptor_;
}

const wingData_Diamond& wingData_Diamond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

wingData_Diamond* wingData_Diamond::default_instance_ = NULL;

wingData_Diamond* wingData_Diamond::New() const {
  return new wingData_Diamond;
}

void wingData_Diamond::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<wingData_Diamond*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(baseid_, exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingData_Diamond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wingData.Diamond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 baseid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseid_)));
          set_has_baseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wingData.Diamond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wingData.Diamond)
  return false;
#undef DO_
}

void wingData_Diamond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wingData.Diamond)
  // optional uint32 baseid = 1;
  if (has_baseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->baseid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wingData.Diamond)
}

::google::protobuf::uint8* wingData_Diamond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wingData.Diamond)
  // optional uint32 baseid = 1;
  if (has_baseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->baseid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wingData.Diamond)
  return target;
}

int wingData_Diamond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 baseid = 1;
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingData_Diamond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingData_Diamond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingData_Diamond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingData_Diamond::MergeFrom(const wingData_Diamond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseid()) {
      set_baseid(from.baseid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingData_Diamond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingData_Diamond::CopyFrom(const wingData_Diamond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingData_Diamond::IsInitialized() const {

  return true;
}

void wingData_Diamond::Swap(wingData_Diamond* other) {
  if (other != this) {
    std::swap(baseid_, other->baseid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingData_Diamond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingData_Diamond_descriptor_;
  metadata.reflection = wingData_Diamond_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int wingData_ActiveSkill::kSkillidFieldNumber;
const int wingData_ActiveSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

wingData_ActiveSkill::wingData_ActiveSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wingData.ActiveSkill)
}

void wingData_ActiveSkill::InitAsDefaultInstance() {
}

wingData_ActiveSkill::wingData_ActiveSkill(const wingData_ActiveSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wingData.ActiveSkill)
}

void wingData_ActiveSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingData_ActiveSkill::~wingData_ActiveSkill() {
  // @@protoc_insertion_point(destructor:wingData.ActiveSkill)
  SharedDtor();
}

void wingData_ActiveSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wingData_ActiveSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingData_ActiveSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingData_ActiveSkill_descriptor_;
}

const wingData_ActiveSkill& wingData_ActiveSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

wingData_ActiveSkill* wingData_ActiveSkill::default_instance_ = NULL;

wingData_ActiveSkill* wingData_ActiveSkill::New() const {
  return new wingData_ActiveSkill;
}

void wingData_ActiveSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<wingData_ActiveSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skillid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingData_ActiveSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wingData.ActiveSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wingData.ActiveSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wingData.ActiveSkill)
  return false;
#undef DO_
}

void wingData_ActiveSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wingData.ActiveSkill)
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wingData.ActiveSkill)
}

::google::protobuf::uint8* wingData_ActiveSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wingData.ActiveSkill)
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wingData.ActiveSkill)
  return target;
}

int wingData_ActiveSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingData_ActiveSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingData_ActiveSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingData_ActiveSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingData_ActiveSkill::MergeFrom(const wingData_ActiveSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingData_ActiveSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingData_ActiveSkill::CopyFrom(const wingData_ActiveSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingData_ActiveSkill::IsInitialized() const {

  return true;
}

void wingData_ActiveSkill::Swap(wingData_ActiveSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingData_ActiveSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingData_ActiveSkill_descriptor_;
  metadata.reflection = wingData_ActiveSkill_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int wingData::kDiamondFieldNumber;
const int wingData::kSkillFieldNumber;
const int wingData::kDiamonditemFieldNumber;
#endif  // !_MSC_VER

wingData::wingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wingData)
}

void wingData::InitAsDefaultInstance() {
  skill_ = const_cast< ::wingData_ActiveSkill*>(&::wingData_ActiveSkill::default_instance());
  diamonditem_ = const_cast< ::wingData_Diamond*>(&::wingData_Diamond::default_instance());
}

wingData::wingData(const wingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wingData)
}

void wingData::SharedCtor() {
  _cached_size_ = 0;
  skill_ = NULL;
  diamonditem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingData::~wingData() {
  // @@protoc_insertion_point(destructor:wingData)
  SharedDtor();
}

void wingData::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
    delete diamonditem_;
  }
}

void wingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingData_descriptor_;
}

const wingData& wingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

wingData* wingData::default_instance_ = NULL;

wingData* wingData::New() const {
  return new wingData;
}

void wingData::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_skill()) {
      if (skill_ != NULL) skill_->::wingData_ActiveSkill::Clear();
    }
    if (has_diamonditem()) {
      if (diamonditem_ != NULL) diamonditem_->::wingData_Diamond::Clear();
    }
  }
  diamond_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .wingData.Diamond diamond = 1;
      case 1: {
        if (tag == 10) {
         parse_diamond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diamond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_diamond;
        if (input->ExpectTag(18)) goto parse_skill;
        break;
      }

      // optional .wingData.ActiveSkill skill = 2;
      case 2: {
        if (tag == 18) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_diamonditem;
        break;
      }

      // optional .wingData.Diamond diamonditem = 3;
      case 3: {
        if (tag == 26) {
         parse_diamonditem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diamonditem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wingData)
  return false;
#undef DO_
}

void wingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wingData)
  // repeated .wingData.Diamond diamond = 1;
  for (int i = 0; i < this->diamond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->diamond(i), output);
  }

  // optional .wingData.ActiveSkill skill = 2;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill(), output);
  }

  // optional .wingData.Diamond diamonditem = 3;
  if (has_diamonditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->diamonditem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wingData)
}

::google::protobuf::uint8* wingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wingData)
  // repeated .wingData.Diamond diamond = 1;
  for (int i = 0; i < this->diamond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->diamond(i), target);
  }

  // optional .wingData.ActiveSkill skill = 2;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill(), target);
  }

  // optional .wingData.Diamond diamonditem = 3;
  if (has_diamonditem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->diamonditem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wingData)
  return target;
}

int wingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .wingData.ActiveSkill skill = 2;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .wingData.Diamond diamonditem = 3;
    if (has_diamonditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diamonditem());
    }

  }
  // repeated .wingData.Diamond diamond = 1;
  total_size += 1 * this->diamond_size();
  for (int i = 0; i < this->diamond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diamond(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingData::MergeFrom(const wingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  diamond_.MergeFrom(from.diamond_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_skill()) {
      mutable_skill()->::wingData_ActiveSkill::MergeFrom(from.skill());
    }
    if (from.has_diamonditem()) {
      mutable_diamonditem()->::wingData_Diamond::MergeFrom(from.diamonditem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingData::CopyFrom(const wingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingData::IsInitialized() const {

  return true;
}

void wingData::Swap(wingData* other) {
  if (other != this) {
    diamond_.Swap(&other->diamond_);
    std::swap(skill_, other->skill_);
    std::swap(diamonditem_, other->diamonditem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingData_descriptor_;
  metadata.reflection = wingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flyPos::kSceneNameFieldNumber;
const int flyPos::kXFieldNumber;
const int flyPos::kYFieldNumber;
#endif  // !_MSC_VER

flyPos::flyPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyPos)
}

void flyPos::InitAsDefaultInstance() {
}

flyPos::flyPos(const flyPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flyPos)
}

void flyPos::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scene_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flyPos::~flyPos() {
  // @@protoc_insertion_point(destructor:flyPos)
  SharedDtor();
}

void flyPos::SharedDtor() {
  if (scene_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scene_name_;
  }
  if (this != default_instance_) {
  }
}

void flyPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flyPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flyPos_descriptor_;
}

const flyPos& flyPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

flyPos* flyPos::default_instance_ = NULL;

flyPos* flyPos::New() const {
  return new flyPos;
}

void flyPos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<flyPos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(x_, y_);
    if (has_scene_name()) {
      if (scene_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scene_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flyPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scene_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scene_name().data(), this->scene_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scene_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyPos)
  return false;
#undef DO_
}

void flyPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyPos)
  // optional string scene_name = 1;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scene_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scene_name(), output);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyPos)
}

::google::protobuf::uint8* flyPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyPos)
  // optional string scene_name = 1;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scene_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scene_name(), target);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyPos)
  return target;
}

int flyPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string scene_name = 1;
    if (has_scene_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene_name());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flyPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flyPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flyPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flyPos::MergeFrom(const flyPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_name()) {
      set_scene_name(from.scene_name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flyPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flyPos::CopyFrom(const flyPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flyPos::IsInitialized() const {

  return true;
}

void flyPos::Swap(flyPos* other) {
  if (other != this) {
    std::swap(scene_name_, other->scene_name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flyPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flyPos_descriptor_;
  metadata.reflection = flyPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flyMessage::kFlyposFieldNumber;
const int flyMessage::kAvailTimesFieldNumber;
#endif  // !_MSC_VER

flyMessage::flyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyMessage)
}

void flyMessage::InitAsDefaultInstance() {
}

flyMessage::flyMessage(const flyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flyMessage)
}

void flyMessage::SharedCtor() {
  _cached_size_ = 0;
  avail_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flyMessage::~flyMessage() {
  // @@protoc_insertion_point(destructor:flyMessage)
  SharedDtor();
}

void flyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flyMessage_descriptor_;
}

const flyMessage& flyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

flyMessage* flyMessage::default_instance_ = NULL;

flyMessage* flyMessage::New() const {
  return new flyMessage;
}

void flyMessage::Clear() {
  avail_times_ = 0u;
  flypos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyPos flypos = 1;
      case 1: {
        if (tag == 10) {
         parse_flypos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flypos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_flypos;
        if (input->ExpectTag(16)) goto parse_avail_times;
        break;
      }

      // optional uint32 avail_times = 2;
      case 2: {
        if (tag == 16) {
         parse_avail_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avail_times_)));
          set_has_avail_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyMessage)
  return false;
#undef DO_
}

void flyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyMessage)
  // repeated .flyPos flypos = 1;
  for (int i = 0; i < this->flypos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flypos(i), output);
  }

  // optional uint32 avail_times = 2;
  if (has_avail_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avail_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyMessage)
}

::google::protobuf::uint8* flyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyMessage)
  // repeated .flyPos flypos = 1;
  for (int i = 0; i < this->flypos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flypos(i), target);
  }

  // optional uint32 avail_times = 2;
  if (has_avail_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avail_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyMessage)
  return target;
}

int flyMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 avail_times = 2;
    if (has_avail_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avail_times());
    }

  }
  // repeated .flyPos flypos = 1;
  total_size += 1 * this->flypos_size();
  for (int i = 0; i < this->flypos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flypos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flyMessage::MergeFrom(const flyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  flypos_.MergeFrom(from.flypos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_avail_times()) {
      set_avail_times(from.avail_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flyMessage::CopyFrom(const flyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flyMessage::IsInitialized() const {

  return true;
}

void flyMessage::Swap(flyMessage* other) {
  if (other != this) {
    flypos_.Swap(&other->flypos_);
    std::swap(avail_times_, other->avail_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flyMessage_descriptor_;
  metadata.reflection = flyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyValues_Value::kKeyFieldNumber;
const int PropertyValues_Value::kValueFieldNumber;
#endif  // !_MSC_VER

PropertyValues_Value::PropertyValues_Value()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PropertyValues.Value)
}

void PropertyValues_Value::InitAsDefaultInstance() {
}

PropertyValues_Value::PropertyValues_Value(const PropertyValues_Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PropertyValues.Value)
}

void PropertyValues_Value::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyValues_Value::~PropertyValues_Value() {
  // @@protoc_insertion_point(destructor:PropertyValues.Value)
  SharedDtor();
}

void PropertyValues_Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyValues_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyValues_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyValues_Value_descriptor_;
}

const PropertyValues_Value& PropertyValues_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PropertyValues_Value* PropertyValues_Value::default_instance_ = NULL;

PropertyValues_Value* PropertyValues_Value::New() const {
  return new PropertyValues_Value;
}

void PropertyValues_Value::Clear() {
  key_ = 0;
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyValues_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PropertyValues.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PropValueType key = 1 [default = ValueType_none];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PropValueType_IsValid(value)) {
            set_key(static_cast< ::PropValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // repeated uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_value())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PropertyValues.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PropertyValues.Value)
  return false;
#undef DO_
}

void PropertyValues_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PropertyValues.Value)
  // optional .PropValueType key = 1 [default = ValueType_none];
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key(), output);
  }

  // repeated uint32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PropertyValues.Value)
}

::google::protobuf::uint8* PropertyValues_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PropertyValues.Value)
  // optional .PropValueType key = 1 [default = ValueType_none];
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key(), target);
  }

  // repeated uint32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PropertyValues.Value)
  return target;
}

int PropertyValues_Value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PropValueType key = 1 [default = ValueType_none];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key());
    }

  }
  // repeated uint32 value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyValues_Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyValues_Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyValues_Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyValues_Value::MergeFrom(const PropertyValues_Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyValues_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValues_Value::CopyFrom(const PropertyValues_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValues_Value::IsInitialized() const {

  return true;
}

void PropertyValues_Value::Swap(PropertyValues_Value* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyValues_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyValues_Value_descriptor_;
  metadata.reflection = PropertyValues_Value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PropertyValues::kValueFieldNumber;
#endif  // !_MSC_VER

PropertyValues::PropertyValues()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PropertyValues)
}

void PropertyValues::InitAsDefaultInstance() {
}

PropertyValues::PropertyValues(const PropertyValues& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PropertyValues)
}

void PropertyValues::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyValues::~PropertyValues() {
  // @@protoc_insertion_point(destructor:PropertyValues)
  SharedDtor();
}

void PropertyValues::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyValues_descriptor_;
}

const PropertyValues& PropertyValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PropertyValues* PropertyValues::default_instance_ = NULL;

PropertyValues* PropertyValues::New() const {
  return new PropertyValues;
}

void PropertyValues::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PropertyValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PropertyValues.Value value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PropertyValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PropertyValues)
  return false;
#undef DO_
}

void PropertyValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PropertyValues)
  // repeated .PropertyValues.Value value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PropertyValues)
}

::google::protobuf::uint8* PropertyValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PropertyValues)
  // repeated .PropertyValues.Value value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PropertyValues)
  return target;
}

int PropertyValues::ByteSize() const {
  int total_size = 0;

  // repeated .PropertyValues.Value value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyValues::MergeFrom(const PropertyValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValues::CopyFrom(const PropertyValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValues::IsInitialized() const {

  return true;
}

void PropertyValues::Swap(PropertyValues* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyValues_descriptor_;
  metadata.reflection = PropertyValues_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyValuesEx_Value::kKeyFieldNumber;
const int PropertyValuesEx_Value::kValueFieldNumber;
#endif  // !_MSC_VER

PropertyValuesEx_Value::PropertyValuesEx_Value()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PropertyValuesEx.Value)
}

void PropertyValuesEx_Value::InitAsDefaultInstance() {
}

PropertyValuesEx_Value::PropertyValuesEx_Value(const PropertyValuesEx_Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PropertyValuesEx.Value)
}

void PropertyValuesEx_Value::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyValuesEx_Value::~PropertyValuesEx_Value() {
  // @@protoc_insertion_point(destructor:PropertyValuesEx.Value)
  SharedDtor();
}

void PropertyValuesEx_Value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyValuesEx_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyValuesEx_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyValuesEx_Value_descriptor_;
}

const PropertyValuesEx_Value& PropertyValuesEx_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PropertyValuesEx_Value* PropertyValuesEx_Value::default_instance_ = NULL;

PropertyValuesEx_Value* PropertyValuesEx_Value::New() const {
  return new PropertyValuesEx_Value;
}

void PropertyValuesEx_Value::Clear() {
  key_ = 0;
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyValuesEx_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PropertyValuesEx.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PropValueType key = 1 [default = ValueType_none];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PropValueType_IsValid(value)) {
            set_key(static_cast< ::PropValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated .PairDataDWORD value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PropertyValuesEx.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PropertyValuesEx.Value)
  return false;
#undef DO_
}

void PropertyValuesEx_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PropertyValuesEx.Value)
  // optional .PropValueType key = 1 [default = ValueType_none];
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key(), output);
  }

  // repeated .PairDataDWORD value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PropertyValuesEx.Value)
}

::google::protobuf::uint8* PropertyValuesEx_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PropertyValuesEx.Value)
  // optional .PropValueType key = 1 [default = ValueType_none];
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key(), target);
  }

  // repeated .PairDataDWORD value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PropertyValuesEx.Value)
  return target;
}

int PropertyValuesEx_Value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PropValueType key = 1 [default = ValueType_none];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key());
    }

  }
  // repeated .PairDataDWORD value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyValuesEx_Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyValuesEx_Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyValuesEx_Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyValuesEx_Value::MergeFrom(const PropertyValuesEx_Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyValuesEx_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValuesEx_Value::CopyFrom(const PropertyValuesEx_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValuesEx_Value::IsInitialized() const {

  return true;
}

void PropertyValuesEx_Value::Swap(PropertyValuesEx_Value* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyValuesEx_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyValuesEx_Value_descriptor_;
  metadata.reflection = PropertyValuesEx_Value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PropertyValuesEx::kValueFieldNumber;
#endif  // !_MSC_VER

PropertyValuesEx::PropertyValuesEx()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PropertyValuesEx)
}

void PropertyValuesEx::InitAsDefaultInstance() {
}

PropertyValuesEx::PropertyValuesEx(const PropertyValuesEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PropertyValuesEx)
}

void PropertyValuesEx::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyValuesEx::~PropertyValuesEx() {
  // @@protoc_insertion_point(destructor:PropertyValuesEx)
  SharedDtor();
}

void PropertyValuesEx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyValuesEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyValuesEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyValuesEx_descriptor_;
}

const PropertyValuesEx& PropertyValuesEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PropertyValuesEx* PropertyValuesEx::default_instance_ = NULL;

PropertyValuesEx* PropertyValuesEx::New() const {
  return new PropertyValuesEx;
}

void PropertyValuesEx::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyValuesEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PropertyValuesEx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PropertyValuesEx.Value value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PropertyValuesEx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PropertyValuesEx)
  return false;
#undef DO_
}

void PropertyValuesEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PropertyValuesEx)
  // repeated .PropertyValuesEx.Value value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PropertyValuesEx)
}

::google::protobuf::uint8* PropertyValuesEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PropertyValuesEx)
  // repeated .PropertyValuesEx.Value value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PropertyValuesEx)
  return target;
}

int PropertyValuesEx::ByteSize() const {
  int total_size = 0;

  // repeated .PropertyValuesEx.Value value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyValuesEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyValuesEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyValuesEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyValuesEx::MergeFrom(const PropertyValuesEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyValuesEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValuesEx::CopyFrom(const PropertyValuesEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValuesEx::IsInitialized() const {

  return true;
}

void PropertyValuesEx::Swap(PropertyValuesEx* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyValuesEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyValuesEx_descriptor_;
  metadata.reflection = PropertyValuesEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipBaseValue::kStrengthFieldNumber;
const int EquipBaseValue::kDexterityFieldNumber;
const int EquipBaseValue::kMentalityFieldNumber;
const int EquipBaseValue::kConstitutionFieldNumber;
const int EquipBaseValue::kMaxhpFieldNumber;
const int EquipBaseValue::kMaxmpFieldNumber;
const int EquipBaseValue::kMinpdamageFieldNumber;
const int EquipBaseValue::kMaxpdamageFieldNumber;
const int EquipBaseValue::kMinmdamageFieldNumber;
const int EquipBaseValue::kMaxmdamageFieldNumber;
const int EquipBaseValue::kPdefenceFieldNumber;
const int EquipBaseValue::kMdefenceFieldNumber;
const int EquipBaseValue::kPdamagepFieldNumber;
const int EquipBaseValue::kMdamagepFieldNumber;
const int EquipBaseValue::kPdefencepFieldNumber;
const int EquipBaseValue::kMdefencepFieldNumber;
const int EquipBaseValue::kAttlevelFieldNumber;
const int EquipBaseValue::kDeflevelFieldNumber;
const int EquipBaseValue::kHplevelFieldNumber;
const int EquipBaseValue::kMvspeedFieldNumber;
const int EquipBaseValue::kLuckRateFieldNumber;
const int EquipBaseValue::kHitRateFieldNumber;
const int EquipBaseValue::kMissRateFieldNumber;
const int EquipBaseValue::kSmiteRateFieldNumber;
const int EquipBaseValue::kReSmiteRateFieldNumber;
const int EquipBaseValue::kBeatRateFieldNumber;
const int EquipBaseValue::kReBeatRateFieldNumber;
const int EquipBaseValue::kParalysisRateFieldNumber;
const int EquipBaseValue::kReParalysisRateFieldNumber;
const int EquipBaseValue::kColdRateFieldNumber;
const int EquipBaseValue::kReColdRateFieldNumber;
const int EquipBaseValue::kReAllRateFieldNumber;
const int EquipBaseValue::kNeglectRateFieldNumber;
const int EquipBaseValue::kDamageIncFieldNumber;
const int EquipBaseValue::kHpsuckerFieldNumber;
const int EquipBaseValue::kMpsuckerFieldNumber;
const int EquipBaseValue::kHpsuckerrateFieldNumber;
const int EquipBaseValue::kMpsuckerrateFieldNumber;
const int EquipBaseValue::kHpresumeFieldNumber;
const int EquipBaseValue::kMpresumeFieldNumber;
const int EquipBaseValue::kMoneyLostRateFieldNumber;
const int EquipBaseValue::kEquipLostRateFieldNumber;
const int EquipBaseValue::kSmiteAddFieldNumber;
const int EquipBaseValue::kFixedhurtaddFieldNumber;
const int EquipBaseValue::kFixedhurtsubFieldNumber;
const int EquipBaseValue::kReflectFieldNumber;
const int EquipBaseValue::kShieldFieldNumber;
const int EquipBaseValue::kResistFieldNumber;
const int EquipBaseValue::kButterflyFieldNumber;
const int EquipBaseValue::kReneglectrateFieldNumber;
const int EquipBaseValue::kPhyresistFieldNumber;
const int EquipBaseValue::kMagresistFieldNumber;
#endif  // !_MSC_VER

EquipBaseValue::EquipBaseValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipBaseValue)
}

void EquipBaseValue::InitAsDefaultInstance() {
}

EquipBaseValue::EquipBaseValue(const EquipBaseValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipBaseValue)
}

void EquipBaseValue::SharedCtor() {
  _cached_size_ = 0;
  strength_ = 0u;
  dexterity_ = 0u;
  mentality_ = 0u;
  constitution_ = 0u;
  maxhp_ = 0u;
  maxmp_ = 0u;
  minpdamage_ = 0u;
  maxpdamage_ = 0u;
  minmdamage_ = 0u;
  maxmdamage_ = 0u;
  pdefence_ = 0u;
  mdefence_ = 0u;
  pdamagep_ = 0u;
  mdamagep_ = 0u;
  pdefencep_ = 0u;
  mdefencep_ = 0u;
  attlevel_ = 0u;
  deflevel_ = 0u;
  hplevel_ = 0u;
  mvspeed_ = 0;
  luckrate_ = 0u;
  hitrate_ = 0u;
  missrate_ = 0u;
  smiterate_ = 0u;
  resmiterate_ = 0u;
  beatrate_ = 0u;
  rebeatrate_ = 0u;
  paralysisrate_ = 0u;
  reparalysisrate_ = 0u;
  coldrate_ = 0u;
  recoldrate_ = 0u;
  reallrate_ = 0u;
  neglectrate_ = 0u;
  damageinc_ = 0u;
  hpsucker_ = 0u;
  mpsucker_ = 0u;
  hpsuckerrate_ = 0u;
  mpsuckerrate_ = 0u;
  hpresume_ = 0u;
  mpresume_ = 0u;
  moneylostrate_ = 0u;
  equiplostrate_ = 0u;
  smiteadd_ = 0u;
  fixedhurtadd_ = 0u;
  fixedhurtsub_ = 0u;
  reflect_ = 0u;
  shield_ = 0u;
  resist_ = 0u;
  butterfly_ = 0u;
  reneglectrate_ = 0u;
  phyresist_ = 0u;
  magresist_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipBaseValue::~EquipBaseValue() {
  // @@protoc_insertion_point(destructor:EquipBaseValue)
  SharedDtor();
}

void EquipBaseValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipBaseValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipBaseValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipBaseValue_descriptor_;
}

const EquipBaseValue& EquipBaseValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

EquipBaseValue* EquipBaseValue::default_instance_ = NULL;

EquipBaseValue* EquipBaseValue::New() const {
  return new EquipBaseValue;
}

void EquipBaseValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipBaseValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(strength_, maxpdamage_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(minmdamage_, mdefencep_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(attlevel_, smiterate_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(resmiterate_, reallrate_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(neglectrate_, mpresume_);
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(moneylostrate_, resist_);
  }
  ZR_(butterfly_, magresist_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipBaseValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipBaseValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 strength = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dexterity;
        break;
      }

      // optional uint32 dexterity = 2;
      case 2: {
        if (tag == 16) {
         parse_dexterity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dexterity_)));
          set_has_dexterity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mentality;
        break;
      }

      // optional uint32 mentality = 3;
      case 3: {
        if (tag == 24) {
         parse_mentality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mentality_)));
          set_has_mentality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_constitution;
        break;
      }

      // optional uint32 constitution = 4;
      case 4: {
        if (tag == 32) {
         parse_constitution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constitution_)));
          set_has_constitution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxhp;
        break;
      }

      // optional uint32 maxhp = 5;
      case 5: {
        if (tag == 40) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxmp;
        break;
      }

      // optional uint32 maxmp = 6;
      case 6: {
        if (tag == 48) {
         parse_maxmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_minpdamage;
        break;
      }

      // optional uint32 minpdamage = 7;
      case 7: {
        if (tag == 56) {
         parse_minpdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minpdamage_)));
          set_has_minpdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxpdamage;
        break;
      }

      // optional uint32 maxpdamage = 8;
      case 8: {
        if (tag == 64) {
         parse_maxpdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpdamage_)));
          set_has_maxpdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_minmdamage;
        break;
      }

      // optional uint32 minmdamage = 9;
      case 9: {
        if (tag == 72) {
         parse_minmdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minmdamage_)));
          set_has_minmdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxmdamage;
        break;
      }

      // optional uint32 maxmdamage = 10;
      case 10: {
        if (tag == 80) {
         parse_maxmdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmdamage_)));
          set_has_maxmdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pdefence;
        break;
      }

      // optional uint32 pdefence = 11;
      case 11: {
        if (tag == 88) {
         parse_pdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdefence_)));
          set_has_pdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mdefence;
        break;
      }

      // optional uint32 mdefence = 12;
      case 12: {
        if (tag == 96) {
         parse_mdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdefence_)));
          set_has_mdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_pdamagep;
        break;
      }

      // optional uint32 pdamagep = 13;
      case 13: {
        if (tag == 104) {
         parse_pdamagep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdamagep_)));
          set_has_pdamagep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mdamagep;
        break;
      }

      // optional uint32 mdamagep = 14;
      case 14: {
        if (tag == 112) {
         parse_mdamagep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdamagep_)));
          set_has_mdamagep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_pdefencep;
        break;
      }

      // optional uint32 pdefencep = 15;
      case 15: {
        if (tag == 120) {
         parse_pdefencep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdefencep_)));
          set_has_pdefencep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_mdefencep;
        break;
      }

      // optional uint32 mdefencep = 16;
      case 16: {
        if (tag == 128) {
         parse_mdefencep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdefencep_)));
          set_has_mdefencep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_attlevel;
        break;
      }

      // optional uint32 attlevel = 17;
      case 17: {
        if (tag == 136) {
         parse_attlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attlevel_)));
          set_has_attlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_deflevel;
        break;
      }

      // optional uint32 deflevel = 18;
      case 18: {
        if (tag == 144) {
         parse_deflevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deflevel_)));
          set_has_deflevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_hplevel;
        break;
      }

      // optional uint32 hplevel = 19;
      case 19: {
        if (tag == 152) {
         parse_hplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hplevel_)));
          set_has_hplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_mvspeed;
        break;
      }

      // optional int32 mvspeed = 25;
      case 25: {
        if (tag == 200) {
         parse_mvspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mvspeed_)));
          set_has_mvspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_luckRate;
        break;
      }

      // optional uint32 luckRate = 26;
      case 26: {
        if (tag == 208) {
         parse_luckRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckrate_)));
          set_has_luckrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_hitRate;
        break;
      }

      // optional uint32 hitRate = 27;
      case 27: {
        if (tag == 216) {
         parse_hitRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_missRate;
        break;
      }

      // optional uint32 missRate = 28;
      case 28: {
        if (tag == 224) {
         parse_missRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missrate_)));
          set_has_missrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_smiteRate;
        break;
      }

      // optional uint32 smiteRate = 29;
      case 29: {
        if (tag == 232) {
         parse_smiteRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smiterate_)));
          set_has_smiterate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_reSmiteRate;
        break;
      }

      // optional uint32 reSmiteRate = 30;
      case 30: {
        if (tag == 240) {
         parse_reSmiteRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resmiterate_)));
          set_has_resmiterate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_beatRate;
        break;
      }

      // optional uint32 beatRate = 31;
      case 31: {
        if (tag == 248) {
         parse_beatRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beatrate_)));
          set_has_beatrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_reBeatRate;
        break;
      }

      // optional uint32 reBeatRate = 32;
      case 32: {
        if (tag == 256) {
         parse_reBeatRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebeatrate_)));
          set_has_rebeatrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_paralysisRate;
        break;
      }

      // optional uint32 paralysisRate = 33;
      case 33: {
        if (tag == 264) {
         parse_paralysisRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paralysisrate_)));
          set_has_paralysisrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_reParalysisRate;
        break;
      }

      // optional uint32 reParalysisRate = 34;
      case 34: {
        if (tag == 272) {
         parse_reParalysisRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reparalysisrate_)));
          set_has_reparalysisrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_coldRate;
        break;
      }

      // optional uint32 coldRate = 35;
      case 35: {
        if (tag == 280) {
         parse_coldRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coldrate_)));
          set_has_coldrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_reColdRate;
        break;
      }

      // optional uint32 reColdRate = 36;
      case 36: {
        if (tag == 288) {
         parse_reColdRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recoldrate_)));
          set_has_recoldrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_reAllRate;
        break;
      }

      // optional uint32 reAllRate = 37;
      case 37: {
        if (tag == 296) {
         parse_reAllRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reallrate_)));
          set_has_reallrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_neglectRate;
        break;
      }

      // optional uint32 neglectRate = 38;
      case 38: {
        if (tag == 304) {
         parse_neglectRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neglectrate_)));
          set_has_neglectrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_damageInc;
        break;
      }

      // optional uint32 damageInc = 39;
      case 39: {
        if (tag == 312) {
         parse_damageInc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damageinc_)));
          set_has_damageinc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_hpsucker;
        break;
      }

      // optional uint32 hpsucker = 40;
      case 40: {
        if (tag == 320) {
         parse_hpsucker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpsucker_)));
          set_has_hpsucker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_mpsucker;
        break;
      }

      // optional uint32 mpsucker = 41;
      case 41: {
        if (tag == 328) {
         parse_mpsucker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpsucker_)));
          set_has_mpsucker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_hpsuckerrate;
        break;
      }

      // optional uint32 hpsuckerrate = 42;
      case 42: {
        if (tag == 336) {
         parse_hpsuckerrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpsuckerrate_)));
          set_has_hpsuckerrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_mpsuckerrate;
        break;
      }

      // optional uint32 mpsuckerrate = 43;
      case 43: {
        if (tag == 344) {
         parse_mpsuckerrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpsuckerrate_)));
          set_has_mpsuckerrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_hpresume;
        break;
      }

      // optional uint32 hpresume = 44;
      case 44: {
        if (tag == 352) {
         parse_hpresume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpresume_)));
          set_has_hpresume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_mpresume;
        break;
      }

      // optional uint32 mpresume = 45;
      case 45: {
        if (tag == 360) {
         parse_mpresume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpresume_)));
          set_has_mpresume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_moneyLostRate;
        break;
      }

      // optional uint32 moneyLostRate = 46;
      case 46: {
        if (tag == 368) {
         parse_moneyLostRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneylostrate_)));
          set_has_moneylostrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_equipLostRate;
        break;
      }

      // optional uint32 equipLostRate = 47;
      case 47: {
        if (tag == 376) {
         parse_equipLostRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiplostrate_)));
          set_has_equiplostrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_smiteAdd;
        break;
      }

      // optional uint32 smiteAdd = 48;
      case 48: {
        if (tag == 384) {
         parse_smiteAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smiteadd_)));
          set_has_smiteadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_fixedhurtadd;
        break;
      }

      // optional uint32 fixedhurtadd = 49;
      case 49: {
        if (tag == 392) {
         parse_fixedhurtadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fixedhurtadd_)));
          set_has_fixedhurtadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_fixedhurtsub;
        break;
      }

      // optional uint32 fixedhurtsub = 50;
      case 50: {
        if (tag == 400) {
         parse_fixedhurtsub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fixedhurtsub_)));
          set_has_fixedhurtsub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_reflect;
        break;
      }

      // optional uint32 reflect = 51;
      case 51: {
        if (tag == 408) {
         parse_reflect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reflect_)));
          set_has_reflect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_shield;
        break;
      }

      // optional uint32 shield = 52;
      case 52: {
        if (tag == 416) {
         parse_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_)));
          set_has_shield();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_resist;
        break;
      }

      // optional uint32 resist = 53;
      case 53: {
        if (tag == 424) {
         parse_resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resist_)));
          set_has_resist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_butterfly;
        break;
      }

      // optional uint32 butterfly = 54;
      case 54: {
        if (tag == 432) {
         parse_butterfly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &butterfly_)));
          set_has_butterfly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_reneglectrate;
        break;
      }

      // optional uint32 reneglectrate = 55;
      case 55: {
        if (tag == 440) {
         parse_reneglectrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reneglectrate_)));
          set_has_reneglectrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_phyresist;
        break;
      }

      // optional uint32 phyresist = 56;
      case 56: {
        if (tag == 448) {
         parse_phyresist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phyresist_)));
          set_has_phyresist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_magresist;
        break;
      }

      // optional uint32 magresist = 57;
      case 57: {
        if (tag == 456) {
         parse_magresist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magresist_)));
          set_has_magresist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipBaseValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipBaseValue)
  return false;
#undef DO_
}

void EquipBaseValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipBaseValue)
  // optional uint32 strength = 1;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strength(), output);
  }

  // optional uint32 dexterity = 2;
  if (has_dexterity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dexterity(), output);
  }

  // optional uint32 mentality = 3;
  if (has_mentality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mentality(), output);
  }

  // optional uint32 constitution = 4;
  if (has_constitution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->constitution(), output);
  }

  // optional uint32 maxhp = 5;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxhp(), output);
  }

  // optional uint32 maxmp = 6;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxmp(), output);
  }

  // optional uint32 minpdamage = 7;
  if (has_minpdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->minpdamage(), output);
  }

  // optional uint32 maxpdamage = 8;
  if (has_maxpdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxpdamage(), output);
  }

  // optional uint32 minmdamage = 9;
  if (has_minmdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->minmdamage(), output);
  }

  // optional uint32 maxmdamage = 10;
  if (has_maxmdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxmdamage(), output);
  }

  // optional uint32 pdefence = 11;
  if (has_pdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pdefence(), output);
  }

  // optional uint32 mdefence = 12;
  if (has_mdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mdefence(), output);
  }

  // optional uint32 pdamagep = 13;
  if (has_pdamagep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->pdamagep(), output);
  }

  // optional uint32 mdamagep = 14;
  if (has_mdamagep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->mdamagep(), output);
  }

  // optional uint32 pdefencep = 15;
  if (has_pdefencep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pdefencep(), output);
  }

  // optional uint32 mdefencep = 16;
  if (has_mdefencep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->mdefencep(), output);
  }

  // optional uint32 attlevel = 17;
  if (has_attlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->attlevel(), output);
  }

  // optional uint32 deflevel = 18;
  if (has_deflevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->deflevel(), output);
  }

  // optional uint32 hplevel = 19;
  if (has_hplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->hplevel(), output);
  }

  // optional int32 mvspeed = 25;
  if (has_mvspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->mvspeed(), output);
  }

  // optional uint32 luckRate = 26;
  if (has_luckrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->luckrate(), output);
  }

  // optional uint32 hitRate = 27;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->hitrate(), output);
  }

  // optional uint32 missRate = 28;
  if (has_missrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->missrate(), output);
  }

  // optional uint32 smiteRate = 29;
  if (has_smiterate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->smiterate(), output);
  }

  // optional uint32 reSmiteRate = 30;
  if (has_resmiterate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->resmiterate(), output);
  }

  // optional uint32 beatRate = 31;
  if (has_beatrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->beatrate(), output);
  }

  // optional uint32 reBeatRate = 32;
  if (has_rebeatrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->rebeatrate(), output);
  }

  // optional uint32 paralysisRate = 33;
  if (has_paralysisrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->paralysisrate(), output);
  }

  // optional uint32 reParalysisRate = 34;
  if (has_reparalysisrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->reparalysisrate(), output);
  }

  // optional uint32 coldRate = 35;
  if (has_coldrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->coldrate(), output);
  }

  // optional uint32 reColdRate = 36;
  if (has_recoldrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->recoldrate(), output);
  }

  // optional uint32 reAllRate = 37;
  if (has_reallrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->reallrate(), output);
  }

  // optional uint32 neglectRate = 38;
  if (has_neglectrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->neglectrate(), output);
  }

  // optional uint32 damageInc = 39;
  if (has_damageinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->damageinc(), output);
  }

  // optional uint32 hpsucker = 40;
  if (has_hpsucker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->hpsucker(), output);
  }

  // optional uint32 mpsucker = 41;
  if (has_mpsucker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->mpsucker(), output);
  }

  // optional uint32 hpsuckerrate = 42;
  if (has_hpsuckerrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->hpsuckerrate(), output);
  }

  // optional uint32 mpsuckerrate = 43;
  if (has_mpsuckerrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->mpsuckerrate(), output);
  }

  // optional uint32 hpresume = 44;
  if (has_hpresume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->hpresume(), output);
  }

  // optional uint32 mpresume = 45;
  if (has_mpresume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->mpresume(), output);
  }

  // optional uint32 moneyLostRate = 46;
  if (has_moneylostrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->moneylostrate(), output);
  }

  // optional uint32 equipLostRate = 47;
  if (has_equiplostrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->equiplostrate(), output);
  }

  // optional uint32 smiteAdd = 48;
  if (has_smiteadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->smiteadd(), output);
  }

  // optional uint32 fixedhurtadd = 49;
  if (has_fixedhurtadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->fixedhurtadd(), output);
  }

  // optional uint32 fixedhurtsub = 50;
  if (has_fixedhurtsub()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->fixedhurtsub(), output);
  }

  // optional uint32 reflect = 51;
  if (has_reflect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->reflect(), output);
  }

  // optional uint32 shield = 52;
  if (has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->shield(), output);
  }

  // optional uint32 resist = 53;
  if (has_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->resist(), output);
  }

  // optional uint32 butterfly = 54;
  if (has_butterfly()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->butterfly(), output);
  }

  // optional uint32 reneglectrate = 55;
  if (has_reneglectrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->reneglectrate(), output);
  }

  // optional uint32 phyresist = 56;
  if (has_phyresist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->phyresist(), output);
  }

  // optional uint32 magresist = 57;
  if (has_magresist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->magresist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipBaseValue)
}

::google::protobuf::uint8* EquipBaseValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipBaseValue)
  // optional uint32 strength = 1;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->strength(), target);
  }

  // optional uint32 dexterity = 2;
  if (has_dexterity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dexterity(), target);
  }

  // optional uint32 mentality = 3;
  if (has_mentality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mentality(), target);
  }

  // optional uint32 constitution = 4;
  if (has_constitution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->constitution(), target);
  }

  // optional uint32 maxhp = 5;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxhp(), target);
  }

  // optional uint32 maxmp = 6;
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxmp(), target);
  }

  // optional uint32 minpdamage = 7;
  if (has_minpdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->minpdamage(), target);
  }

  // optional uint32 maxpdamage = 8;
  if (has_maxpdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxpdamage(), target);
  }

  // optional uint32 minmdamage = 9;
  if (has_minmdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->minmdamage(), target);
  }

  // optional uint32 maxmdamage = 10;
  if (has_maxmdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxmdamage(), target);
  }

  // optional uint32 pdefence = 11;
  if (has_pdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pdefence(), target);
  }

  // optional uint32 mdefence = 12;
  if (has_mdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mdefence(), target);
  }

  // optional uint32 pdamagep = 13;
  if (has_pdamagep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->pdamagep(), target);
  }

  // optional uint32 mdamagep = 14;
  if (has_mdamagep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->mdamagep(), target);
  }

  // optional uint32 pdefencep = 15;
  if (has_pdefencep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pdefencep(), target);
  }

  // optional uint32 mdefencep = 16;
  if (has_mdefencep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->mdefencep(), target);
  }

  // optional uint32 attlevel = 17;
  if (has_attlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->attlevel(), target);
  }

  // optional uint32 deflevel = 18;
  if (has_deflevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->deflevel(), target);
  }

  // optional uint32 hplevel = 19;
  if (has_hplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->hplevel(), target);
  }

  // optional int32 mvspeed = 25;
  if (has_mvspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->mvspeed(), target);
  }

  // optional uint32 luckRate = 26;
  if (has_luckrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->luckrate(), target);
  }

  // optional uint32 hitRate = 27;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->hitrate(), target);
  }

  // optional uint32 missRate = 28;
  if (has_missrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->missrate(), target);
  }

  // optional uint32 smiteRate = 29;
  if (has_smiterate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->smiterate(), target);
  }

  // optional uint32 reSmiteRate = 30;
  if (has_resmiterate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->resmiterate(), target);
  }

  // optional uint32 beatRate = 31;
  if (has_beatrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->beatrate(), target);
  }

  // optional uint32 reBeatRate = 32;
  if (has_rebeatrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->rebeatrate(), target);
  }

  // optional uint32 paralysisRate = 33;
  if (has_paralysisrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->paralysisrate(), target);
  }

  // optional uint32 reParalysisRate = 34;
  if (has_reparalysisrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->reparalysisrate(), target);
  }

  // optional uint32 coldRate = 35;
  if (has_coldrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->coldrate(), target);
  }

  // optional uint32 reColdRate = 36;
  if (has_recoldrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->recoldrate(), target);
  }

  // optional uint32 reAllRate = 37;
  if (has_reallrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->reallrate(), target);
  }

  // optional uint32 neglectRate = 38;
  if (has_neglectrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->neglectrate(), target);
  }

  // optional uint32 damageInc = 39;
  if (has_damageinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->damageinc(), target);
  }

  // optional uint32 hpsucker = 40;
  if (has_hpsucker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->hpsucker(), target);
  }

  // optional uint32 mpsucker = 41;
  if (has_mpsucker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->mpsucker(), target);
  }

  // optional uint32 hpsuckerrate = 42;
  if (has_hpsuckerrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->hpsuckerrate(), target);
  }

  // optional uint32 mpsuckerrate = 43;
  if (has_mpsuckerrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->mpsuckerrate(), target);
  }

  // optional uint32 hpresume = 44;
  if (has_hpresume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->hpresume(), target);
  }

  // optional uint32 mpresume = 45;
  if (has_mpresume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->mpresume(), target);
  }

  // optional uint32 moneyLostRate = 46;
  if (has_moneylostrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->moneylostrate(), target);
  }

  // optional uint32 equipLostRate = 47;
  if (has_equiplostrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->equiplostrate(), target);
  }

  // optional uint32 smiteAdd = 48;
  if (has_smiteadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->smiteadd(), target);
  }

  // optional uint32 fixedhurtadd = 49;
  if (has_fixedhurtadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->fixedhurtadd(), target);
  }

  // optional uint32 fixedhurtsub = 50;
  if (has_fixedhurtsub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->fixedhurtsub(), target);
  }

  // optional uint32 reflect = 51;
  if (has_reflect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->reflect(), target);
  }

  // optional uint32 shield = 52;
  if (has_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->shield(), target);
  }

  // optional uint32 resist = 53;
  if (has_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->resist(), target);
  }

  // optional uint32 butterfly = 54;
  if (has_butterfly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->butterfly(), target);
  }

  // optional uint32 reneglectrate = 55;
  if (has_reneglectrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->reneglectrate(), target);
  }

  // optional uint32 phyresist = 56;
  if (has_phyresist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->phyresist(), target);
  }

  // optional uint32 magresist = 57;
  if (has_magresist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->magresist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipBaseValue)
  return target;
}

int EquipBaseValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 strength = 1;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 dexterity = 2;
    if (has_dexterity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dexterity());
    }

    // optional uint32 mentality = 3;
    if (has_mentality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mentality());
    }

    // optional uint32 constitution = 4;
    if (has_constitution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constitution());
    }

    // optional uint32 maxhp = 5;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 maxmp = 6;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmp());
    }

    // optional uint32 minpdamage = 7;
    if (has_minpdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minpdamage());
    }

    // optional uint32 maxpdamage = 8;
    if (has_maxpdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpdamage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 minmdamage = 9;
    if (has_minmdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minmdamage());
    }

    // optional uint32 maxmdamage = 10;
    if (has_maxmdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmdamage());
    }

    // optional uint32 pdefence = 11;
    if (has_pdefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdefence());
    }

    // optional uint32 mdefence = 12;
    if (has_mdefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdefence());
    }

    // optional uint32 pdamagep = 13;
    if (has_pdamagep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdamagep());
    }

    // optional uint32 mdamagep = 14;
    if (has_mdamagep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdamagep());
    }

    // optional uint32 pdefencep = 15;
    if (has_pdefencep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdefencep());
    }

    // optional uint32 mdefencep = 16;
    if (has_mdefencep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdefencep());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 attlevel = 17;
    if (has_attlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attlevel());
    }

    // optional uint32 deflevel = 18;
    if (has_deflevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deflevel());
    }

    // optional uint32 hplevel = 19;
    if (has_hplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hplevel());
    }

    // optional int32 mvspeed = 25;
    if (has_mvspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mvspeed());
    }

    // optional uint32 luckRate = 26;
    if (has_luckrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckrate());
    }

    // optional uint32 hitRate = 27;
    if (has_hitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitrate());
    }

    // optional uint32 missRate = 28;
    if (has_missrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missrate());
    }

    // optional uint32 smiteRate = 29;
    if (has_smiterate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->smiterate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 reSmiteRate = 30;
    if (has_resmiterate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resmiterate());
    }

    // optional uint32 beatRate = 31;
    if (has_beatrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beatrate());
    }

    // optional uint32 reBeatRate = 32;
    if (has_rebeatrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebeatrate());
    }

    // optional uint32 paralysisRate = 33;
    if (has_paralysisrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paralysisrate());
    }

    // optional uint32 reParalysisRate = 34;
    if (has_reparalysisrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reparalysisrate());
    }

    // optional uint32 coldRate = 35;
    if (has_coldrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coldrate());
    }

    // optional uint32 reColdRate = 36;
    if (has_recoldrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recoldrate());
    }

    // optional uint32 reAllRate = 37;
    if (has_reallrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reallrate());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 neglectRate = 38;
    if (has_neglectrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neglectrate());
    }

    // optional uint32 damageInc = 39;
    if (has_damageinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damageinc());
    }

    // optional uint32 hpsucker = 40;
    if (has_hpsucker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpsucker());
    }

    // optional uint32 mpsucker = 41;
    if (has_mpsucker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpsucker());
    }

    // optional uint32 hpsuckerrate = 42;
    if (has_hpsuckerrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpsuckerrate());
    }

    // optional uint32 mpsuckerrate = 43;
    if (has_mpsuckerrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpsuckerrate());
    }

    // optional uint32 hpresume = 44;
    if (has_hpresume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpresume());
    }

    // optional uint32 mpresume = 45;
    if (has_mpresume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpresume());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 moneyLostRate = 46;
    if (has_moneylostrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneylostrate());
    }

    // optional uint32 equipLostRate = 47;
    if (has_equiplostrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiplostrate());
    }

    // optional uint32 smiteAdd = 48;
    if (has_smiteadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->smiteadd());
    }

    // optional uint32 fixedhurtadd = 49;
    if (has_fixedhurtadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fixedhurtadd());
    }

    // optional uint32 fixedhurtsub = 50;
    if (has_fixedhurtsub()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fixedhurtsub());
    }

    // optional uint32 reflect = 51;
    if (has_reflect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reflect());
    }

    // optional uint32 shield = 52;
    if (has_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shield());
    }

    // optional uint32 resist = 53;
    if (has_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resist());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 butterfly = 54;
    if (has_butterfly()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->butterfly());
    }

    // optional uint32 reneglectrate = 55;
    if (has_reneglectrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reneglectrate());
    }

    // optional uint32 phyresist = 56;
    if (has_phyresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phyresist());
    }

    // optional uint32 magresist = 57;
    if (has_magresist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magresist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipBaseValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipBaseValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipBaseValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipBaseValue::MergeFrom(const EquipBaseValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_dexterity()) {
      set_dexterity(from.dexterity());
    }
    if (from.has_mentality()) {
      set_mentality(from.mentality());
    }
    if (from.has_constitution()) {
      set_constitution(from.constitution());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
    if (from.has_minpdamage()) {
      set_minpdamage(from.minpdamage());
    }
    if (from.has_maxpdamage()) {
      set_maxpdamage(from.maxpdamage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_minmdamage()) {
      set_minmdamage(from.minmdamage());
    }
    if (from.has_maxmdamage()) {
      set_maxmdamage(from.maxmdamage());
    }
    if (from.has_pdefence()) {
      set_pdefence(from.pdefence());
    }
    if (from.has_mdefence()) {
      set_mdefence(from.mdefence());
    }
    if (from.has_pdamagep()) {
      set_pdamagep(from.pdamagep());
    }
    if (from.has_mdamagep()) {
      set_mdamagep(from.mdamagep());
    }
    if (from.has_pdefencep()) {
      set_pdefencep(from.pdefencep());
    }
    if (from.has_mdefencep()) {
      set_mdefencep(from.mdefencep());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_attlevel()) {
      set_attlevel(from.attlevel());
    }
    if (from.has_deflevel()) {
      set_deflevel(from.deflevel());
    }
    if (from.has_hplevel()) {
      set_hplevel(from.hplevel());
    }
    if (from.has_mvspeed()) {
      set_mvspeed(from.mvspeed());
    }
    if (from.has_luckrate()) {
      set_luckrate(from.luckrate());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_missrate()) {
      set_missrate(from.missrate());
    }
    if (from.has_smiterate()) {
      set_smiterate(from.smiterate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_resmiterate()) {
      set_resmiterate(from.resmiterate());
    }
    if (from.has_beatrate()) {
      set_beatrate(from.beatrate());
    }
    if (from.has_rebeatrate()) {
      set_rebeatrate(from.rebeatrate());
    }
    if (from.has_paralysisrate()) {
      set_paralysisrate(from.paralysisrate());
    }
    if (from.has_reparalysisrate()) {
      set_reparalysisrate(from.reparalysisrate());
    }
    if (from.has_coldrate()) {
      set_coldrate(from.coldrate());
    }
    if (from.has_recoldrate()) {
      set_recoldrate(from.recoldrate());
    }
    if (from.has_reallrate()) {
      set_reallrate(from.reallrate());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_neglectrate()) {
      set_neglectrate(from.neglectrate());
    }
    if (from.has_damageinc()) {
      set_damageinc(from.damageinc());
    }
    if (from.has_hpsucker()) {
      set_hpsucker(from.hpsucker());
    }
    if (from.has_mpsucker()) {
      set_mpsucker(from.mpsucker());
    }
    if (from.has_hpsuckerrate()) {
      set_hpsuckerrate(from.hpsuckerrate());
    }
    if (from.has_mpsuckerrate()) {
      set_mpsuckerrate(from.mpsuckerrate());
    }
    if (from.has_hpresume()) {
      set_hpresume(from.hpresume());
    }
    if (from.has_mpresume()) {
      set_mpresume(from.mpresume());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_moneylostrate()) {
      set_moneylostrate(from.moneylostrate());
    }
    if (from.has_equiplostrate()) {
      set_equiplostrate(from.equiplostrate());
    }
    if (from.has_smiteadd()) {
      set_smiteadd(from.smiteadd());
    }
    if (from.has_fixedhurtadd()) {
      set_fixedhurtadd(from.fixedhurtadd());
    }
    if (from.has_fixedhurtsub()) {
      set_fixedhurtsub(from.fixedhurtsub());
    }
    if (from.has_reflect()) {
      set_reflect(from.reflect());
    }
    if (from.has_shield()) {
      set_shield(from.shield());
    }
    if (from.has_resist()) {
      set_resist(from.resist());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_butterfly()) {
      set_butterfly(from.butterfly());
    }
    if (from.has_reneglectrate()) {
      set_reneglectrate(from.reneglectrate());
    }
    if (from.has_phyresist()) {
      set_phyresist(from.phyresist());
    }
    if (from.has_magresist()) {
      set_magresist(from.magresist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipBaseValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipBaseValue::CopyFrom(const EquipBaseValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipBaseValue::IsInitialized() const {

  return true;
}

void EquipBaseValue::Swap(EquipBaseValue* other) {
  if (other != this) {
    std::swap(strength_, other->strength_);
    std::swap(dexterity_, other->dexterity_);
    std::swap(mentality_, other->mentality_);
    std::swap(constitution_, other->constitution_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(minpdamage_, other->minpdamage_);
    std::swap(maxpdamage_, other->maxpdamage_);
    std::swap(minmdamage_, other->minmdamage_);
    std::swap(maxmdamage_, other->maxmdamage_);
    std::swap(pdefence_, other->pdefence_);
    std::swap(mdefence_, other->mdefence_);
    std::swap(pdamagep_, other->pdamagep_);
    std::swap(mdamagep_, other->mdamagep_);
    std::swap(pdefencep_, other->pdefencep_);
    std::swap(mdefencep_, other->mdefencep_);
    std::swap(attlevel_, other->attlevel_);
    std::swap(deflevel_, other->deflevel_);
    std::swap(hplevel_, other->hplevel_);
    std::swap(mvspeed_, other->mvspeed_);
    std::swap(luckrate_, other->luckrate_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(missrate_, other->missrate_);
    std::swap(smiterate_, other->smiterate_);
    std::swap(resmiterate_, other->resmiterate_);
    std::swap(beatrate_, other->beatrate_);
    std::swap(rebeatrate_, other->rebeatrate_);
    std::swap(paralysisrate_, other->paralysisrate_);
    std::swap(reparalysisrate_, other->reparalysisrate_);
    std::swap(coldrate_, other->coldrate_);
    std::swap(recoldrate_, other->recoldrate_);
    std::swap(reallrate_, other->reallrate_);
    std::swap(neglectrate_, other->neglectrate_);
    std::swap(damageinc_, other->damageinc_);
    std::swap(hpsucker_, other->hpsucker_);
    std::swap(mpsucker_, other->mpsucker_);
    std::swap(hpsuckerrate_, other->hpsuckerrate_);
    std::swap(mpsuckerrate_, other->mpsuckerrate_);
    std::swap(hpresume_, other->hpresume_);
    std::swap(mpresume_, other->mpresume_);
    std::swap(moneylostrate_, other->moneylostrate_);
    std::swap(equiplostrate_, other->equiplostrate_);
    std::swap(smiteadd_, other->smiteadd_);
    std::swap(fixedhurtadd_, other->fixedhurtadd_);
    std::swap(fixedhurtsub_, other->fixedhurtsub_);
    std::swap(reflect_, other->reflect_);
    std::swap(shield_, other->shield_);
    std::swap(resist_, other->resist_);
    std::swap(butterfly_, other->butterfly_);
    std::swap(reneglectrate_, other->reneglectrate_);
    std::swap(phyresist_, other->phyresist_);
    std::swap(magresist_, other->magresist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipBaseValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipBaseValue_descriptor_;
  metadata.reflection = EquipBaseValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSplitData::kPosFieldNumber;
const int EquipSplitData::kTypeFieldNumber;
const int EquipSplitData::kValueFieldNumber;
const int EquipSplitData::kLevelFieldNumber;
#endif  // !_MSC_VER

EquipSplitData::EquipSplitData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipSplitData)
}

void EquipSplitData::InitAsDefaultInstance() {
}

EquipSplitData::EquipSplitData(const EquipSplitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipSplitData)
}

void EquipSplitData::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  type_ = 0u;
  value_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSplitData::~EquipSplitData() {
  // @@protoc_insertion_point(destructor:EquipSplitData)
  SharedDtor();
}

void EquipSplitData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSplitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSplitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSplitData_descriptor_;
}

const EquipSplitData& EquipSplitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

EquipSplitData* EquipSplitData::default_instance_ = NULL;

EquipSplitData* EquipSplitData::New() const {
  return new EquipSplitData;
}

void EquipSplitData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipSplitData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSplitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipSplitData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipSplitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipSplitData)
  return false;
#undef DO_
}

void EquipSplitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipSplitData)
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipSplitData)
}

::google::protobuf::uint8* EquipSplitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipSplitData)
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipSplitData)
  return target;
}

int EquipSplitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSplitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSplitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSplitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSplitData::MergeFrom(const EquipSplitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSplitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSplitData::CopyFrom(const EquipSplitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSplitData::IsInitialized() const {

  return true;
}

void EquipSplitData::Swap(EquipSplitData* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSplitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSplitData_descriptor_;
  metadata.reflection = EquipSplitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_Object::kThisIDFieldNumber;
const int t_Object::kObjIDFieldNumber;
const int t_Object::kNameFieldNumber;
const int t_Object::kMakerFieldNumber;
const int t_Object::kPosFieldNumber;
const int t_Object::kNumFieldNumber;
const int t_Object::kUpgradeFieldNumber;
const int t_Object::kKindFieldNumber;
const int t_Object::kLevelFieldNumber;
const int t_Object::kNeedlevelFieldNumber;
const int t_Object::kMaxDurFieldNumber;
const int t_Object::kDurFieldNumber;
const int t_Object::kBindFieldNumber;
const int t_Object::kTimertypeFieldNumber;
const int t_Object::kLifetimeFieldNumber;
const int t_Object::kCreateIDFieldNumber;
const int t_Object::kMakeruleidFieldNumber;
const int t_Object::kEquipPropFieldNumber;
const int t_Object::kEquippropexFieldNumber;
const int t_Object::kSkillFieldNumber;
const int t_Object::kSubneedlevelFieldNumber;
const int t_Object::kFivetypeFieldNumber;
const int t_Object::kFivepointFieldNumber;
const int t_Object::kStarFieldNumber;
const int t_Object::kDiamondbonusFieldNumber;
const int t_Object::kDiamondsoketFieldNumber;
const int t_Object::kWingFieldNumber;
const int t_Object::kActiveFieldNumber;
const int t_Object::kBoxExpFieldNumber;
const int t_Object::kFlyFieldNumber;
const int t_Object::kHorseidFieldNumber;
const int t_Object::kSpvalueFieldNumber;
const int t_Object::kFriendvalueFieldNumber;
const int t_Object::kUseposFieldNumber;
const int t_Object::kElementattrFieldNumber;
const int t_Object::kSuittypeFieldNumber;
const int t_Object::kSuitvalueFieldNumber;
const int t_Object::kSplitvalueFieldNumber;
const int t_Object::kSuitactFieldNumber;
#endif  // !_MSC_VER

t_Object::t_Object()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:t_Object)
}

void t_Object::InitAsDefaultInstance() {
  pos_ = const_cast< ::ObjectLocation*>(&::ObjectLocation::default_instance());
  equipprop_ = const_cast< ::PropertyValues*>(&::PropertyValues::default_instance());
  equippropex_ = const_cast< ::PropertyValuesEx*>(&::PropertyValuesEx::default_instance());
  diamondsoket_ = const_cast< ::diamondSoket*>(&::diamondSoket::default_instance());
  wing_ = const_cast< ::wingData*>(&::wingData::default_instance());
  fly_ = const_cast< ::flyMessage*>(&::flyMessage::default_instance());
  splitvalue_ = const_cast< ::EquipSplitData*>(&::EquipSplitData::default_instance());
}

t_Object::t_Object(const t_Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:t_Object)
}

void t_Object::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  thisid_ = 0u;
  objid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maker_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = NULL;
  num_ = 0u;
  upgrade_ = 0u;
  kind_ = 0u;
  level_ = 0u;
  needlevel_ = 0u;
  maxdur_ = 0u;
  dur_ = 0u;
  bind_ = 0u;
  timertype_ = 0u;
  lifetime_ = 0u;
  createid_ = GOOGLE_ULONGLONG(0);
  makeruleid_ = 0u;
  equipprop_ = NULL;
  equippropex_ = NULL;
  subneedlevel_ = 0u;
  fivetype_ = 0u;
  fivepoint_ = 0u;
  star_ = 0u;
  diamondbonus_ = 0u;
  diamondsoket_ = NULL;
  wing_ = NULL;
  active_ = 0u;
  boxexp_ = 0u;
  fly_ = NULL;
  horseid_ = 0u;
  spvalue_ = 0u;
  friendvalue_ = 0u;
  usepos_ = 0u;
  elementattr_ = -1;
  suittype_ = 0u;
  suitvalue_ = 0u;
  splitvalue_ = NULL;
  suitact_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_Object::~t_Object() {
  // @@protoc_insertion_point(destructor:t_Object)
  SharedDtor();
}

void t_Object::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (maker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete maker_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete equipprop_;
    delete equippropex_;
    delete diamondsoket_;
    delete wing_;
    delete fly_;
    delete splitvalue_;
  }
}

void t_Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_Object_descriptor_;
}

const t_Object& t_Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

t_Object* t_Object::default_instance_ = NULL;

t_Object* t_Object::New() const {
  return new t_Object;
}

void t_Object::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<t_Object*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(thisid_, objid_);
    ZR_(num_, kind_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_maker()) {
      if (maker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        maker_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::ObjectLocation::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(level_, createid_);
  }
  if (_has_bits_[16 / 32] & 16187392) {
    ZR_(makeruleid_, subneedlevel_);
    ZR_(fivetype_, star_);
    if (has_equipprop()) {
      if (equipprop_ != NULL) equipprop_->::PropertyValues::Clear();
    }
    if (has_equippropex()) {
      if (equippropex_ != NULL) equippropex_->::PropertyValuesEx::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(active_, boxexp_);
    ZR_(horseid_, spvalue_);
    diamondbonus_ = 0u;
    if (has_diamondsoket()) {
      if (diamondsoket_ != NULL) diamondsoket_->::diamondSoket::Clear();
    }
    if (has_wing()) {
      if (wing_ != NULL) wing_->::wingData::Clear();
    }
    if (has_fly()) {
      if (fly_ != NULL) fly_->::flyMessage::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 127) {
    ZR_(friendvalue_, usepos_);
    ZR_(suitvalue_, suitact_);
    elementattr_ = -1;
    suittype_ = 0u;
    if (has_splitvalue()) {
      if (splitvalue_ != NULL) splitvalue_->::EquipSplitData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:t_Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 thisID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thisid_)));
          set_has_thisid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objID;
        break;
      }

      // optional uint32 objID = 2;
      case 2: {
        if (tag == 16) {
         parse_objID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_maker;
        break;
      }

      // optional string maker = 4;
      case 4: {
        if (tag == 34) {
         parse_maker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->maker().data(), this->maker().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "maker");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .ObjectLocation pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional uint32 num = 6;
      case 6: {
        if (tag == 48) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_upgrade;
        break;
      }

      // optional uint32 upgrade = 7;
      case 7: {
        if (tag == 56) {
         parse_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_)));
          set_has_upgrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_kind;
        break;
      }

      // optional uint32 kind = 8;
      case 8: {
        if (tag == 64) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_needlevel;
        break;
      }

      // optional uint32 needlevel = 9;
      case 9: {
        if (tag == 72) {
         parse_needlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needlevel_)));
          set_has_needlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxDur;
        break;
      }

      // optional uint32 maxDur = 10;
      case 10: {
        if (tag == 80) {
         parse_maxDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxdur_)));
          set_has_maxdur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dur;
        break;
      }

      // optional uint32 dur = 11;
      case 11: {
        if (tag == 88) {
         parse_dur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dur_)));
          set_has_dur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_bind;
        break;
      }

      // optional uint32 bind = 12;
      case 12: {
        if (tag == 96) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_timertype;
        break;
      }

      // optional uint32 timertype = 13;
      case 13: {
        if (tag == 104) {
         parse_timertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timertype_)));
          set_has_timertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_lifetime;
        break;
      }

      // optional uint32 lifetime = 14;
      case 14: {
        if (tag == 112) {
         parse_lifetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_level;
        break;
      }

      // optional uint32 level = 15;
      case 15: {
        if (tag == 120) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_createID;
        break;
      }

      // optional uint64 createID = 16;
      case 16: {
        if (tag == 128) {
         parse_createID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createid_)));
          set_has_createid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_makeruleid;
        break;
      }

      // optional uint32 makeruleid = 20;
      case 20: {
        if (tag == 160) {
         parse_makeruleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &makeruleid_)));
          set_has_makeruleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_equipProp;
        break;
      }

      // optional .PropertyValues equipProp = 22;
      case 22: {
        if (tag == 178) {
         parse_equipProp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipprop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_equippropex;
        break;
      }

      // optional .PropertyValuesEx equippropex = 23;
      case 23: {
        if (tag == 186) {
         parse_equippropex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equippropex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_skill;
        break;
      }

      // repeated uint32 skill = 25;
      case 25: {
        if (tag == 200) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200, input, this->mutable_skill())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_skill;
        if (input->ExpectTag(208)) goto parse_subneedlevel;
        break;
      }

      // optional uint32 subneedlevel = 26;
      case 26: {
        if (tag == 208) {
         parse_subneedlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subneedlevel_)));
          set_has_subneedlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_fivetype;
        break;
      }

      // optional uint32 fivetype = 31;
      case 31: {
        if (tag == 248) {
         parse_fivetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fivetype_)));
          set_has_fivetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_fivepoint;
        break;
      }

      // optional uint32 fivepoint = 32;
      case 32: {
        if (tag == 256) {
         parse_fivepoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fivepoint_)));
          set_has_fivepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_star;
        break;
      }

      // optional uint32 star = 33;
      case 33: {
        if (tag == 264) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_diamondbonus;
        break;
      }

      // optional uint32 diamondbonus = 36;
      case 36: {
        if (tag == 288) {
         parse_diamondbonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondbonus_)));
          set_has_diamondbonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_diamondsoket;
        break;
      }

      // optional .diamondSoket diamondsoket = 37;
      case 37: {
        if (tag == 298) {
         parse_diamondsoket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diamondsoket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_wing;
        break;
      }

      // optional .wingData wing = 38;
      case 38: {
        if (tag == 306) {
         parse_wing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_active;
        break;
      }

      // optional uint32 active = 40;
      case 40: {
        if (tag == 320) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_boxExp;
        break;
      }

      // optional uint32 boxExp = 41;
      case 41: {
        if (tag == 328) {
         parse_boxExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxexp_)));
          set_has_boxexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_fly;
        break;
      }

      // optional .flyMessage fly = 43;
      case 43: {
        if (tag == 346) {
         parse_fly:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fly()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_horseid;
        break;
      }

      // optional uint32 horseid = 44;
      case 44: {
        if (tag == 352) {
         parse_horseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_spvalue;
        break;
      }

      // optional uint32 spvalue = 45;
      case 45: {
        if (tag == 360) {
         parse_spvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spvalue_)));
          set_has_spvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_friendvalue;
        break;
      }

      // optional uint32 friendvalue = 46;
      case 46: {
        if (tag == 368) {
         parse_friendvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendvalue_)));
          set_has_friendvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_usepos;
        break;
      }

      // optional uint32 usepos = 47;
      case 47: {
        if (tag == 376) {
         parse_usepos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usepos_)));
          set_has_usepos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_elementattr;
        break;
      }

      // optional int32 elementattr = 48 [default = -1];
      case 48: {
        if (tag == 384) {
         parse_elementattr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elementattr_)));
          set_has_elementattr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_suittype;
        break;
      }

      // optional uint32 suittype = 49;
      case 49: {
        if (tag == 392) {
         parse_suittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suittype_)));
          set_has_suittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_suitvalue;
        break;
      }

      // optional uint32 suitvalue = 50;
      case 50: {
        if (tag == 400) {
         parse_suitvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suitvalue_)));
          set_has_suitvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_splitvalue;
        break;
      }

      // optional .EquipSplitData splitvalue = 51;
      case 51: {
        if (tag == 410) {
         parse_splitvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splitvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_suitact;
        break;
      }

      // optional bool suitact = 52 [default = false];
      case 52: {
        if (tag == 416) {
         parse_suitact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suitact_)));
          set_has_suitact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:t_Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:t_Object)
  return false;
#undef DO_
}

void t_Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:t_Object)
  // optional uint32 thisID = 1;
  if (has_thisid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thisid(), output);
  }

  // optional uint32 objID = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->objid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string maker = 4;
  if (has_maker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maker().data(), this->maker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "maker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->maker(), output);
  }

  // optional .ObjectLocation pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  // optional uint32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num(), output);
  }

  // optional uint32 upgrade = 7;
  if (has_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->upgrade(), output);
  }

  // optional uint32 kind = 8;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kind(), output);
  }

  // optional uint32 needlevel = 9;
  if (has_needlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->needlevel(), output);
  }

  // optional uint32 maxDur = 10;
  if (has_maxdur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxdur(), output);
  }

  // optional uint32 dur = 11;
  if (has_dur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->dur(), output);
  }

  // optional uint32 bind = 12;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->bind(), output);
  }

  // optional uint32 timertype = 13;
  if (has_timertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->timertype(), output);
  }

  // optional uint32 lifetime = 14;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->lifetime(), output);
  }

  // optional uint32 level = 15;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level(), output);
  }

  // optional uint64 createID = 16;
  if (has_createid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->createid(), output);
  }

  // optional uint32 makeruleid = 20;
  if (has_makeruleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->makeruleid(), output);
  }

  // optional .PropertyValues equipProp = 22;
  if (has_equipprop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->equipprop(), output);
  }

  // optional .PropertyValuesEx equippropex = 23;
  if (has_equippropex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->equippropex(), output);
  }

  // repeated uint32 skill = 25;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->skill(i), output);
  }

  // optional uint32 subneedlevel = 26;
  if (has_subneedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->subneedlevel(), output);
  }

  // optional uint32 fivetype = 31;
  if (has_fivetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->fivetype(), output);
  }

  // optional uint32 fivepoint = 32;
  if (has_fivepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->fivepoint(), output);
  }

  // optional uint32 star = 33;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->star(), output);
  }

  // optional uint32 diamondbonus = 36;
  if (has_diamondbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->diamondbonus(), output);
  }

  // optional .diamondSoket diamondsoket = 37;
  if (has_diamondsoket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->diamondsoket(), output);
  }

  // optional .wingData wing = 38;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->wing(), output);
  }

  // optional uint32 active = 40;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->active(), output);
  }

  // optional uint32 boxExp = 41;
  if (has_boxexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->boxexp(), output);
  }

  // optional .flyMessage fly = 43;
  if (has_fly()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->fly(), output);
  }

  // optional uint32 horseid = 44;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->horseid(), output);
  }

  // optional uint32 spvalue = 45;
  if (has_spvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->spvalue(), output);
  }

  // optional uint32 friendvalue = 46;
  if (has_friendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->friendvalue(), output);
  }

  // optional uint32 usepos = 47;
  if (has_usepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->usepos(), output);
  }

  // optional int32 elementattr = 48 [default = -1];
  if (has_elementattr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->elementattr(), output);
  }

  // optional uint32 suittype = 49;
  if (has_suittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->suittype(), output);
  }

  // optional uint32 suitvalue = 50;
  if (has_suitvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->suitvalue(), output);
  }

  // optional .EquipSplitData splitvalue = 51;
  if (has_splitvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->splitvalue(), output);
  }

  // optional bool suitact = 52 [default = false];
  if (has_suitact()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->suitact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:t_Object)
}

::google::protobuf::uint8* t_Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:t_Object)
  // optional uint32 thisID = 1;
  if (has_thisid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thisid(), target);
  }

  // optional uint32 objID = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->objid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string maker = 4;
  if (has_maker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->maker().data(), this->maker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "maker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->maker(), target);
  }

  // optional .ObjectLocation pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  // optional uint32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num(), target);
  }

  // optional uint32 upgrade = 7;
  if (has_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->upgrade(), target);
  }

  // optional uint32 kind = 8;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kind(), target);
  }

  // optional uint32 needlevel = 9;
  if (has_needlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->needlevel(), target);
  }

  // optional uint32 maxDur = 10;
  if (has_maxdur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxdur(), target);
  }

  // optional uint32 dur = 11;
  if (has_dur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->dur(), target);
  }

  // optional uint32 bind = 12;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->bind(), target);
  }

  // optional uint32 timertype = 13;
  if (has_timertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->timertype(), target);
  }

  // optional uint32 lifetime = 14;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->lifetime(), target);
  }

  // optional uint32 level = 15;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->level(), target);
  }

  // optional uint64 createID = 16;
  if (has_createid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->createid(), target);
  }

  // optional uint32 makeruleid = 20;
  if (has_makeruleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->makeruleid(), target);
  }

  // optional .PropertyValues equipProp = 22;
  if (has_equipprop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->equipprop(), target);
  }

  // optional .PropertyValuesEx equippropex = 23;
  if (has_equippropex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->equippropex(), target);
  }

  // repeated uint32 skill = 25;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(25, this->skill(i), target);
  }

  // optional uint32 subneedlevel = 26;
  if (has_subneedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->subneedlevel(), target);
  }

  // optional uint32 fivetype = 31;
  if (has_fivetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->fivetype(), target);
  }

  // optional uint32 fivepoint = 32;
  if (has_fivepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->fivepoint(), target);
  }

  // optional uint32 star = 33;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->star(), target);
  }

  // optional uint32 diamondbonus = 36;
  if (has_diamondbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->diamondbonus(), target);
  }

  // optional .diamondSoket diamondsoket = 37;
  if (has_diamondsoket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->diamondsoket(), target);
  }

  // optional .wingData wing = 38;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->wing(), target);
  }

  // optional uint32 active = 40;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->active(), target);
  }

  // optional uint32 boxExp = 41;
  if (has_boxexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->boxexp(), target);
  }

  // optional .flyMessage fly = 43;
  if (has_fly()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->fly(), target);
  }

  // optional uint32 horseid = 44;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->horseid(), target);
  }

  // optional uint32 spvalue = 45;
  if (has_spvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->spvalue(), target);
  }

  // optional uint32 friendvalue = 46;
  if (has_friendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->friendvalue(), target);
  }

  // optional uint32 usepos = 47;
  if (has_usepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->usepos(), target);
  }

  // optional int32 elementattr = 48 [default = -1];
  if (has_elementattr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->elementattr(), target);
  }

  // optional uint32 suittype = 49;
  if (has_suittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->suittype(), target);
  }

  // optional uint32 suitvalue = 50;
  if (has_suitvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->suitvalue(), target);
  }

  // optional .EquipSplitData splitvalue = 51;
  if (has_splitvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->splitvalue(), target);
  }

  // optional bool suitact = 52 [default = false];
  if (has_suitact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->suitact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t_Object)
  return target;
}

int t_Object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 thisID = 1;
    if (has_thisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thisid());
    }

    // optional uint32 objID = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string maker = 4;
    if (has_maker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maker());
    }

    // optional .ObjectLocation pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 upgrade = 7;
    if (has_upgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade());
    }

    // optional uint32 kind = 8;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 needlevel = 9;
    if (has_needlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needlevel());
    }

    // optional uint32 maxDur = 10;
    if (has_maxdur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxdur());
    }

    // optional uint32 dur = 11;
    if (has_dur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dur());
    }

    // optional uint32 bind = 12;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind());
    }

    // optional uint32 timertype = 13;
    if (has_timertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timertype());
    }

    // optional uint32 lifetime = 14;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime());
    }

    // optional uint64 createID = 16;
    if (has_createid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 makeruleid = 20;
    if (has_makeruleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->makeruleid());
    }

    // optional .PropertyValues equipProp = 22;
    if (has_equipprop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipprop());
    }

    // optional .PropertyValuesEx equippropex = 23;
    if (has_equippropex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equippropex());
    }

    // optional uint32 subneedlevel = 26;
    if (has_subneedlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subneedlevel());
    }

    // optional uint32 fivetype = 31;
    if (has_fivetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fivetype());
    }

    // optional uint32 fivepoint = 32;
    if (has_fivepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fivepoint());
    }

    // optional uint32 star = 33;
    if (has_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 diamondbonus = 36;
    if (has_diamondbonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondbonus());
    }

    // optional .diamondSoket diamondsoket = 37;
    if (has_diamondsoket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diamondsoket());
    }

    // optional .wingData wing = 38;
    if (has_wing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wing());
    }

    // optional uint32 active = 40;
    if (has_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active());
    }

    // optional uint32 boxExp = 41;
    if (has_boxexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxexp());
    }

    // optional .flyMessage fly = 43;
    if (has_fly()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fly());
    }

    // optional uint32 horseid = 44;
    if (has_horseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horseid());
    }

    // optional uint32 spvalue = 45;
    if (has_spvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spvalue());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 friendvalue = 46;
    if (has_friendvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendvalue());
    }

    // optional uint32 usepos = 47;
    if (has_usepos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usepos());
    }

    // optional int32 elementattr = 48 [default = -1];
    if (has_elementattr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elementattr());
    }

    // optional uint32 suittype = 49;
    if (has_suittype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suittype());
    }

    // optional uint32 suitvalue = 50;
    if (has_suitvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suitvalue());
    }

    // optional .EquipSplitData splitvalue = 51;
    if (has_splitvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->splitvalue());
    }

    // optional bool suitact = 52 [default = false];
    if (has_suitact()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint32 skill = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skill(i));
    }
    total_size += 2 * this->skill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_Object::MergeFrom(const t_Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thisid()) {
      set_thisid(from.thisid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_maker()) {
      set_maker(from.maker());
    }
    if (from.has_pos()) {
      mutable_pos()->::ObjectLocation::MergeFrom(from.pos());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_upgrade()) {
      set_upgrade(from.upgrade());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_needlevel()) {
      set_needlevel(from.needlevel());
    }
    if (from.has_maxdur()) {
      set_maxdur(from.maxdur());
    }
    if (from.has_dur()) {
      set_dur(from.dur());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_timertype()) {
      set_timertype(from.timertype());
    }
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_createid()) {
      set_createid(from.createid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_makeruleid()) {
      set_makeruleid(from.makeruleid());
    }
    if (from.has_equipprop()) {
      mutable_equipprop()->::PropertyValues::MergeFrom(from.equipprop());
    }
    if (from.has_equippropex()) {
      mutable_equippropex()->::PropertyValuesEx::MergeFrom(from.equippropex());
    }
    if (from.has_subneedlevel()) {
      set_subneedlevel(from.subneedlevel());
    }
    if (from.has_fivetype()) {
      set_fivetype(from.fivetype());
    }
    if (from.has_fivepoint()) {
      set_fivepoint(from.fivepoint());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_diamondbonus()) {
      set_diamondbonus(from.diamondbonus());
    }
    if (from.has_diamondsoket()) {
      mutable_diamondsoket()->::diamondSoket::MergeFrom(from.diamondsoket());
    }
    if (from.has_wing()) {
      mutable_wing()->::wingData::MergeFrom(from.wing());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_boxexp()) {
      set_boxexp(from.boxexp());
    }
    if (from.has_fly()) {
      mutable_fly()->::flyMessage::MergeFrom(from.fly());
    }
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
    if (from.has_spvalue()) {
      set_spvalue(from.spvalue());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_friendvalue()) {
      set_friendvalue(from.friendvalue());
    }
    if (from.has_usepos()) {
      set_usepos(from.usepos());
    }
    if (from.has_elementattr()) {
      set_elementattr(from.elementattr());
    }
    if (from.has_suittype()) {
      set_suittype(from.suittype());
    }
    if (from.has_suitvalue()) {
      set_suitvalue(from.suitvalue());
    }
    if (from.has_splitvalue()) {
      mutable_splitvalue()->::EquipSplitData::MergeFrom(from.splitvalue());
    }
    if (from.has_suitact()) {
      set_suitact(from.suitact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_Object::CopyFrom(const t_Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_Object::IsInitialized() const {

  return true;
}

void t_Object::Swap(t_Object* other) {
  if (other != this) {
    std::swap(thisid_, other->thisid_);
    std::swap(objid_, other->objid_);
    std::swap(name_, other->name_);
    std::swap(maker_, other->maker_);
    std::swap(pos_, other->pos_);
    std::swap(num_, other->num_);
    std::swap(upgrade_, other->upgrade_);
    std::swap(kind_, other->kind_);
    std::swap(level_, other->level_);
    std::swap(needlevel_, other->needlevel_);
    std::swap(maxdur_, other->maxdur_);
    std::swap(dur_, other->dur_);
    std::swap(bind_, other->bind_);
    std::swap(timertype_, other->timertype_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(createid_, other->createid_);
    std::swap(makeruleid_, other->makeruleid_);
    std::swap(equipprop_, other->equipprop_);
    std::swap(equippropex_, other->equippropex_);
    skill_.Swap(&other->skill_);
    std::swap(subneedlevel_, other->subneedlevel_);
    std::swap(fivetype_, other->fivetype_);
    std::swap(fivepoint_, other->fivepoint_);
    std::swap(star_, other->star_);
    std::swap(diamondbonus_, other->diamondbonus_);
    std::swap(diamondsoket_, other->diamondsoket_);
    std::swap(wing_, other->wing_);
    std::swap(active_, other->active_);
    std::swap(boxexp_, other->boxexp_);
    std::swap(fly_, other->fly_);
    std::swap(horseid_, other->horseid_);
    std::swap(spvalue_, other->spvalue_);
    std::swap(friendvalue_, other->friendvalue_);
    std::swap(usepos_, other->usepos_);
    std::swap(elementattr_, other->elementattr_);
    std::swap(suittype_, other->suittype_);
    std::swap(suitvalue_, other->suitvalue_);
    std::swap(splitvalue_, other->splitvalue_);
    std::swap(suitact_, other->suitact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_Object_descriptor_;
  metadata.reflection = t_Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectMapData::kIdFieldNumber;
const int ObjectMapData::kTempIdFieldNumber;
const int ObjectMapData::kTypeFieldNumber;
const int ObjectMapData::kNumFieldNumber;
const int ObjectMapData::kXFieldNumber;
const int ObjectMapData::kYFieldNumber;
const int ObjectMapData::kKindFieldNumber;
const int ObjectMapData::kProtectTimeFieldNumber;
const int ObjectMapData::kDisappearTimeFieldNumber;
const int ObjectMapData::kOwnerTypeFieldNumber;
const int ObjectMapData::kOwnerIdFieldNumber;
const int ObjectMapData::kPrefixkeysFieldNumber;
#endif  // !_MSC_VER

ObjectMapData::ObjectMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObjectMapData)
}

void ObjectMapData::InitAsDefaultInstance() {
}

ObjectMapData::ObjectMapData(const ObjectMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ObjectMapData)
}

void ObjectMapData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  temp_id_ = 0u;
  type_ = 0u;
  num_ = 0u;
  x_ = 0u;
  y_ = 0u;
  kind_ = 0u;
  protect_time_ = 0u;
  disappear_time_ = 0u;
  owner_type_ = 0u;
  owner_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectMapData::~ObjectMapData() {
  // @@protoc_insertion_point(destructor:ObjectMapData)
  SharedDtor();
}

void ObjectMapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectMapData_descriptor_;
}

const ObjectMapData& ObjectMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ObjectMapData* ObjectMapData::default_instance_ = NULL;

ObjectMapData* ObjectMapData::New() const {
  return new ObjectMapData;
}

void ObjectMapData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ObjectMapData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, protect_time_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(disappear_time_, owner_type_);
    owner_id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  prefixkeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ObjectMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_temp_id;
        break;
      }

      // optional uint32 temp_id = 2;
      case 2: {
        if (tag == 16) {
         parse_temp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp_id_)));
          set_has_temp_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }

      // optional uint32 x = 5;
      case 5: {
        if (tag == 40) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }

      // optional uint32 y = 6;
      case 6: {
        if (tag == 48) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_kind;
        break;
      }

      // optional uint32 kind = 7;
      case 7: {
        if (tag == 56) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_protect_time;
        break;
      }

      // optional uint32 protect_time = 8;
      case 8: {
        if (tag == 64) {
         parse_protect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protect_time_)));
          set_has_protect_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_disappear_time;
        break;
      }

      // optional uint32 disappear_time = 9;
      case 9: {
        if (tag == 72) {
         parse_disappear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disappear_time_)));
          set_has_disappear_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_owner_type;
        break;
      }

      // optional uint32 owner_type = 10;
      case 10: {
        if (tag == 80) {
         parse_owner_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_type_)));
          set_has_owner_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_owner_id;
        break;
      }

      // optional uint32 owner_id = 11;
      case 11: {
        if (tag == 88) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_prefixkeys;
        break;
      }

      // repeated uint32 prefixkeys = 12;
      case 12: {
        if (tag == 96) {
         parse_prefixkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_prefixkeys())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_prefixkeys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_prefixkeys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ObjectMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ObjectMapData)
  return false;
#undef DO_
}

void ObjectMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ObjectMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 temp_id = 2;
  if (has_temp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->temp_id(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->x(), output);
  }

  // optional uint32 y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->y(), output);
  }

  // optional uint32 kind = 7;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kind(), output);
  }

  // optional uint32 protect_time = 8;
  if (has_protect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protect_time(), output);
  }

  // optional uint32 disappear_time = 9;
  if (has_disappear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->disappear_time(), output);
  }

  // optional uint32 owner_type = 10;
  if (has_owner_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->owner_type(), output);
  }

  // optional uint32 owner_id = 11;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->owner_id(), output);
  }

  // repeated uint32 prefixkeys = 12;
  for (int i = 0; i < this->prefixkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->prefixkeys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ObjectMapData)
}

::google::protobuf::uint8* ObjectMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 temp_id = 2;
  if (has_temp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->temp_id(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional uint32 x = 5;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->x(), target);
  }

  // optional uint32 y = 6;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->y(), target);
  }

  // optional uint32 kind = 7;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kind(), target);
  }

  // optional uint32 protect_time = 8;
  if (has_protect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->protect_time(), target);
  }

  // optional uint32 disappear_time = 9;
  if (has_disappear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->disappear_time(), target);
  }

  // optional uint32 owner_type = 10;
  if (has_owner_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->owner_type(), target);
  }

  // optional uint32 owner_id = 11;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->owner_id(), target);
  }

  // repeated uint32 prefixkeys = 12;
  for (int i = 0; i < this->prefixkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->prefixkeys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectMapData)
  return target;
}

int ObjectMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 temp_id = 2;
    if (has_temp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temp_id());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 x = 5;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 6;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 kind = 7;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional uint32 protect_time = 8;
    if (has_protect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protect_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 disappear_time = 9;
    if (has_disappear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disappear_time());
    }

    // optional uint32 owner_type = 10;
    if (has_owner_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_type());
    }

    // optional uint32 owner_id = 11;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

  }
  // repeated uint32 prefixkeys = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->prefixkeys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->prefixkeys(i));
    }
    total_size += 1 * this->prefixkeys_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectMapData::MergeFrom(const ObjectMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  prefixkeys_.MergeFrom(from.prefixkeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_temp_id()) {
      set_temp_id(from.temp_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_protect_time()) {
      set_protect_time(from.protect_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_disappear_time()) {
      set_disappear_time(from.disappear_time());
    }
    if (from.has_owner_type()) {
      set_owner_type(from.owner_type());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectMapData::CopyFrom(const ObjectMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectMapData::IsInitialized() const {

  return true;
}

void ObjectMapData::Swap(ObjectMapData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(temp_id_, other->temp_id_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(kind_, other->kind_);
    std::swap(protect_time_, other->protect_time_);
    std::swap(disappear_time_, other->disappear_time_);
    std::swap(owner_type_, other->owner_type_);
    std::swap(owner_id_, other->owner_id_);
    prefixkeys_.Swap(&other->prefixkeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectMapData_descriptor_;
  metadata.reflection = ObjectMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stChatChannel::kSenderNameFieldNumber;
const int stChatChannel::kTextFieldNumber;
const int stChatChannel::kPetDataFieldNumber;
const int stChatChannel::kItemsFieldNumber;
const int stChatChannel::kHorsedataFieldNumber;
#endif  // !_MSC_VER

stChatChannel::stChatChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stChatChannel)
}

void stChatChannel::InitAsDefaultInstance() {
}

stChatChannel::stChatChannel(const stChatChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stChatChannel)
}

void stChatChannel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChatChannel::~stChatChannel() {
  // @@protoc_insertion_point(destructor:stChatChannel)
  SharedDtor();
}

void stChatChannel::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendername_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void stChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChatChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChatChannel_descriptor_;
}

const stChatChannel& stChatChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stChatChannel* stChatChannel::default_instance_ = NULL;

stChatChannel* stChatChannel::New() const {
  return new stChatChannel;
}

void stChatChannel::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendername_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  petdata_.Clear();
  items_.Clear();
  horsedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string senderName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_petData;
        break;
      }

      // repeated .ScenePetData petData = 3;
      case 3: {
        if (tag == 26) {
         parse_petData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_petData;
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .t_Object items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(42)) goto parse_horsedata;
        break;
      }

      // repeated .HorseExtraData horsedata = 5;
      case 5: {
        if (tag == 42) {
         parse_horsedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_horsedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_horsedata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stChatChannel)
  return false;
#undef DO_
}

void stChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stChatChannel)
  // optional string senderName = 1;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sendername(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // repeated .ScenePetData petData = 3;
  for (int i = 0; i < this->petdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->petdata(i), output);
  }

  // repeated .t_Object items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  // repeated .HorseExtraData horsedata = 5;
  for (int i = 0; i < this->horsedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->horsedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stChatChannel)
}

::google::protobuf::uint8* stChatChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stChatChannel)
  // optional string senderName = 1;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sendername(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // repeated .ScenePetData petData = 3;
  for (int i = 0; i < this->petdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->petdata(i), target);
  }

  // repeated .t_Object items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  // repeated .HorseExtraData horsedata = 5;
  for (int i = 0; i < this->horsedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->horsedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stChatChannel)
  return target;
}

int stChatChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string senderName = 1;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  // repeated .ScenePetData petData = 3;
  total_size += 1 * this->petdata_size();
  for (int i = 0; i < this->petdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petdata(i));
  }

  // repeated .t_Object items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .HorseExtraData horsedata = 5;
  total_size += 1 * this->horsedata_size();
  for (int i = 0; i < this->horsedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->horsedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChatChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChatChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChatChannel::MergeFrom(const stChatChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  petdata_.MergeFrom(from.petdata_);
  items_.MergeFrom(from.items_);
  horsedata_.MergeFrom(from.horsedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChatChannel::CopyFrom(const stChatChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChatChannel::IsInitialized() const {

  return true;
}

void stChatChannel::Swap(stChatChannel* other) {
  if (other != this) {
    std::swap(sendername_, other->sendername_);
    std::swap(text_, other->text_);
    petdata_.Swap(&other->petdata_);
    items_.Swap(&other->items_);
    horsedata_.Swap(&other->horsedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChatChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChatChannel_descriptor_;
  metadata.reflection = stChatChannel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserShopItemView_PriceTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserShopItemView_PriceTypes_descriptor_;
}
bool stUserShopItemView_PriceTypes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserShopItemView_PriceTypes stUserShopItemView::Silver;
const stUserShopItemView_PriceTypes stUserShopItemView::Gold;
const stUserShopItemView_PriceTypes stUserShopItemView::PriceTypes_MIN;
const stUserShopItemView_PriceTypes stUserShopItemView::PriceTypes_MAX;
const int stUserShopItemView::PriceTypes_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserShopItemView::kItemFieldNumber;
const int stUserShopItemView::kUnitPriceFieldNumber;
const int stUserShopItemView::kNumFieldNumber;
const int stUserShopItemView::kXFieldNumber;
const int stUserShopItemView::kYFieldNumber;
const int stUserShopItemView::kPriceTypeFieldNumber;
const int stUserShopItemView::kTaxFieldNumber;
#endif  // !_MSC_VER

stUserShopItemView::stUserShopItemView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stUserShopItemView)
}

void stUserShopItemView::InitAsDefaultInstance() {
  item_ = const_cast< ::t_Object*>(&::t_Object::default_instance());
}

stUserShopItemView::stUserShopItemView(const stUserShopItemView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stUserShopItemView)
}

void stUserShopItemView::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  unitprice_ = 0u;
  num_ = 0u;
  x_ = 0u;
  y_ = 0u;
  price_type_ = 0;
  tax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserShopItemView::~stUserShopItemView() {
  // @@protoc_insertion_point(destructor:stUserShopItemView)
  SharedDtor();
}

void stUserShopItemView::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void stUserShopItemView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserShopItemView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserShopItemView_descriptor_;
}

const stUserShopItemView& stUserShopItemView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

stUserShopItemView* stUserShopItemView::default_instance_ = NULL;

stUserShopItemView* stUserShopItemView::New() const {
  return new stUserShopItemView;
}

void stUserShopItemView::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stUserShopItemView*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(unitprice_, tax_);
    if (has_item()) {
      if (item_ != NULL) item_->::t_Object::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserShopItemView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stUserShopItemView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .t_Object item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unitPrice;
        break;
      }

      // optional uint32 unitPrice = 2;
      case 2: {
        if (tag == 16) {
         parse_unitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitprice_)));
          set_has_unitprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }

      // optional uint32 x = 4;
      case 4: {
        if (tag == 32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }

      // optional uint32 y = 5;
      case 5: {
        if (tag == 40) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_price_type;
        break;
      }

      // optional .stUserShopItemView.PriceTypes price_type = 6 [default = Silver];
      case 6: {
        if (tag == 48) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::stUserShopItemView_PriceTypes_IsValid(value)) {
            set_price_type(static_cast< ::stUserShopItemView_PriceTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tax;
        break;
      }

      // optional uint32 tax = 7;
      case 7: {
        if (tag == 56) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stUserShopItemView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stUserShopItemView)
  return false;
#undef DO_
}

void stUserShopItemView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stUserShopItemView)
  // optional .t_Object item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // optional uint32 unitPrice = 2;
  if (has_unitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unitprice(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional uint32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->x(), output);
  }

  // optional uint32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->y(), output);
  }

  // optional .stUserShopItemView.PriceTypes price_type = 6 [default = Silver];
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->price_type(), output);
  }

  // optional uint32 tax = 7;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stUserShopItemView)
}

::google::protobuf::uint8* stUserShopItemView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stUserShopItemView)
  // optional .t_Object item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // optional uint32 unitPrice = 2;
  if (has_unitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unitprice(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional uint32 x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->x(), target);
  }

  // optional uint32 y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->y(), target);
  }

  // optional .stUserShopItemView.PriceTypes price_type = 6 [default = Silver];
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->price_type(), target);
  }

  // optional uint32 tax = 7;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stUserShopItemView)
  return target;
}

int stUserShopItemView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .t_Object item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional uint32 unitPrice = 2;
    if (has_unitprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unitprice());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional .stUserShopItemView.PriceTypes price_type = 6 [default = Silver];
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }

    // optional uint32 tax = 7;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserShopItemView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserShopItemView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserShopItemView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserShopItemView::MergeFrom(const stUserShopItemView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::t_Object::MergeFrom(from.item());
    }
    if (from.has_unitprice()) {
      set_unitprice(from.unitprice());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserShopItemView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserShopItemView::CopyFrom(const stUserShopItemView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserShopItemView::IsInitialized() const {

  return true;
}

void stUserShopItemView::Swap(stUserShopItemView* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(unitprice_, other->unitprice_);
    std::swap(num_, other->num_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(price_type_, other->price_type_);
    std::swap(tax_, other->tax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserShopItemView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserShopItemView_descriptor_;
  metadata.reflection = stUserShopItemView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LockItem::kIdFieldNumber;
const int LockItem::kValueFieldNumber;
#endif  // !_MSC_VER

LockItem::LockItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LockItem)
}

void LockItem::InitAsDefaultInstance() {
}

LockItem::LockItem(const LockItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LockItem)
}

void LockItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LockItem::~LockItem() {
  // @@protoc_insertion_point(destructor:LockItem)
  SharedDtor();
}

void LockItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LockItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockItem_descriptor_;
}

const LockItem& LockItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LockItem* LockItem::default_instance_ = NULL;

LockItem* LockItem::New() const {
  return new LockItem;
}

void LockItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LockItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LockItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LockItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LockItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LockItem)
  return false;
#undef DO_
}

void LockItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LockItem)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LockItem)
}

::google::protobuf::uint8* LockItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LockItem)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LockItem)
  return target;
}

int LockItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LockItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LockItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LockItem::MergeFrom(const LockItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LockItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockItem::CopyFrom(const LockItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockItem::IsInitialized() const {

  return true;
}

void LockItem::Swap(LockItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LockItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LockItem_descriptor_;
  metadata.reflection = LockItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CounterNum::kIdFieldNumber;
const int CounterNum::kTimeFieldNumber;
const int CounterNum::kValueForDayFieldNumber;
const int CounterNum::kValueForWeekFieldNumber;
const int CounterNum::kValueForMonthFieldNumber;
const int CounterNum::kValueForYearFieldNumber;
const int CounterNum::kValueForeverFieldNumber;
#endif  // !_MSC_VER

CounterNum::CounterNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CounterNum)
}

void CounterNum::InitAsDefaultInstance() {
}

CounterNum::CounterNum(const CounterNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CounterNum)
}

void CounterNum::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  valueforday_ = 0u;
  valueforweek_ = 0u;
  valueformonth_ = 0u;
  valueforyear_ = 0u;
  valueforever_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterNum::~CounterNum() {
  // @@protoc_insertion_point(destructor:CounterNum)
  SharedDtor();
}

void CounterNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounterNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterNum_descriptor_;
}

const CounterNum& CounterNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CounterNum* CounterNum::default_instance_ = NULL;

CounterNum* CounterNum::New() const {
  return new CounterNum;
}

void CounterNum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CounterNum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, valueforever_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounterNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CounterNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_valueForDay;
        break;
      }

      // optional uint32 valueForDay = 3;
      case 3: {
        if (tag == 24) {
         parse_valueForDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valueforday_)));
          set_has_valueforday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_valueForWeek;
        break;
      }

      // optional uint32 valueForWeek = 4;
      case 4: {
        if (tag == 32) {
         parse_valueForWeek:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valueforweek_)));
          set_has_valueforweek();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_valueForMonth;
        break;
      }

      // optional uint32 valueForMonth = 5;
      case 5: {
        if (tag == 40) {
         parse_valueForMonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valueformonth_)));
          set_has_valueformonth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_valueForYear;
        break;
      }

      // optional uint32 valueForYear = 6;
      case 6: {
        if (tag == 48) {
         parse_valueForYear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valueforyear_)));
          set_has_valueforyear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_valueForever;
        break;
      }

      // optional uint32 valueForever = 7;
      case 7: {
        if (tag == 56) {
         parse_valueForever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valueforever_)));
          set_has_valueforever();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CounterNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CounterNum)
  return false;
#undef DO_
}

void CounterNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CounterNum)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional uint32 valueForDay = 3;
  if (has_valueforday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->valueforday(), output);
  }

  // optional uint32 valueForWeek = 4;
  if (has_valueforweek()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->valueforweek(), output);
  }

  // optional uint32 valueForMonth = 5;
  if (has_valueformonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->valueformonth(), output);
  }

  // optional uint32 valueForYear = 6;
  if (has_valueforyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->valueforyear(), output);
  }

  // optional uint32 valueForever = 7;
  if (has_valueforever()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->valueforever(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CounterNum)
}

::google::protobuf::uint8* CounterNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CounterNum)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional uint32 valueForDay = 3;
  if (has_valueforday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->valueforday(), target);
  }

  // optional uint32 valueForWeek = 4;
  if (has_valueforweek()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->valueforweek(), target);
  }

  // optional uint32 valueForMonth = 5;
  if (has_valueformonth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->valueformonth(), target);
  }

  // optional uint32 valueForYear = 6;
  if (has_valueforyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->valueforyear(), target);
  }

  // optional uint32 valueForever = 7;
  if (has_valueforever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->valueforever(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CounterNum)
  return target;
}

int CounterNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 valueForDay = 3;
    if (has_valueforday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valueforday());
    }

    // optional uint32 valueForWeek = 4;
    if (has_valueforweek()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valueforweek());
    }

    // optional uint32 valueForMonth = 5;
    if (has_valueformonth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valueformonth());
    }

    // optional uint32 valueForYear = 6;
    if (has_valueforyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valueforyear());
    }

    // optional uint32 valueForever = 7;
    if (has_valueforever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valueforever());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounterNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounterNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounterNum::MergeFrom(const CounterNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_valueforday()) {
      set_valueforday(from.valueforday());
    }
    if (from.has_valueforweek()) {
      set_valueforweek(from.valueforweek());
    }
    if (from.has_valueformonth()) {
      set_valueformonth(from.valueformonth());
    }
    if (from.has_valueforyear()) {
      set_valueforyear(from.valueforyear());
    }
    if (from.has_valueforever()) {
      set_valueforever(from.valueforever());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounterNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterNum::CopyFrom(const CounterNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterNum::IsInitialized() const {

  return true;
}

void CounterNum::Swap(CounterNum* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(valueforday_, other->valueforday_);
    std::swap(valueforweek_, other->valueforweek_);
    std::swap(valueformonth_, other->valueformonth_);
    std::swap(valueforyear_, other->valueforyear_);
    std::swap(valueforever_, other->valueforever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounterNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterNum_descriptor_;
  metadata.reflection = CounterNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CounterSave::kCounttypeFieldNumber;
const int CounterSave::kCountnumFieldNumber;
#endif  // !_MSC_VER

CounterSave::CounterSave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CounterSave)
}

void CounterSave::InitAsDefaultInstance() {
}

CounterSave::CounterSave(const CounterSave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CounterSave)
}

void CounterSave::SharedCtor() {
  _cached_size_ = 0;
  counttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterSave::~CounterSave() {
  // @@protoc_insertion_point(destructor:CounterSave)
  SharedDtor();
}

void CounterSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounterSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterSave_descriptor_;
}

const CounterSave& CounterSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CounterSave* CounterSave::default_instance_ = NULL;

CounterSave* CounterSave::New() const {
  return new CounterSave;
}

void CounterSave::Clear() {
  counttype_ = 0;
  countnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounterSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CounterSave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CounterType counttype = 1 [default = COUNTERT_NONE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CounterType_IsValid(value)) {
            set_counttype(static_cast< ::CounterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_countnum;
        break;
      }

      // repeated .CounterNum countnum = 2;
      case 2: {
        if (tag == 18) {
         parse_countnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_countnum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_countnum;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CounterSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CounterSave)
  return false;
#undef DO_
}

void CounterSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CounterSave)
  // optional .CounterType counttype = 1 [default = COUNTERT_NONE];
  if (has_counttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->counttype(), output);
  }

  // repeated .CounterNum countnum = 2;
  for (int i = 0; i < this->countnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->countnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CounterSave)
}

::google::protobuf::uint8* CounterSave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CounterSave)
  // optional .CounterType counttype = 1 [default = COUNTERT_NONE];
  if (has_counttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->counttype(), target);
  }

  // repeated .CounterNum countnum = 2;
  for (int i = 0; i < this->countnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->countnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CounterSave)
  return target;
}

int CounterSave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CounterType counttype = 1 [default = COUNTERT_NONE];
    if (has_counttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->counttype());
    }

  }
  // repeated .CounterNum countnum = 2;
  total_size += 1 * this->countnum_size();
  for (int i = 0; i < this->countnum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->countnum(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterSave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounterSave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounterSave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounterSave::MergeFrom(const CounterSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  countnum_.MergeFrom(from.countnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counttype()) {
      set_counttype(from.counttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounterSave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterSave::CopyFrom(const CounterSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterSave::IsInitialized() const {

  return true;
}

void CounterSave::Swap(CounterSave* other) {
  if (other != this) {
    std::swap(counttype_, other->counttype_);
    countnum_.Swap(&other->countnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounterSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterSave_descriptor_;
  metadata.reflection = CounterSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeExpItem::kBaseidFieldNumber;
const int TimeExpItem::kTypeFieldNumber;
const int TimeExpItem::kEndTimeFieldNumber;
const int TimeExpItem::kCoefficientFieldNumber;
const int TimeExpItem::kStateFieldNumber;
#endif  // !_MSC_VER

TimeExpItem::TimeExpItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimeExpItem)
}

void TimeExpItem::InitAsDefaultInstance() {
}

TimeExpItem::TimeExpItem(const TimeExpItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TimeExpItem)
}

void TimeExpItem::SharedCtor() {
  _cached_size_ = 0;
  baseid_ = 0u;
  type_ = 0u;
  end_time_ = 0u;
  coefficient_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeExpItem::~TimeExpItem() {
  // @@protoc_insertion_point(destructor:TimeExpItem)
  SharedDtor();
}

void TimeExpItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeExpItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeExpItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeExpItem_descriptor_;
}

const TimeExpItem& TimeExpItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TimeExpItem* TimeExpItem::default_instance_ = NULL;

TimeExpItem* TimeExpItem::New() const {
  return new TimeExpItem;
}

void TimeExpItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeExpItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(baseid_, state_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeExpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TimeExpItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 baseid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseid_)));
          set_has_baseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional uint32 end_time = 3;
      case 3: {
        if (tag == 24) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_coefficient;
        break;
      }

      // optional uint32 coefficient = 4;
      case 4: {
        if (tag == 32) {
         parse_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coefficient_)));
          set_has_coefficient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional uint32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TimeExpItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TimeExpItem)
  return false;
#undef DO_
}

void TimeExpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TimeExpItem)
  // optional uint32 baseid = 1;
  if (has_baseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->baseid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_time(), output);
  }

  // optional uint32 coefficient = 4;
  if (has_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->coefficient(), output);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TimeExpItem)
}

::google::protobuf::uint8* TimeExpItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimeExpItem)
  // optional uint32 baseid = 1;
  if (has_baseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->baseid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_time(), target);
  }

  // optional uint32 coefficient = 4;
  if (has_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->coefficient(), target);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimeExpItem)
  return target;
}

int TimeExpItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 baseid = 1;
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // optional uint32 coefficient = 4;
    if (has_coefficient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coefficient());
    }

    // optional uint32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeExpItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeExpItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeExpItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeExpItem::MergeFrom(const TimeExpItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseid()) {
      set_baseid(from.baseid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_coefficient()) {
      set_coefficient(from.coefficient());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeExpItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeExpItem::CopyFrom(const TimeExpItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeExpItem::IsInitialized() const {

  return true;
}

void TimeExpItem::Swap(TimeExpItem* other) {
  if (other != this) {
    std::swap(baseid_, other->baseid_);
    std::swap(type_, other->type_);
    std::swap(end_time_, other->end_time_);
    std::swap(coefficient_, other->coefficient_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeExpItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeExpItem_descriptor_;
  metadata.reflection = TimeExpItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeExpSave::kLeftTimeFieldNumber;
const int TimeExpSave::kResetTimeFieldNumber;
const int TimeExpSave::kExpitemFieldNumber;
#endif  // !_MSC_VER

TimeExpSave::TimeExpSave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimeExpSave)
}

void TimeExpSave::InitAsDefaultInstance() {
}

TimeExpSave::TimeExpSave(const TimeExpSave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TimeExpSave)
}

void TimeExpSave::SharedCtor() {
  _cached_size_ = 0;
  left_time_ = 0u;
  reset_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeExpSave::~TimeExpSave() {
  // @@protoc_insertion_point(destructor:TimeExpSave)
  SharedDtor();
}

void TimeExpSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeExpSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeExpSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeExpSave_descriptor_;
}

const TimeExpSave& TimeExpSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TimeExpSave* TimeExpSave::default_instance_ = NULL;

TimeExpSave* TimeExpSave::New() const {
  return new TimeExpSave;
}

void TimeExpSave::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeExpSave*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(left_time_, reset_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  expitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeExpSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TimeExpSave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 left_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reset_time;
        break;
      }

      // optional uint32 reset_time = 2;
      case 2: {
        if (tag == 16) {
         parse_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_time_)));
          set_has_reset_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_expitem;
        break;
      }

      // repeated .TimeExpItem expitem = 3;
      case 3: {
        if (tag == 26) {
         parse_expitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_expitem;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TimeExpSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TimeExpSave)
  return false;
#undef DO_
}

void TimeExpSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TimeExpSave)
  // optional uint32 left_time = 1;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left_time(), output);
  }

  // optional uint32 reset_time = 2;
  if (has_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reset_time(), output);
  }

  // repeated .TimeExpItem expitem = 3;
  for (int i = 0; i < this->expitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->expitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TimeExpSave)
}

::google::protobuf::uint8* TimeExpSave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimeExpSave)
  // optional uint32 left_time = 1;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left_time(), target);
  }

  // optional uint32 reset_time = 2;
  if (has_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reset_time(), target);
  }

  // repeated .TimeExpItem expitem = 3;
  for (int i = 0; i < this->expitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->expitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimeExpSave)
  return target;
}

int TimeExpSave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 left_time = 1;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_time());
    }

    // optional uint32 reset_time = 2;
    if (has_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_time());
    }

  }
  // repeated .TimeExpItem expitem = 3;
  total_size += 1 * this->expitem_size();
  for (int i = 0; i < this->expitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeExpSave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeExpSave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeExpSave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeExpSave::MergeFrom(const TimeExpSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  expitem_.MergeFrom(from.expitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
    if (from.has_reset_time()) {
      set_reset_time(from.reset_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeExpSave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeExpSave::CopyFrom(const TimeExpSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeExpSave::IsInitialized() const {

  return true;
}

void TimeExpSave::Swap(TimeExpSave* other) {
  if (other != this) {
    std::swap(left_time_, other->left_time_);
    std::swap(reset_time_, other->reset_time_);
    expitem_.Swap(&other->expitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeExpSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeExpSave_descriptor_;
  metadata.reflection = TimeExpSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectArray::kObjectsFieldNumber;
#endif  // !_MSC_VER

ObjectArray::ObjectArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObjectArray)
}

void ObjectArray::InitAsDefaultInstance() {
}

ObjectArray::ObjectArray(const ObjectArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ObjectArray)
}

void ObjectArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectArray::~ObjectArray() {
  // @@protoc_insertion_point(destructor:ObjectArray)
  SharedDtor();
}

void ObjectArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectArray_descriptor_;
}

const ObjectArray& ObjectArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ObjectArray* ObjectArray::default_instance_ = NULL;

ObjectArray* ObjectArray::New() const {
  return new ObjectArray;
}

void ObjectArray::Clear() {
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ObjectArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .t_Object objects = 1;
      case 1: {
        if (tag == 10) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_objects;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ObjectArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ObjectArray)
  return false;
#undef DO_
}

void ObjectArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ObjectArray)
  // repeated .t_Object objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ObjectArray)
}

::google::protobuf::uint8* ObjectArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectArray)
  // repeated .t_Object objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectArray)
  return target;
}

int ObjectArray::ByteSize() const {
  int total_size = 0;

  // repeated .t_Object objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectArray::MergeFrom(const ObjectArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectArray::CopyFrom(const ObjectArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectArray::IsInitialized() const {

  return true;
}

void ObjectArray::Swap(ObjectArray* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectArray_descriptor_;
  metadata.reflection = ObjectArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailOneObject::kIndexFieldNumber;
const int MailOneObject::kObjectFieldNumber;
#endif  // !_MSC_VER

MailOneObject::MailOneObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailOneObject)
}

void MailOneObject::InitAsDefaultInstance() {
  object_ = const_cast< ::t_Object*>(&::t_Object::default_instance());
}

MailOneObject::MailOneObject(const MailOneObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MailOneObject)
}

void MailOneObject::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailOneObject::~MailOneObject() {
  // @@protoc_insertion_point(destructor:MailOneObject)
  SharedDtor();
}

void MailOneObject::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
  }
}

void MailOneObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailOneObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailOneObject_descriptor_;
}

const MailOneObject& MailOneObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MailOneObject* MailOneObject::default_instance_ = NULL;

MailOneObject* MailOneObject::New() const {
  return new MailOneObject;
}

void MailOneObject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    index_ = 0u;
    if (has_object()) {
      if (object_ != NULL) object_->::t_Object::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailOneObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailOneObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // optional .t_Object object = 2;
      case 2: {
        if (tag == 18) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailOneObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailOneObject)
  return false;
#undef DO_
}

void MailOneObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailOneObject)
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .t_Object object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailOneObject)
}

::google::protobuf::uint8* MailOneObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailOneObject)
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .t_Object object = 2;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailOneObject)
  return target;
}

int MailOneObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .t_Object object = 2;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailOneObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailOneObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailOneObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailOneObject::MergeFrom(const MailOneObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_object()) {
      mutable_object()->::t_Object::MergeFrom(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailOneObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailOneObject::CopyFrom(const MailOneObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailOneObject::IsInitialized() const {

  return true;
}

void MailOneObject::Swap(MailOneObject* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailOneObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailOneObject_descriptor_;
  metadata.reflection = MailOneObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailObjects::kObjectsFieldNumber;
#endif  // !_MSC_VER

MailObjects::MailObjects()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailObjects)
}

void MailObjects::InitAsDefaultInstance() {
}

MailObjects::MailObjects(const MailObjects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MailObjects)
}

void MailObjects::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailObjects::~MailObjects() {
  // @@protoc_insertion_point(destructor:MailObjects)
  SharedDtor();
}

void MailObjects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailObjects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailObjects_descriptor_;
}

const MailObjects& MailObjects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MailObjects* MailObjects::default_instance_ = NULL;

MailObjects* MailObjects::New() const {
  return new MailObjects;
}

void MailObjects::Clear() {
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MailOneObject objects = 1;
      case 1: {
        if (tag == 10) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_objects;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailObjects)
  return false;
#undef DO_
}

void MailObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailObjects)
  // repeated .MailOneObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailObjects)
}

::google::protobuf::uint8* MailObjects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailObjects)
  // repeated .MailOneObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailObjects)
  return target;
}

int MailObjects::ByteSize() const {
  int total_size = 0;

  // repeated .MailOneObject objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailObjects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailObjects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailObjects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailObjects::MergeFrom(const MailObjects& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailObjects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailObjects::CopyFrom(const MailObjects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailObjects::IsInitialized() const {

  return true;
}

void MailObjects::Swap(MailObjects* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailObjects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailObjects_descriptor_;
  metadata.reflection = MailObjects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneShowFuncNpcData::kBaseIdFieldNumber;
const int SceneShowFuncNpcData::kTempIdFieldNumber;
const int SceneShowFuncNpcData::kXFieldNumber;
const int SceneShowFuncNpcData::kYFieldNumber;
const int SceneShowFuncNpcData::kShowFieldNumber;
const int SceneShowFuncNpcData::kSignFieldNumber;
#endif  // !_MSC_VER

SceneShowFuncNpcData::SceneShowFuncNpcData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SceneShowFuncNpcData)
}

void SceneShowFuncNpcData::InitAsDefaultInstance() {
}

SceneShowFuncNpcData::SceneShowFuncNpcData(const SceneShowFuncNpcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SceneShowFuncNpcData)
}

void SceneShowFuncNpcData::SharedCtor() {
  _cached_size_ = 0;
  baseid_ = 0u;
  tempid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  show_ = 0u;
  sign_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneShowFuncNpcData::~SceneShowFuncNpcData() {
  // @@protoc_insertion_point(destructor:SceneShowFuncNpcData)
  SharedDtor();
}

void SceneShowFuncNpcData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneShowFuncNpcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneShowFuncNpcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneShowFuncNpcData_descriptor_;
}

const SceneShowFuncNpcData& SceneShowFuncNpcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SceneShowFuncNpcData* SceneShowFuncNpcData::default_instance_ = NULL;

SceneShowFuncNpcData* SceneShowFuncNpcData::New() const {
  return new SceneShowFuncNpcData;
}

void SceneShowFuncNpcData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SceneShowFuncNpcData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(baseid_, sign_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneShowFuncNpcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SceneShowFuncNpcData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 baseId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseid_)));
          set_has_baseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tempId;
        break;
      }

      // optional uint32 tempId = 2;
      case 2: {
        if (tag == 16) {
         parse_tempId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_show;
        break;
      }

      // optional uint32 show = 5;
      case 5: {
        if (tag == 40) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sign;
        break;
      }

      // optional uint32 sign = 6;
      case 6: {
        if (tag == 48) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_)));
          set_has_sign();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SceneShowFuncNpcData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SceneShowFuncNpcData)
  return false;
#undef DO_
}

void SceneShowFuncNpcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SceneShowFuncNpcData)
  // optional uint32 baseId = 1;
  if (has_baseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->baseid(), output);
  }

  // optional uint32 tempId = 2;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tempid(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional uint32 show = 5;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->show(), output);
  }

  // optional uint32 sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SceneShowFuncNpcData)
}

::google::protobuf::uint8* SceneShowFuncNpcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneShowFuncNpcData)
  // optional uint32 baseId = 1;
  if (has_baseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->baseid(), target);
  }

  // optional uint32 tempId = 2;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tempid(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional uint32 show = 5;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->show(), target);
  }

  // optional uint32 sign = 6;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneShowFuncNpcData)
  return target;
}

int SceneShowFuncNpcData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 baseId = 1;
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseid());
    }

    // optional uint32 tempId = 2;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tempid());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 show = 5;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show());
    }

    // optional uint32 sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneShowFuncNpcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneShowFuncNpcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneShowFuncNpcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneShowFuncNpcData::MergeFrom(const SceneShowFuncNpcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseid()) {
      set_baseid(from.baseid());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneShowFuncNpcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneShowFuncNpcData::CopyFrom(const SceneShowFuncNpcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneShowFuncNpcData::IsInitialized() const {

  return true;
}

void SceneShowFuncNpcData::Swap(SceneShowFuncNpcData* other) {
  if (other != this) {
    std::swap(baseid_, other->baseid_);
    std::swap(tempid_, other->tempid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(show_, other->show_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneShowFuncNpcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneShowFuncNpcData_descriptor_;
  metadata.reflection = SceneShowFuncNpcData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapFuncNpcList::kDataFieldNumber;
#endif  // !_MSC_VER

MapFuncNpcList::MapFuncNpcList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapFuncNpcList)
}

void MapFuncNpcList::InitAsDefaultInstance() {
}

MapFuncNpcList::MapFuncNpcList(const MapFuncNpcList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapFuncNpcList)
}

void MapFuncNpcList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapFuncNpcList::~MapFuncNpcList() {
  // @@protoc_insertion_point(destructor:MapFuncNpcList)
  SharedDtor();
}

void MapFuncNpcList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapFuncNpcList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapFuncNpcList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapFuncNpcList_descriptor_;
}

const MapFuncNpcList& MapFuncNpcList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MapFuncNpcList* MapFuncNpcList::default_instance_ = NULL;

MapFuncNpcList* MapFuncNpcList::New() const {
  return new MapFuncNpcList;
}

void MapFuncNpcList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapFuncNpcList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapFuncNpcList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SceneShowFuncNpcData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapFuncNpcList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapFuncNpcList)
  return false;
#undef DO_
}

void MapFuncNpcList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapFuncNpcList)
  // repeated .SceneShowFuncNpcData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapFuncNpcList)
}

::google::protobuf::uint8* MapFuncNpcList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapFuncNpcList)
  // repeated .SceneShowFuncNpcData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapFuncNpcList)
  return target;
}

int MapFuncNpcList::ByteSize() const {
  int total_size = 0;

  // repeated .SceneShowFuncNpcData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapFuncNpcList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapFuncNpcList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapFuncNpcList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapFuncNpcList::MergeFrom(const MapFuncNpcList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapFuncNpcList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapFuncNpcList::CopyFrom(const MapFuncNpcList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapFuncNpcList::IsInitialized() const {

  return true;
}

void MapFuncNpcList::Swap(MapFuncNpcList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapFuncNpcList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapFuncNpcList_descriptor_;
  metadata.reflection = MapFuncNpcList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MusterCount::kMusteridFieldNumber;
const int MusterCount::kCountFieldNumber;
#endif  // !_MSC_VER

MusterCount::MusterCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MusterCount)
}

void MusterCount::InitAsDefaultInstance() {
}

MusterCount::MusterCount(const MusterCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MusterCount)
}

void MusterCount::SharedCtor() {
  _cached_size_ = 0;
  musterid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MusterCount::~MusterCount() {
  // @@protoc_insertion_point(destructor:MusterCount)
  SharedDtor();
}

void MusterCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MusterCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusterCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusterCount_descriptor_;
}

const MusterCount& MusterCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MusterCount* MusterCount::default_instance_ = NULL;

MusterCount* MusterCount::New() const {
  return new MusterCount;
}

void MusterCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MusterCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(musterid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MusterCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MusterCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 musterid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &musterid_)));
          set_has_musterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MusterCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MusterCount)
  return false;
#undef DO_
}

void MusterCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MusterCount)
  // optional uint32 musterid = 1;
  if (has_musterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->musterid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MusterCount)
}

::google::protobuf::uint8* MusterCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MusterCount)
  // optional uint32 musterid = 1;
  if (has_musterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->musterid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MusterCount)
  return target;
}

int MusterCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 musterid = 1;
    if (has_musterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->musterid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusterCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MusterCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MusterCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MusterCount::MergeFrom(const MusterCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_musterid()) {
      set_musterid(from.musterid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MusterCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusterCount::CopyFrom(const MusterCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusterCount::IsInitialized() const {

  return true;
}

void MusterCount::Swap(MusterCount* other) {
  if (other != this) {
    std::swap(musterid_, other->musterid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MusterCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MusterCount_descriptor_;
  metadata.reflection = MusterCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int septCartHelpBack::kSceneIdFieldNumber;
const int septCartHelpBack::kSceneNameFieldNumber;
const int septCartHelpBack::kXFieldNumber;
const int septCartHelpBack::kYFieldNumber;
const int septCartHelpBack::kHelpTimeFieldNumber;
#endif  // !_MSC_VER

septCartHelpBack::septCartHelpBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:septCartHelpBack)
}

void septCartHelpBack::InitAsDefaultInstance() {
}

septCartHelpBack::septCartHelpBack(const septCartHelpBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:septCartHelpBack)
}

void septCartHelpBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scene_id_ = 0u;
  scene_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0u;
  y_ = 0u;
  help_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

septCartHelpBack::~septCartHelpBack() {
  // @@protoc_insertion_point(destructor:septCartHelpBack)
  SharedDtor();
}

void septCartHelpBack::SharedDtor() {
  if (scene_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scene_name_;
  }
  if (this != default_instance_) {
  }
}

void septCartHelpBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* septCartHelpBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return septCartHelpBack_descriptor_;
}

const septCartHelpBack& septCartHelpBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

septCartHelpBack* septCartHelpBack::default_instance_ = NULL;

septCartHelpBack* septCartHelpBack::New() const {
  return new septCartHelpBack;
}

void septCartHelpBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<septCartHelpBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(scene_id_, help_time_);
    if (has_scene_name()) {
      if (scene_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scene_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool septCartHelpBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:septCartHelpBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 scene_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scene_name;
        break;
      }

      // optional string scene_name = 2;
      case 2: {
        if (tag == 18) {
         parse_scene_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scene_name().data(), this->scene_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scene_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_help_time;
        break;
      }

      // optional uint32 help_time = 5;
      case 5: {
        if (tag == 40) {
         parse_help_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &help_time_)));
          set_has_help_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:septCartHelpBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:septCartHelpBack)
  return false;
#undef DO_
}

void septCartHelpBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:septCartHelpBack)
  // optional uint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  // optional string scene_name = 2;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scene_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scene_name(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional uint32 help_time = 5;
  if (has_help_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->help_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:septCartHelpBack)
}

::google::protobuf::uint8* septCartHelpBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:septCartHelpBack)
  // optional uint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  // optional string scene_name = 2;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scene_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scene_name(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional uint32 help_time = 5;
  if (has_help_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->help_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:septCartHelpBack)
  return target;
}

int septCartHelpBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional string scene_name = 2;
    if (has_scene_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene_name());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 help_time = 5;
    if (has_help_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->help_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void septCartHelpBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const septCartHelpBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const septCartHelpBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void septCartHelpBack::MergeFrom(const septCartHelpBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_name()) {
      set_scene_name(from.scene_name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_help_time()) {
      set_help_time(from.help_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void septCartHelpBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void septCartHelpBack::CopyFrom(const septCartHelpBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool septCartHelpBack::IsInitialized() const {

  return true;
}

void septCartHelpBack::Swap(septCartHelpBack* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_name_, other->scene_name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(help_time_, other->help_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata septCartHelpBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = septCartHelpBack_descriptor_;
  metadata.reflection = septCartHelpBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int septCartHelpSave::kCartTmpidFieldNumber;
const int septCartHelpSave::kAvailableFieldNumber;
#endif  // !_MSC_VER

septCartHelpSave::septCartHelpSave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:septCartHelpSave)
}

void septCartHelpSave::InitAsDefaultInstance() {
}

septCartHelpSave::septCartHelpSave(const septCartHelpSave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:septCartHelpSave)
}

void septCartHelpSave::SharedCtor() {
  _cached_size_ = 0;
  cart_tmpid_ = 0u;
  available_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

septCartHelpSave::~septCartHelpSave() {
  // @@protoc_insertion_point(destructor:septCartHelpSave)
  SharedDtor();
}

void septCartHelpSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void septCartHelpSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* septCartHelpSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return septCartHelpSave_descriptor_;
}

const septCartHelpSave& septCartHelpSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

septCartHelpSave* septCartHelpSave::default_instance_ = NULL;

septCartHelpSave* septCartHelpSave::New() const {
  return new septCartHelpSave;
}

void septCartHelpSave::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<septCartHelpSave*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cart_tmpid_, available_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool septCartHelpSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:septCartHelpSave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cart_tmpid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cart_tmpid_)));
          set_has_cart_tmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }

      // optional bool available = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:septCartHelpSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:septCartHelpSave)
  return false;
#undef DO_
}

void septCartHelpSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:septCartHelpSave)
  // optional uint32 cart_tmpid = 1 [default = 0];
  if (has_cart_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cart_tmpid(), output);
  }

  // optional bool available = 2 [default = false];
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->available(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:septCartHelpSave)
}

::google::protobuf::uint8* septCartHelpSave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:septCartHelpSave)
  // optional uint32 cart_tmpid = 1 [default = 0];
  if (has_cart_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cart_tmpid(), target);
  }

  // optional bool available = 2 [default = false];
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->available(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:septCartHelpSave)
  return target;
}

int septCartHelpSave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cart_tmpid = 1 [default = 0];
    if (has_cart_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cart_tmpid());
    }

    // optional bool available = 2 [default = false];
    if (has_available()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void septCartHelpSave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const septCartHelpSave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const septCartHelpSave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void septCartHelpSave::MergeFrom(const septCartHelpSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cart_tmpid()) {
      set_cart_tmpid(from.cart_tmpid());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void septCartHelpSave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void septCartHelpSave::CopyFrom(const septCartHelpSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool septCartHelpSave::IsInitialized() const {

  return true;
}

void septCartHelpSave::Swap(septCartHelpSave* other) {
  if (other != this) {
    std::swap(cart_tmpid_, other->cart_tmpid_);
    std::swap(available_, other->available_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata septCartHelpSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = septCartHelpSave_descriptor_;
  metadata.reflection = septCartHelpSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryGangData::kStartdoubleexptimeFieldNumber;
#endif  // !_MSC_VER

BinaryGangData::BinaryGangData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinaryGangData)
}

void BinaryGangData::InitAsDefaultInstance() {
}

BinaryGangData::BinaryGangData(const BinaryGangData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BinaryGangData)
}

void BinaryGangData::SharedCtor() {
  _cached_size_ = 0;
  startdoubleexptime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryGangData::~BinaryGangData() {
  // @@protoc_insertion_point(destructor:BinaryGangData)
  SharedDtor();
}

void BinaryGangData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryGangData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryGangData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryGangData_descriptor_;
}

const BinaryGangData& BinaryGangData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BinaryGangData* BinaryGangData::default_instance_ = NULL;

BinaryGangData* BinaryGangData::New() const {
  return new BinaryGangData;
}

void BinaryGangData::Clear() {
  startdoubleexptime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryGangData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinaryGangData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 startdoubleexptime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startdoubleexptime_)));
          set_has_startdoubleexptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinaryGangData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinaryGangData)
  return false;
#undef DO_
}

void BinaryGangData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinaryGangData)
  // optional uint32 startdoubleexptime = 1;
  if (has_startdoubleexptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startdoubleexptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinaryGangData)
}

::google::protobuf::uint8* BinaryGangData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinaryGangData)
  // optional uint32 startdoubleexptime = 1;
  if (has_startdoubleexptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startdoubleexptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinaryGangData)
  return target;
}

int BinaryGangData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 startdoubleexptime = 1;
    if (has_startdoubleexptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startdoubleexptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryGangData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryGangData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryGangData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryGangData::MergeFrom(const BinaryGangData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startdoubleexptime()) {
      set_startdoubleexptime(from.startdoubleexptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryGangData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryGangData::CopyFrom(const BinaryGangData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryGangData::IsInitialized() const {

  return true;
}

void BinaryGangData::Swap(BinaryGangData* other) {
  if (other != this) {
    std::swap(startdoubleexptime_, other->startdoubleexptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryGangData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryGangData_descriptor_;
  metadata.reflection = BinaryGangData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GangServerSyncData::kGangidFieldNumber;
const int GangServerSyncData::kGangnameFieldNumber;
const int GangServerSyncData::kStartdoubleexptimeFieldNumber;
#endif  // !_MSC_VER

GangServerSyncData::GangServerSyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GangServerSyncData)
}

void GangServerSyncData::InitAsDefaultInstance() {
}

GangServerSyncData::GangServerSyncData(const GangServerSyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GangServerSyncData)
}

void GangServerSyncData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gangid_ = 0u;
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdoubleexptime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangServerSyncData::~GangServerSyncData() {
  // @@protoc_insertion_point(destructor:GangServerSyncData)
  SharedDtor();
}

void GangServerSyncData::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void GangServerSyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangServerSyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangServerSyncData_descriptor_;
}

const GangServerSyncData& GangServerSyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

GangServerSyncData* GangServerSyncData::default_instance_ = NULL;

GangServerSyncData* GangServerSyncData::New() const {
  return new GangServerSyncData;
}

void GangServerSyncData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GangServerSyncData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gangid_, startdoubleexptime_);
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangServerSyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GangServerSyncData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gangid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gangname;
        break;
      }

      // optional string gangname = 2;
      case 2: {
        if (tag == 18) {
         parse_gangname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_startdoubleexptime;
        break;
      }

      // optional uint32 startdoubleexptime = 3;
      case 3: {
        if (tag == 24) {
         parse_startdoubleexptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startdoubleexptime_)));
          set_has_startdoubleexptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GangServerSyncData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GangServerSyncData)
  return false;
#undef DO_
}

void GangServerSyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GangServerSyncData)
  // optional uint32 gangid = 1;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gangid(), output);
  }

  // optional string gangname = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gangname(), output);
  }

  // optional uint32 startdoubleexptime = 3;
  if (has_startdoubleexptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->startdoubleexptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GangServerSyncData)
}

::google::protobuf::uint8* GangServerSyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GangServerSyncData)
  // optional uint32 gangid = 1;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gangid(), target);
  }

  // optional string gangname = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gangname(), target);
  }

  // optional uint32 startdoubleexptime = 3;
  if (has_startdoubleexptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->startdoubleexptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GangServerSyncData)
  return target;
}

int GangServerSyncData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gangid = 1;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gangid());
    }

    // optional string gangname = 2;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

    // optional uint32 startdoubleexptime = 3;
    if (has_startdoubleexptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startdoubleexptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangServerSyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangServerSyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangServerSyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangServerSyncData::MergeFrom(const GangServerSyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
    if (from.has_startdoubleexptime()) {
      set_startdoubleexptime(from.startdoubleexptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangServerSyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangServerSyncData::CopyFrom(const GangServerSyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangServerSyncData::IsInitialized() const {

  return true;
}

void GangServerSyncData::Swap(GangServerSyncData* other) {
  if (other != this) {
    std::swap(gangid_, other->gangid_);
    std::swap(gangname_, other->gangname_);
    std::swap(startdoubleexptime_, other->startdoubleexptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangServerSyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangServerSyncData_descriptor_;
  metadata.reflection = GangServerSyncData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockAccountData::kMoneyFieldNumber;
const int StockAccountData::kGoldFieldNumber;
#endif  // !_MSC_VER

StockAccountData::StockAccountData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockAccountData)
}

void StockAccountData::InitAsDefaultInstance() {
}

StockAccountData::StockAccountData(const StockAccountData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockAccountData)
}

void StockAccountData::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0u;
  gold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockAccountData::~StockAccountData() {
  // @@protoc_insertion_point(destructor:StockAccountData)
  SharedDtor();
}

void StockAccountData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockAccountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockAccountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockAccountData_descriptor_;
}

const StockAccountData& StockAccountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StockAccountData* StockAccountData::default_instance_ = NULL;

StockAccountData* StockAccountData::New() const {
  return new StockAccountData;
}

void StockAccountData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StockAccountData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(money_, gold_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockAccountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockAccountData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockAccountData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockAccountData)
  return false;
#undef DO_
}

void StockAccountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockAccountData)
  // optional uint32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->money(), output);
  }

  // optional uint32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockAccountData)
}

::google::protobuf::uint8* StockAccountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockAccountData)
  // optional uint32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->money(), target);
  }

  // optional uint32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockAccountData)
  return target;
}

int StockAccountData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockAccountData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockAccountData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockAccountData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockAccountData::MergeFrom(const StockAccountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockAccountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockAccountData::CopyFrom(const StockAccountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockAccountData::IsInitialized() const {

  return true;
}

void StockAccountData::Swap(StockAccountData* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockAccountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockAccountData_descriptor_;
  metadata.reflection = StockAccountData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneStockItem::kPriceFieldNumber;
const int OneStockItem::kNumFieldNumber;
#endif  // !_MSC_VER

OneStockItem::OneStockItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneStockItem)
}

void OneStockItem::InitAsDefaultInstance() {
}

OneStockItem::OneStockItem(const OneStockItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OneStockItem)
}

void OneStockItem::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneStockItem::~OneStockItem() {
  // @@protoc_insertion_point(destructor:OneStockItem)
  SharedDtor();
}

void OneStockItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneStockItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneStockItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneStockItem_descriptor_;
}

const OneStockItem& OneStockItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

OneStockItem* OneStockItem::default_instance_ = NULL;

OneStockItem* OneStockItem::New() const {
  return new OneStockItem;
}

void OneStockItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OneStockItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(price_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneStockItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneStockItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 price = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneStockItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneStockItem)
  return false;
#undef DO_
}

void OneStockItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneStockItem)
  // optional uint32 price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->price(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneStockItem)
}

::google::protobuf::uint8* OneStockItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OneStockItem)
  // optional uint32 price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->price(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneStockItem)
  return target;
}

int OneStockItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneStockItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneStockItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneStockItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneStockItem::MergeFrom(const OneStockItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneStockItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneStockItem::CopyFrom(const OneStockItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneStockItem::IsInitialized() const {

  return true;
}

void OneStockItem::Swap(OneStockItem* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneStockItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneStockItem_descriptor_;
  metadata.reflection = OneStockItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelfOneStockItem::kTradeidFieldNumber;
const int SelfOneStockItem::kTypeFieldNumber;
const int SelfOneStockItem::kPriceFieldNumber;
const int SelfOneStockItem::kNumFieldNumber;
const int SelfOneStockItem::kTimeFieldNumber;
#endif  // !_MSC_VER

SelfOneStockItem::SelfOneStockItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SelfOneStockItem)
}

void SelfOneStockItem::InitAsDefaultInstance() {
}

SelfOneStockItem::SelfOneStockItem(const SelfOneStockItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SelfOneStockItem)
}

void SelfOneStockItem::SharedCtor() {
  _cached_size_ = 0;
  tradeid_ = 0u;
  type_ = 1;
  price_ = 0u;
  num_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfOneStockItem::~SelfOneStockItem() {
  // @@protoc_insertion_point(destructor:SelfOneStockItem)
  SharedDtor();
}

void SelfOneStockItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelfOneStockItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfOneStockItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfOneStockItem_descriptor_;
}

const SelfOneStockItem& SelfOneStockItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SelfOneStockItem* SelfOneStockItem::default_instance_ = NULL;

SelfOneStockItem* SelfOneStockItem::New() const {
  return new SelfOneStockItem;
}

void SelfOneStockItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SelfOneStockItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(price_, time_);
    tradeid_ = 0u;
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelfOneStockItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SelfOneStockItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tradeid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradeid_)));
          set_has_tradeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .enumStockAuctionType type = 2 [default = enumStock_SellGold];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumStockAuctionType_IsValid(value)) {
            set_type(static_cast< ::enumStockAuctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SelfOneStockItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SelfOneStockItem)
  return false;
#undef DO_
}

void SelfOneStockItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SelfOneStockItem)
  // optional uint32 tradeid = 1;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tradeid(), output);
  }

  // optional .enumStockAuctionType type = 2 [default = enumStock_SellGold];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SelfOneStockItem)
}

::google::protobuf::uint8* SelfOneStockItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SelfOneStockItem)
  // optional uint32 tradeid = 1;
  if (has_tradeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tradeid(), target);
  }

  // optional .enumStockAuctionType type = 2 [default = enumStock_SellGold];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SelfOneStockItem)
  return target;
}

int SelfOneStockItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tradeid = 1;
    if (has_tradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradeid());
    }

    // optional .enumStockAuctionType type = 2 [default = enumStock_SellGold];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfOneStockItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelfOneStockItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelfOneStockItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelfOneStockItem::MergeFrom(const SelfOneStockItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tradeid()) {
      set_tradeid(from.tradeid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelfOneStockItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfOneStockItem::CopyFrom(const SelfOneStockItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfOneStockItem::IsInitialized() const {

  return true;
}

void SelfOneStockItem::Swap(SelfOneStockItem* other) {
  if (other != this) {
    std::swap(tradeid_, other->tradeid_);
    std::swap(type_, other->type_);
    std::swap(price_, other->price_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelfOneStockItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfOneStockItem_descriptor_;
  metadata.reflection = SelfOneStockItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockTypeList::kTypeFieldNumber;
const int StockTypeList::kItemsFieldNumber;
#endif  // !_MSC_VER

StockTypeList::StockTypeList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StockTypeList)
}

void StockTypeList::InitAsDefaultInstance() {
}

StockTypeList::StockTypeList(const StockTypeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StockTypeList)
}

void StockTypeList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockTypeList::~StockTypeList() {
  // @@protoc_insertion_point(destructor:StockTypeList)
  SharedDtor();
}

void StockTypeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockTypeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockTypeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockTypeList_descriptor_;
}

const StockTypeList& StockTypeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StockTypeList* StockTypeList::default_instance_ = NULL;

StockTypeList* StockTypeList::New() const {
  return new StockTypeList;
}

void StockTypeList::Clear() {
  type_ = 1;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockTypeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StockTypeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enumStockAuctionType type = 1 [default = enumStock_SellGold];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumStockAuctionType_IsValid(value)) {
            set_type(static_cast< ::enumStockAuctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .OneStockItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StockTypeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StockTypeList)
  return false;
#undef DO_
}

void StockTypeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StockTypeList)
  // optional .enumStockAuctionType type = 1 [default = enumStock_SellGold];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .OneStockItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StockTypeList)
}

::google::protobuf::uint8* StockTypeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StockTypeList)
  // optional .enumStockAuctionType type = 1 [default = enumStock_SellGold];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .OneStockItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StockTypeList)
  return target;
}

int StockTypeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .enumStockAuctionType type = 1 [default = enumStock_SellGold];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .OneStockItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockTypeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockTypeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockTypeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockTypeList::MergeFrom(const StockTypeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockTypeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockTypeList::CopyFrom(const StockTypeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockTypeList::IsInitialized() const {

  return true;
}

void StockTypeList::Swap(StockTypeList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockTypeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockTypeList_descriptor_;
  metadata.reflection = StockTypeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeptBuildingData::kTypeFieldNumber;
const int SeptBuildingData::kLevelFieldNumber;
const int SeptBuildingData::kPointFieldNumber;
const int SeptBuildingData::kBuildstateFieldNumber;
#endif  // !_MSC_VER

SeptBuildingData::SeptBuildingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SeptBuildingData)
}

void SeptBuildingData::InitAsDefaultInstance() {
}

SeptBuildingData::SeptBuildingData(const SeptBuildingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SeptBuildingData)
}

void SeptBuildingData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0u;
  point_ = 0u;
  buildstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeptBuildingData::~SeptBuildingData() {
  // @@protoc_insertion_point(destructor:SeptBuildingData)
  SharedDtor();
}

void SeptBuildingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeptBuildingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeptBuildingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeptBuildingData_descriptor_;
}

const SeptBuildingData& SeptBuildingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SeptBuildingData* SeptBuildingData::default_instance_ = NULL;

SeptBuildingData* SeptBuildingData::New() const {
  return new SeptBuildingData;
}

void SeptBuildingData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SeptBuildingData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, buildstate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeptBuildingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SeptBuildingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .enumSeptBuildingType type = 1 [default = enumSeptBuildingType_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumSeptBuildingType_IsValid(value)) {
            set_type(static_cast< ::enumSeptBuildingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // optional uint32 point = 3;
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buildstate;
        break;
      }

      // optional uint32 buildstate = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_buildstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildstate_)));
          set_has_buildstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SeptBuildingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SeptBuildingData)
  return false;
#undef DO_
}

void SeptBuildingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SeptBuildingData)
  // required .enumSeptBuildingType type = 1 [default = enumSeptBuildingType_None];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->point(), output);
  }

  // optional uint32 buildstate = 4 [default = 0];
  if (has_buildstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buildstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SeptBuildingData)
}

::google::protobuf::uint8* SeptBuildingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SeptBuildingData)
  // required .enumSeptBuildingType type = 1 [default = enumSeptBuildingType_None];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->point(), target);
  }

  // optional uint32 buildstate = 4 [default = 0];
  if (has_buildstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buildstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SeptBuildingData)
  return target;
}

int SeptBuildingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .enumSeptBuildingType type = 1 [default = enumSeptBuildingType_None];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // optional uint32 buildstate = 4 [default = 0];
    if (has_buildstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeptBuildingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeptBuildingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeptBuildingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeptBuildingData::MergeFrom(const SeptBuildingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_buildstate()) {
      set_buildstate(from.buildstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeptBuildingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeptBuildingData::CopyFrom(const SeptBuildingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeptBuildingData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SeptBuildingData::Swap(SeptBuildingData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(point_, other->point_);
    std::swap(buildstate_, other->buildstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeptBuildingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeptBuildingData_descriptor_;
  metadata.reflection = SeptBuildingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneChariotSkill::kSkillIdFieldNumber;
const int SceneChariotSkill::kSkillLevelFieldNumber;
const int SceneChariotSkill::kUseTypeFieldNumber;
#endif  // !_MSC_VER

SceneChariotSkill::SceneChariotSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SceneChariotSkill)
}

void SceneChariotSkill::InitAsDefaultInstance() {
}

SceneChariotSkill::SceneChariotSkill(const SceneChariotSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SceneChariotSkill)
}

void SceneChariotSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  use_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneChariotSkill::~SceneChariotSkill() {
  // @@protoc_insertion_point(destructor:SceneChariotSkill)
  SharedDtor();
}

void SceneChariotSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneChariotSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneChariotSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneChariotSkill_descriptor_;
}

const SceneChariotSkill& SceneChariotSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SceneChariotSkill* SceneChariotSkill::default_instance_ = NULL;

SceneChariotSkill* SceneChariotSkill::New() const {
  return new SceneChariotSkill;
}

void SceneChariotSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SceneChariotSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skill_id_, use_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneChariotSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SceneChariotSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // optional uint32 skill_level = 2;
      case 2: {
        if (tag == 16) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_type;
        break;
      }

      // optional uint32 use_type = 3;
      case 3: {
        if (tag == 24) {
         parse_use_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_type_)));
          set_has_use_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SceneChariotSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SceneChariotSkill)
  return false;
#undef DO_
}

void SceneChariotSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SceneChariotSkill)
  // optional uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }

  // optional uint32 use_type = 3;
  if (has_use_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->use_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SceneChariotSkill)
}

::google::protobuf::uint8* SceneChariotSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneChariotSkill)
  // optional uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // optional uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }

  // optional uint32 use_type = 3;
  if (has_use_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->use_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneChariotSkill)
  return target;
}

int SceneChariotSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 use_type = 3;
    if (has_use_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneChariotSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneChariotSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneChariotSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneChariotSkill::MergeFrom(const SceneChariotSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_use_type()) {
      set_use_type(from.use_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneChariotSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneChariotSkill::CopyFrom(const SceneChariotSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneChariotSkill::IsInitialized() const {

  return true;
}

void SceneChariotSkill::Swap(SceneChariotSkill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(use_type_, other->use_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneChariotSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneChariotSkill_descriptor_;
  metadata.reflection = SceneChariotSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneChariotBaseData::kBaseIdFieldNumber;
const int SceneChariotBaseData::kNameFieldNumber;
const int SceneChariotBaseData::kTypeNameFieldNumber;
const int SceneChariotBaseData::kSignFieldNumber;
const int SceneChariotBaseData::kAiFieldNumber;
const int SceneChariotBaseData::kHonorLevelFieldNumber;
const int SceneChariotBaseData::kHonorFieldNumber;
const int SceneChariotBaseData::kSeptIdFieldNumber;
const int SceneChariotBaseData::kIndexFieldNumber;
const int SceneChariotBaseData::kExHolderNameFieldNumber;
const int SceneChariotBaseData::kMaxCarrierFieldNumber;
const int SceneChariotBaseData::kHpFieldNumber;
const int SceneChariotBaseData::kMaxhpFieldNumber;
const int SceneChariotBaseData::kMpFieldNumber;
const int SceneChariotBaseData::kMaxmpFieldNumber;
const int SceneChariotBaseData::kPmaxAttackFieldNumber;
const int SceneChariotBaseData::kMmaxAttackFieldNumber;
const int SceneChariotBaseData::kPminAttackFieldNumber;
const int SceneChariotBaseData::kMminAttackFieldNumber;
const int SceneChariotBaseData::kPdefenceFieldNumber;
const int SceneChariotBaseData::kMdefenceFieldNumber;
const int SceneChariotBaseData::kHeavyFieldNumber;
const int SceneChariotBaseData::kAttackSpeedLevelFieldNumber;
const int SceneChariotBaseData::kAttackLengthLevelFieldNumber;
const int SceneChariotBaseData::kMoveSpeedLevelFieldNumber;
const int SceneChariotBaseData::kStrengthFieldNumber;
const int SceneChariotBaseData::kDexterityFieldNumber;
const int SceneChariotBaseData::kMentalityFieldNumber;
const int SceneChariotBaseData::kConstitutionFieldNumber;
const int SceneChariotBaseData::kSkillFieldNumber;
#endif  // !_MSC_VER

SceneChariotBaseData::SceneChariotBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SceneChariotBaseData)
}

void SceneChariotBaseData::InitAsDefaultInstance() {
}

SceneChariotBaseData::SceneChariotBaseData(const SceneChariotBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SceneChariotBaseData)
}

void SceneChariotBaseData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  honor_level_ = 0u;
  honor_ = 0u;
  sept_id_ = 0u;
  index_ = 0u;
  ex_holder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_carrier_ = 0u;
  hp_ = 0u;
  maxhp_ = 0u;
  mp_ = 0u;
  maxmp_ = 0u;
  pmax_attack_ = 0u;
  mmax_attack_ = 0u;
  pmin_attack_ = 0u;
  mmin_attack_ = 0u;
  pdefence_ = 0u;
  mdefence_ = 0u;
  heavy_ = 0u;
  attack_speed_level_ = 0u;
  attack_length_level_ = 0u;
  move_speed_level_ = 0u;
  strength_ = 0u;
  dexterity_ = 0u;
  mentality_ = 0u;
  constitution_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneChariotBaseData::~SceneChariotBaseData() {
  // @@protoc_insertion_point(destructor:SceneChariotBaseData)
  SharedDtor();
}

void SceneChariotBaseData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_name_;
  }
  if (ex_holder_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ex_holder_name_;
  }
  if (this != default_instance_) {
  }
}

void SceneChariotBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneChariotBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneChariotBaseData_descriptor_;
}

const SceneChariotBaseData& SceneChariotBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SceneChariotBaseData* SceneChariotBaseData::default_instance_ = NULL;

SceneChariotBaseData* SceneChariotBaseData::New() const {
  return new SceneChariotBaseData;
}

void SceneChariotBaseData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SceneChariotBaseData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    ZR_(base_id_, honor_level_);
    ZR_(honor_, sept_id_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(index_, pmax_attack_);
    if (has_ex_holder_name()) {
      if (ex_holder_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ex_holder_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(mmax_attack_, attack_length_level_);
  }
  if (_has_bits_[24 / 32] & 520093696) {
    ZR_(move_speed_level_, constitution_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sign_.Clear();
  ai_.Clear();
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneChariotBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SceneChariotBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 base_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_id_)));
          set_has_base_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type_name;
        break;
      }

      // optional string type_name = 3;
      case 3: {
        if (tag == 26) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // repeated uint32 sign = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sign())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_sign())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ai;
        break;
      }

      // repeated uint32 ai = 5;
      case 5: {
        if (tag == 40) {
         parse_ai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_ai())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ai())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ai;
        if (input->ExpectTag(48)) goto parse_honor_level;
        break;
      }

      // optional uint32 honor_level = 6;
      case 6: {
        if (tag == 48) {
         parse_honor_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_level_)));
          set_has_honor_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 7;
      case 7: {
        if (tag == 56) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sept_id;
        break;
      }

      // optional uint32 sept_id = 8;
      case 8: {
        if (tag == 64) {
         parse_sept_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sept_id_)));
          set_has_sept_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_index;
        break;
      }

      // optional uint32 index = 9;
      case 9: {
        if (tag == 72) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ex_holder_name;
        break;
      }

      // optional string ex_holder_name = 10;
      case 10: {
        if (tag == 82) {
         parse_ex_holder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ex_holder_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ex_holder_name().data(), this->ex_holder_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ex_holder_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_carrier;
        break;
      }

      // optional uint32 max_carrier = 11;
      case 11: {
        if (tag == 88) {
         parse_max_carrier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_carrier_)));
          set_has_max_carrier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 12;
      case 12: {
        if (tag == 96) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_maxhp;
        break;
      }

      // optional uint32 maxhp = 13;
      case 13: {
        if (tag == 104) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 14;
      case 14: {
        if (tag == 112) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_maxmp;
        break;
      }

      // optional uint32 maxmp = 15;
      case 15: {
        if (tag == 120) {
         parse_maxmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_pmax_attack;
        break;
      }

      // optional uint32 pmax_attack = 16;
      case 16: {
        if (tag == 128) {
         parse_pmax_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pmax_attack_)));
          set_has_pmax_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mmax_attack;
        break;
      }

      // optional uint32 mmax_attack = 17;
      case 17: {
        if (tag == 136) {
         parse_mmax_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mmax_attack_)));
          set_has_mmax_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_pmin_attack;
        break;
      }

      // optional uint32 pmin_attack = 18;
      case 18: {
        if (tag == 144) {
         parse_pmin_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pmin_attack_)));
          set_has_pmin_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_mmin_attack;
        break;
      }

      // optional uint32 mmin_attack = 19;
      case 19: {
        if (tag == 152) {
         parse_mmin_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mmin_attack_)));
          set_has_mmin_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_pdefence;
        break;
      }

      // optional uint32 pdefence = 20;
      case 20: {
        if (tag == 160) {
         parse_pdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdefence_)));
          set_has_pdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_mdefence;
        break;
      }

      // optional uint32 mdefence = 21;
      case 21: {
        if (tag == 168) {
         parse_mdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdefence_)));
          set_has_mdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_heavy;
        break;
      }

      // optional uint32 heavy = 22;
      case 22: {
        if (tag == 176) {
         parse_heavy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heavy_)));
          set_has_heavy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_attack_speed_level;
        break;
      }

      // optional uint32 attack_speed_level = 23;
      case 23: {
        if (tag == 184) {
         parse_attack_speed_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_speed_level_)));
          set_has_attack_speed_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_attack_length_level;
        break;
      }

      // optional uint32 attack_length_level = 24;
      case 24: {
        if (tag == 192) {
         parse_attack_length_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_length_level_)));
          set_has_attack_length_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_move_speed_level;
        break;
      }

      // optional uint32 move_speed_level = 25;
      case 25: {
        if (tag == 200) {
         parse_move_speed_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_speed_level_)));
          set_has_move_speed_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_strength;
        break;
      }

      // optional uint32 strength = 26;
      case 26: {
        if (tag == 208) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_dexterity;
        break;
      }

      // optional uint32 dexterity = 27;
      case 27: {
        if (tag == 216) {
         parse_dexterity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dexterity_)));
          set_has_dexterity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_mentality;
        break;
      }

      // optional uint32 mentality = 28;
      case 28: {
        if (tag == 224) {
         parse_mentality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mentality_)));
          set_has_mentality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_constitution;
        break;
      }

      // optional uint32 constitution = 29;
      case 29: {
        if (tag == 232) {
         parse_constitution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constitution_)));
          set_has_constitution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_skill;
        break;
      }

      // repeated .SceneChariotSkill skill = 35;
      case 35: {
        if (tag == 282) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_skill;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SceneChariotBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SceneChariotBaseData)
  return false;
#undef DO_
}

void SceneChariotBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SceneChariotBaseData)
  // optional uint32 base_id = 1;
  if (has_base_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->base_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string type_name = 3;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type_name(), output);
  }

  // repeated uint32 sign = 4 [packed = true];
  if (this->sign_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sign_cached_byte_size_);
  }
  for (int i = 0; i < this->sign_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->sign(i), output);
  }

  // repeated uint32 ai = 5;
  for (int i = 0; i < this->ai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->ai(i), output);
  }

  // optional uint32 honor_level = 6;
  if (has_honor_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->honor_level(), output);
  }

  // optional uint32 honor = 7;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->honor(), output);
  }

  // optional uint32 sept_id = 8;
  if (has_sept_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sept_id(), output);
  }

  // optional uint32 index = 9;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->index(), output);
  }

  // optional string ex_holder_name = 10;
  if (has_ex_holder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ex_holder_name().data(), this->ex_holder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ex_holder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ex_holder_name(), output);
  }

  // optional uint32 max_carrier = 11;
  if (has_max_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_carrier(), output);
  }

  // optional uint32 hp = 12;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->hp(), output);
  }

  // optional uint32 maxhp = 13;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->maxhp(), output);
  }

  // optional uint32 mp = 14;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->mp(), output);
  }

  // optional uint32 maxmp = 15;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->maxmp(), output);
  }

  // optional uint32 pmax_attack = 16;
  if (has_pmax_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pmax_attack(), output);
  }

  // optional uint32 mmax_attack = 17;
  if (has_mmax_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->mmax_attack(), output);
  }

  // optional uint32 pmin_attack = 18;
  if (has_pmin_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->pmin_attack(), output);
  }

  // optional uint32 mmin_attack = 19;
  if (has_mmin_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->mmin_attack(), output);
  }

  // optional uint32 pdefence = 20;
  if (has_pdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->pdefence(), output);
  }

  // optional uint32 mdefence = 21;
  if (has_mdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->mdefence(), output);
  }

  // optional uint32 heavy = 22;
  if (has_heavy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->heavy(), output);
  }

  // optional uint32 attack_speed_level = 23;
  if (has_attack_speed_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->attack_speed_level(), output);
  }

  // optional uint32 attack_length_level = 24;
  if (has_attack_length_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->attack_length_level(), output);
  }

  // optional uint32 move_speed_level = 25;
  if (has_move_speed_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->move_speed_level(), output);
  }

  // optional uint32 strength = 26;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->strength(), output);
  }

  // optional uint32 dexterity = 27;
  if (has_dexterity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->dexterity(), output);
  }

  // optional uint32 mentality = 28;
  if (has_mentality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->mentality(), output);
  }

  // optional uint32 constitution = 29;
  if (has_constitution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->constitution(), output);
  }

  // repeated .SceneChariotSkill skill = 35;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SceneChariotBaseData)
}

::google::protobuf::uint8* SceneChariotBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneChariotBaseData)
  // optional uint32 base_id = 1;
  if (has_base_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->base_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string type_name = 3;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_name(), target);
  }

  // repeated uint32 sign = 4 [packed = true];
  if (this->sign_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sign_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sign_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->sign(i), target);
  }

  // repeated uint32 ai = 5;
  for (int i = 0; i < this->ai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->ai(i), target);
  }

  // optional uint32 honor_level = 6;
  if (has_honor_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->honor_level(), target);
  }

  // optional uint32 honor = 7;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->honor(), target);
  }

  // optional uint32 sept_id = 8;
  if (has_sept_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sept_id(), target);
  }

  // optional uint32 index = 9;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->index(), target);
  }

  // optional string ex_holder_name = 10;
  if (has_ex_holder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ex_holder_name().data(), this->ex_holder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ex_holder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ex_holder_name(), target);
  }

  // optional uint32 max_carrier = 11;
  if (has_max_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_carrier(), target);
  }

  // optional uint32 hp = 12;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->hp(), target);
  }

  // optional uint32 maxhp = 13;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->maxhp(), target);
  }

  // optional uint32 mp = 14;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->mp(), target);
  }

  // optional uint32 maxmp = 15;
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->maxmp(), target);
  }

  // optional uint32 pmax_attack = 16;
  if (has_pmax_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pmax_attack(), target);
  }

  // optional uint32 mmax_attack = 17;
  if (has_mmax_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->mmax_attack(), target);
  }

  // optional uint32 pmin_attack = 18;
  if (has_pmin_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->pmin_attack(), target);
  }

  // optional uint32 mmin_attack = 19;
  if (has_mmin_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->mmin_attack(), target);
  }

  // optional uint32 pdefence = 20;
  if (has_pdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->pdefence(), target);
  }

  // optional uint32 mdefence = 21;
  if (has_mdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->mdefence(), target);
  }

  // optional uint32 heavy = 22;
  if (has_heavy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->heavy(), target);
  }

  // optional uint32 attack_speed_level = 23;
  if (has_attack_speed_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->attack_speed_level(), target);
  }

  // optional uint32 attack_length_level = 24;
  if (has_attack_length_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->attack_length_level(), target);
  }

  // optional uint32 move_speed_level = 25;
  if (has_move_speed_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->move_speed_level(), target);
  }

  // optional uint32 strength = 26;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->strength(), target);
  }

  // optional uint32 dexterity = 27;
  if (has_dexterity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->dexterity(), target);
  }

  // optional uint32 mentality = 28;
  if (has_mentality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->mentality(), target);
  }

  // optional uint32 constitution = 29;
  if (has_constitution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->constitution(), target);
  }

  // repeated .SceneChariotSkill skill = 35;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneChariotBaseData)
  return target;
}

int SceneChariotBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 base_id = 1;
    if (has_base_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type_name = 3;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_name());
    }

    // optional uint32 honor_level = 6;
    if (has_honor_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor_level());
    }

    // optional uint32 honor = 7;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

    // optional uint32 sept_id = 8;
    if (has_sept_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sept_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 index = 9;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string ex_holder_name = 10;
    if (has_ex_holder_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ex_holder_name());
    }

    // optional uint32 max_carrier = 11;
    if (has_max_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_carrier());
    }

    // optional uint32 hp = 12;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 maxhp = 13;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 mp = 14;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 maxmp = 15;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmp());
    }

    // optional uint32 pmax_attack = 16;
    if (has_pmax_attack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pmax_attack());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 mmax_attack = 17;
    if (has_mmax_attack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mmax_attack());
    }

    // optional uint32 pmin_attack = 18;
    if (has_pmin_attack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pmin_attack());
    }

    // optional uint32 mmin_attack = 19;
    if (has_mmin_attack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mmin_attack());
    }

    // optional uint32 pdefence = 20;
    if (has_pdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdefence());
    }

    // optional uint32 mdefence = 21;
    if (has_mdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdefence());
    }

    // optional uint32 heavy = 22;
    if (has_heavy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heavy());
    }

    // optional uint32 attack_speed_level = 23;
    if (has_attack_speed_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_speed_level());
    }

    // optional uint32 attack_length_level = 24;
    if (has_attack_length_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_length_level());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 move_speed_level = 25;
    if (has_move_speed_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_speed_level());
    }

    // optional uint32 strength = 26;
    if (has_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 dexterity = 27;
    if (has_dexterity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dexterity());
    }

    // optional uint32 mentality = 28;
    if (has_mentality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mentality());
    }

    // optional uint32 constitution = 29;
    if (has_constitution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constitution());
    }

  }
  // repeated uint32 sign = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->sign_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sign(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sign_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 ai = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->ai_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ai(i));
    }
    total_size += 1 * this->ai_size() + data_size;
  }

  // repeated .SceneChariotSkill skill = 35;
  total_size += 2 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneChariotBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneChariotBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneChariotBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneChariotBaseData::MergeFrom(const SceneChariotBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sign_.MergeFrom(from.sign_);
  ai_.MergeFrom(from.ai_);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_id()) {
      set_base_id(from.base_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
    if (from.has_honor_level()) {
      set_honor_level(from.honor_level());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_sept_id()) {
      set_sept_id(from.sept_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_ex_holder_name()) {
      set_ex_holder_name(from.ex_holder_name());
    }
    if (from.has_max_carrier()) {
      set_max_carrier(from.max_carrier());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
    if (from.has_pmax_attack()) {
      set_pmax_attack(from.pmax_attack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mmax_attack()) {
      set_mmax_attack(from.mmax_attack());
    }
    if (from.has_pmin_attack()) {
      set_pmin_attack(from.pmin_attack());
    }
    if (from.has_mmin_attack()) {
      set_mmin_attack(from.mmin_attack());
    }
    if (from.has_pdefence()) {
      set_pdefence(from.pdefence());
    }
    if (from.has_mdefence()) {
      set_mdefence(from.mdefence());
    }
    if (from.has_heavy()) {
      set_heavy(from.heavy());
    }
    if (from.has_attack_speed_level()) {
      set_attack_speed_level(from.attack_speed_level());
    }
    if (from.has_attack_length_level()) {
      set_attack_length_level(from.attack_length_level());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_move_speed_level()) {
      set_move_speed_level(from.move_speed_level());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_dexterity()) {
      set_dexterity(from.dexterity());
    }
    if (from.has_mentality()) {
      set_mentality(from.mentality());
    }
    if (from.has_constitution()) {
      set_constitution(from.constitution());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneChariotBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneChariotBaseData::CopyFrom(const SceneChariotBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneChariotBaseData::IsInitialized() const {

  return true;
}

void SceneChariotBaseData::Swap(SceneChariotBaseData* other) {
  if (other != this) {
    std::swap(base_id_, other->base_id_);
    std::swap(name_, other->name_);
    std::swap(type_name_, other->type_name_);
    sign_.Swap(&other->sign_);
    ai_.Swap(&other->ai_);
    std::swap(honor_level_, other->honor_level_);
    std::swap(honor_, other->honor_);
    std::swap(sept_id_, other->sept_id_);
    std::swap(index_, other->index_);
    std::swap(ex_holder_name_, other->ex_holder_name_);
    std::swap(max_carrier_, other->max_carrier_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(mp_, other->mp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(pmax_attack_, other->pmax_attack_);
    std::swap(mmax_attack_, other->mmax_attack_);
    std::swap(pmin_attack_, other->pmin_attack_);
    std::swap(mmin_attack_, other->mmin_attack_);
    std::swap(pdefence_, other->pdefence_);
    std::swap(mdefence_, other->mdefence_);
    std::swap(heavy_, other->heavy_);
    std::swap(attack_speed_level_, other->attack_speed_level_);
    std::swap(attack_length_level_, other->attack_length_level_);
    std::swap(move_speed_level_, other->move_speed_level_);
    std::swap(strength_, other->strength_);
    std::swap(dexterity_, other->dexterity_);
    std::swap(mentality_, other->mentality_);
    std::swap(constitution_, other->constitution_);
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneChariotBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneChariotBaseData_descriptor_;
  metadata.reflection = SceneChariotBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneChariotBinaryData::kBaseFieldNumber;
const int SceneChariotBinaryData::kHolderIdFieldNumber;
const int SceneChariotBinaryData::kHolderNameFieldNumber;
const int SceneChariotBinaryData::kStateFieldNumber;
const int SceneChariotBinaryData::kTmpidFieldNumber;
#endif  // !_MSC_VER

SceneChariotBinaryData::SceneChariotBinaryData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SceneChariotBinaryData)
}

void SceneChariotBinaryData::InitAsDefaultInstance() {
  base_ = const_cast< ::SceneChariotBaseData*>(&::SceneChariotBaseData::default_instance());
}

SceneChariotBinaryData::SceneChariotBinaryData(const SceneChariotBinaryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SceneChariotBinaryData)
}

void SceneChariotBinaryData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = NULL;
  holder_id_ = 0u;
  holder_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0u;
  tmpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneChariotBinaryData::~SceneChariotBinaryData() {
  // @@protoc_insertion_point(destructor:SceneChariotBinaryData)
  SharedDtor();
}

void SceneChariotBinaryData::SharedDtor() {
  if (holder_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete holder_name_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void SceneChariotBinaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneChariotBinaryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneChariotBinaryData_descriptor_;
}

const SceneChariotBinaryData& SceneChariotBinaryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SceneChariotBinaryData* SceneChariotBinaryData::default_instance_ = NULL;

SceneChariotBinaryData* SceneChariotBinaryData::New() const {
  return new SceneChariotBinaryData;
}

void SceneChariotBinaryData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SceneChariotBinaryData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(holder_id_, tmpid_);
    if (has_base()) {
      if (base_ != NULL) base_->::SceneChariotBaseData::Clear();
    }
    if (has_holder_name()) {
      if (holder_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        holder_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneChariotBinaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SceneChariotBinaryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SceneChariotBaseData base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_holder_id;
        break;
      }

      // optional uint32 holder_id = 2;
      case 2: {
        if (tag == 16) {
         parse_holder_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &holder_id_)));
          set_has_holder_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_holder_name;
        break;
      }

      // optional string holder_name = 3;
      case 3: {
        if (tag == 26) {
         parse_holder_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_holder_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->holder_name().data(), this->holder_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "holder_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional uint32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tmpid;
        break;
      }

      // optional uint32 tmpid = 5;
      case 5: {
        if (tag == 40) {
         parse_tmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SceneChariotBinaryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SceneChariotBinaryData)
  return false;
#undef DO_
}

void SceneChariotBinaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SceneChariotBinaryData)
  // optional .SceneChariotBaseData base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional uint32 holder_id = 2;
  if (has_holder_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->holder_id(), output);
  }

  // optional string holder_name = 3;
  if (has_holder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->holder_name().data(), this->holder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "holder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->holder_name(), output);
  }

  // optional uint32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // optional uint32 tmpid = 5;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tmpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SceneChariotBinaryData)
}

::google::protobuf::uint8* SceneChariotBinaryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneChariotBinaryData)
  // optional .SceneChariotBaseData base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional uint32 holder_id = 2;
  if (has_holder_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->holder_id(), target);
  }

  // optional string holder_name = 3;
  if (has_holder_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->holder_name().data(), this->holder_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "holder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->holder_name(), target);
  }

  // optional uint32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }

  // optional uint32 tmpid = 5;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tmpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SceneChariotBinaryData)
  return target;
}

int SceneChariotBinaryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SceneChariotBaseData base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional uint32 holder_id = 2;
    if (has_holder_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->holder_id());
    }

    // optional string holder_name = 3;
    if (has_holder_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->holder_name());
    }

    // optional uint32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 tmpid = 5;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneChariotBinaryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneChariotBinaryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneChariotBinaryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneChariotBinaryData::MergeFrom(const SceneChariotBinaryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::SceneChariotBaseData::MergeFrom(from.base());
    }
    if (from.has_holder_id()) {
      set_holder_id(from.holder_id());
    }
    if (from.has_holder_name()) {
      set_holder_name(from.holder_name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneChariotBinaryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneChariotBinaryData::CopyFrom(const SceneChariotBinaryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneChariotBinaryData::IsInitialized() const {

  return true;
}

void SceneChariotBinaryData::Swap(SceneChariotBinaryData* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(holder_id_, other->holder_id_);
    std::swap(holder_name_, other->holder_name_);
    std::swap(state_, other->state_);
    std::swap(tmpid_, other->tmpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneChariotBinaryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneChariotBinaryData_descriptor_;
  metadata.reflection = SceneChariotBinaryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserTempPosition::kSrcSceneidFieldNumber;
const int UserTempPosition::kSrcPosxFieldNumber;
const int UserTempPosition::kSrcPosyFieldNumber;
const int UserTempPosition::kSrcMapnameFieldNumber;
#endif  // !_MSC_VER

UserTempPosition::UserTempPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserTempPosition)
}

void UserTempPosition::InitAsDefaultInstance() {
}

UserTempPosition::UserTempPosition(const UserTempPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserTempPosition)
}

void UserTempPosition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_sceneid_ = 0u;
  src_posx_ = 0u;
  src_posy_ = 0u;
  src_mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTempPosition::~UserTempPosition() {
  // @@protoc_insertion_point(destructor:UserTempPosition)
  SharedDtor();
}

void UserTempPosition::SharedDtor() {
  if (src_mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete src_mapname_;
  }
  if (this != default_instance_) {
  }
}

void UserTempPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTempPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTempPosition_descriptor_;
}

const UserTempPosition& UserTempPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UserTempPosition* UserTempPosition::default_instance_ = NULL;

UserTempPosition* UserTempPosition::New() const {
  return new UserTempPosition;
}

void UserTempPosition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserTempPosition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(src_sceneid_, src_posx_);
    src_posy_ = 0u;
    if (has_src_mapname()) {
      if (src_mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        src_mapname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTempPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserTempPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 src_sceneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_sceneid_)));
          set_has_src_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_posx;
        break;
      }

      // optional uint32 src_posx = 2;
      case 2: {
        if (tag == 16) {
         parse_src_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_posx_)));
          set_has_src_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_src_posy;
        break;
      }

      // optional uint32 src_posy = 3;
      case 3: {
        if (tag == 24) {
         parse_src_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_posy_)));
          set_has_src_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_src_mapname;
        break;
      }

      // optional string src_mapname = 4;
      case 4: {
        if (tag == 34) {
         parse_src_mapname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_mapname().data(), this->src_mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "src_mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserTempPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserTempPosition)
  return false;
#undef DO_
}

void UserTempPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserTempPosition)
  // optional uint32 src_sceneid = 1;
  if (has_src_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_sceneid(), output);
  }

  // optional uint32 src_posx = 2;
  if (has_src_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_posx(), output);
  }

  // optional uint32 src_posy = 3;
  if (has_src_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->src_posy(), output);
  }

  // optional string src_mapname = 4;
  if (has_src_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_mapname().data(), this->src_mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src_mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->src_mapname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserTempPosition)
}

::google::protobuf::uint8* UserTempPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserTempPosition)
  // optional uint32 src_sceneid = 1;
  if (has_src_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_sceneid(), target);
  }

  // optional uint32 src_posx = 2;
  if (has_src_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_posx(), target);
  }

  // optional uint32 src_posy = 3;
  if (has_src_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->src_posy(), target);
  }

  // optional string src_mapname = 4;
  if (has_src_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_mapname().data(), this->src_mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src_mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->src_mapname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserTempPosition)
  return target;
}

int UserTempPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 src_sceneid = 1;
    if (has_src_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_sceneid());
    }

    // optional uint32 src_posx = 2;
    if (has_src_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_posx());
    }

    // optional uint32 src_posy = 3;
    if (has_src_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_posy());
    }

    // optional string src_mapname = 4;
    if (has_src_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_mapname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTempPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTempPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserTempPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTempPosition::MergeFrom(const UserTempPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_sceneid()) {
      set_src_sceneid(from.src_sceneid());
    }
    if (from.has_src_posx()) {
      set_src_posx(from.src_posx());
    }
    if (from.has_src_posy()) {
      set_src_posy(from.src_posy());
    }
    if (from.has_src_mapname()) {
      set_src_mapname(from.src_mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTempPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTempPosition::CopyFrom(const UserTempPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTempPosition::IsInitialized() const {

  return true;
}

void UserTempPosition::Swap(UserTempPosition* other) {
  if (other != this) {
    std::swap(src_sceneid_, other->src_sceneid_);
    std::swap(src_posx_, other->src_posx_);
    std::swap(src_posy_, other->src_posy_);
    std::swap(src_mapname_, other->src_mapname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserTempPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTempPosition_descriptor_;
  metadata.reflection = UserTempPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BiGuanXiuXianData::kTypeFieldNumber;
const int BiGuanXiuXianData::kExpefficFieldNumber;
const int BiGuanXiuXianData::kStarttimeFieldNumber;
const int BiGuanXiuXianData::kStoreexpFieldNumber;
const int BiGuanXiuXianData::kSilverFieldNumber;
const int BiGuanXiuXianData::kGoldFieldNumber;
const int BiGuanXiuXianData::kLevelFieldNumber;
const int BiGuanXiuXianData::kAlltimeFieldNumber;
#endif  // !_MSC_VER

BiGuanXiuXianData::BiGuanXiuXianData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BiGuanXiuXianData)
}

void BiGuanXiuXianData::InitAsDefaultInstance() {
}

BiGuanXiuXianData::BiGuanXiuXianData(const BiGuanXiuXianData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BiGuanXiuXianData)
}

void BiGuanXiuXianData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  expeffic_ = 0u;
  starttime_ = 0u;
  storeexp_ = GOOGLE_ULONGLONG(0);
  silver_ = 0u;
  gold_ = 0u;
  level_ = 0u;
  alltime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BiGuanXiuXianData::~BiGuanXiuXianData() {
  // @@protoc_insertion_point(destructor:BiGuanXiuXianData)
  SharedDtor();
}

void BiGuanXiuXianData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BiGuanXiuXianData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiGuanXiuXianData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiGuanXiuXianData_descriptor_;
}

const BiGuanXiuXianData& BiGuanXiuXianData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BiGuanXiuXianData* BiGuanXiuXianData::default_instance_ = NULL;

BiGuanXiuXianData* BiGuanXiuXianData::New() const {
  return new BiGuanXiuXianData;
}

void BiGuanXiuXianData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BiGuanXiuXianData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, alltime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BiGuanXiuXianData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BiGuanXiuXianData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enumBiGuanXiuXianType type = 1 [default = enumBiGuanXiuXian_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumBiGuanXiuXianType_IsValid(value)) {
            set_type(static_cast< ::enumBiGuanXiuXianType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expeffic;
        break;
      }

      // optional uint32 expeffic = 2;
      case 2: {
        if (tag == 16) {
         parse_expeffic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeffic_)));
          set_has_expeffic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 3;
      case 3: {
        if (tag == 24) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_storeexp;
        break;
      }

      // optional uint64 storeexp = 4;
      case 4: {
        if (tag == 32) {
         parse_storeexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &storeexp_)));
          set_has_storeexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_silver;
        break;
      }

      // optional uint32 silver = 5;
      case 5: {
        if (tag == 40) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 6;
      case 6: {
        if (tag == 48) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_alltime;
        break;
      }

      // optional uint32 alltime = 8;
      case 8: {
        if (tag == 64) {
         parse_alltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alltime_)));
          set_has_alltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BiGuanXiuXianData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BiGuanXiuXianData)
  return false;
#undef DO_
}

void BiGuanXiuXianData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BiGuanXiuXianData)
  // optional .enumBiGuanXiuXianType type = 1 [default = enumBiGuanXiuXian_None];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 expeffic = 2;
  if (has_expeffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expeffic(), output);
  }

  // optional uint32 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starttime(), output);
  }

  // optional uint64 storeexp = 4;
  if (has_storeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->storeexp(), output);
  }

  // optional uint32 silver = 5;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->silver(), output);
  }

  // optional uint32 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gold(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 alltime = 8;
  if (has_alltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->alltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BiGuanXiuXianData)
}

::google::protobuf::uint8* BiGuanXiuXianData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BiGuanXiuXianData)
  // optional .enumBiGuanXiuXianType type = 1 [default = enumBiGuanXiuXian_None];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 expeffic = 2;
  if (has_expeffic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expeffic(), target);
  }

  // optional uint32 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starttime(), target);
  }

  // optional uint64 storeexp = 4;
  if (has_storeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->storeexp(), target);
  }

  // optional uint32 silver = 5;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->silver(), target);
  }

  // optional uint32 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gold(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 alltime = 8;
  if (has_alltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->alltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BiGuanXiuXianData)
  return target;
}

int BiGuanXiuXianData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .enumBiGuanXiuXianType type = 1 [default = enumBiGuanXiuXian_None];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 expeffic = 2;
    if (has_expeffic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeffic());
    }

    // optional uint32 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint64 storeexp = 4;
    if (has_storeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->storeexp());
    }

    // optional uint32 silver = 5;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->silver());
    }

    // optional uint32 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 alltime = 8;
    if (has_alltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiGuanXiuXianData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BiGuanXiuXianData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BiGuanXiuXianData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BiGuanXiuXianData::MergeFrom(const BiGuanXiuXianData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_expeffic()) {
      set_expeffic(from.expeffic());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_storeexp()) {
      set_storeexp(from.storeexp());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_alltime()) {
      set_alltime(from.alltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BiGuanXiuXianData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiGuanXiuXianData::CopyFrom(const BiGuanXiuXianData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiGuanXiuXianData::IsInitialized() const {

  return true;
}

void BiGuanXiuXianData::Swap(BiGuanXiuXianData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(expeffic_, other->expeffic_);
    std::swap(starttime_, other->starttime_);
    std::swap(storeexp_, other->storeexp_);
    std::swap(silver_, other->silver_);
    std::swap(gold_, other->gold_);
    std::swap(level_, other->level_);
    std::swap(alltime_, other->alltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BiGuanXiuXianData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiGuanXiuXianData_descriptor_;
  metadata.reflection = BiGuanXiuXianData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectDrop::kTypeFieldNumber;
const int ObjectDrop::kCountryidFieldNumber;
const int ObjectDrop::kObjectidFieldNumber;
const int ObjectDrop::kNumFieldNumber;
const int ObjectDrop::kPeriodFieldNumber;
const int ObjectDrop::kStarttimeFieldNumber;
const int ObjectDrop::kEndtimeFieldNumber;
const int ObjectDrop::kNextResettimeFieldNumber;
#endif  // !_MSC_VER

ObjectDrop::ObjectDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObjectDrop)
}

void ObjectDrop::InitAsDefaultInstance() {
}

ObjectDrop::ObjectDrop(const ObjectDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ObjectDrop)
}

void ObjectDrop::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  countryid_ = 0u;
  objectid_ = 0u;
  num_ = 0u;
  period_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  next_resettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectDrop::~ObjectDrop() {
  // @@protoc_insertion_point(destructor:ObjectDrop)
  SharedDtor();
}

void ObjectDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDrop_descriptor_;
}

const ObjectDrop& ObjectDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ObjectDrop* ObjectDrop::default_instance_ = NULL;

ObjectDrop* ObjectDrop::New() const {
  return new ObjectDrop;
}

void ObjectDrop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ObjectDrop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(countryid_, next_resettime_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ObjectDrop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enumObjectDropType type = 1 [default = enumObjectDropType_Set];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumObjectDropType_IsValid(value)) {
            set_type(static_cast< ::enumObjectDropType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 2;
      case 2: {
        if (tag == 16) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_objectid;
        break;
      }

      // optional uint32 objectid = 3;
      case 3: {
        if (tag == 24) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_period;
        break;
      }

      // optional uint32 period = 5;
      case 5: {
        if (tag == 40) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 6;
      case 6: {
        if (tag == 48) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 7;
      case 7: {
        if (tag == 56) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_next_resettime;
        break;
      }

      // optional uint32 next_resettime = 8;
      case 8: {
        if (tag == 64) {
         parse_next_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_resettime_)));
          set_has_next_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ObjectDrop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ObjectDrop)
  return false;
#undef DO_
}

void ObjectDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ObjectDrop)
  // optional .enumObjectDropType type = 1 [default = enumObjectDropType_Set];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 countryid = 2;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countryid(), output);
  }

  // optional uint32 objectid = 3;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->objectid(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 period = 5;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->period(), output);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->starttime(), output);
  }

  // optional uint32 endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->endtime(), output);
  }

  // optional uint32 next_resettime = 8;
  if (has_next_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->next_resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ObjectDrop)
}

::google::protobuf::uint8* ObjectDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectDrop)
  // optional .enumObjectDropType type = 1 [default = enumObjectDropType_Set];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 countryid = 2;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->countryid(), target);
  }

  // optional uint32 objectid = 3;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->objectid(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional uint32 period = 5;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->period(), target);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->starttime(), target);
  }

  // optional uint32 endtime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->endtime(), target);
  }

  // optional uint32 next_resettime = 8;
  if (has_next_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->next_resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectDrop)
  return target;
}

int ObjectDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .enumObjectDropType type = 1 [default = enumObjectDropType_Set];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 countryid = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 objectid = 3;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectid());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 period = 5;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period());
    }

    // optional uint32 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 next_resettime = 8;
    if (has_next_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_resettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectDrop::MergeFrom(const ObjectDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_next_resettime()) {
      set_next_resettime(from.next_resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDrop::CopyFrom(const ObjectDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDrop::IsInitialized() const {

  return true;
}

void ObjectDrop::Swap(ObjectDrop* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(countryid_, other->countryid_);
    std::swap(objectid_, other->objectid_);
    std::swap(num_, other->num_);
    std::swap(period_, other->period_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(next_resettime_, other->next_resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDrop_descriptor_;
  metadata.reflection = ObjectDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectDropSave::kObjectFieldNumber;
#endif  // !_MSC_VER

ObjectDropSave::ObjectDropSave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObjectDropSave)
}

void ObjectDropSave::InitAsDefaultInstance() {
}

ObjectDropSave::ObjectDropSave(const ObjectDropSave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ObjectDropSave)
}

void ObjectDropSave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectDropSave::~ObjectDropSave() {
  // @@protoc_insertion_point(destructor:ObjectDropSave)
  SharedDtor();
}

void ObjectDropSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectDropSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDropSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectDropSave_descriptor_;
}

const ObjectDropSave& ObjectDropSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ObjectDropSave* ObjectDropSave::default_instance_ = NULL;

ObjectDropSave* ObjectDropSave::New() const {
  return new ObjectDropSave;
}

void ObjectDropSave::Clear() {
  object_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectDropSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ObjectDropSave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ObjectDrop object = 1;
      case 1: {
        if (tag == 10) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_object;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ObjectDropSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ObjectDropSave)
  return false;
#undef DO_
}

void ObjectDropSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ObjectDropSave)
  // repeated .ObjectDrop object = 1;
  for (int i = 0; i < this->object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ObjectDropSave)
}

::google::protobuf::uint8* ObjectDropSave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectDropSave)
  // repeated .ObjectDrop object = 1;
  for (int i = 0; i < this->object_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectDropSave)
  return target;
}

int ObjectDropSave::ByteSize() const {
  int total_size = 0;

  // repeated .ObjectDrop object = 1;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDropSave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectDropSave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectDropSave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectDropSave::MergeFrom(const ObjectDropSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_.MergeFrom(from.object_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectDropSave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDropSave::CopyFrom(const ObjectDropSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDropSave::IsInitialized() const {

  return true;
}

void ObjectDropSave::Swap(ObjectDropSave* other) {
  if (other != this) {
    object_.Swap(&other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectDropSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectDropSave_descriptor_;
  metadata.reflection = ObjectDropSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CopyUserMember::kCharidFieldNumber;
#endif  // !_MSC_VER

CopyUserMember::CopyUserMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CopyUserMember)
}

void CopyUserMember::InitAsDefaultInstance() {
}

CopyUserMember::CopyUserMember(const CopyUserMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CopyUserMember)
}

void CopyUserMember::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CopyUserMember::~CopyUserMember() {
  // @@protoc_insertion_point(destructor:CopyUserMember)
  SharedDtor();
}

void CopyUserMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CopyUserMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CopyUserMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CopyUserMember_descriptor_;
}

const CopyUserMember& CopyUserMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CopyUserMember* CopyUserMember::default_instance_ = NULL;

CopyUserMember* CopyUserMember::New() const {
  return new CopyUserMember;
}

void CopyUserMember::Clear() {
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CopyUserMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CopyUserMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CopyUserMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CopyUserMember)
  return false;
#undef DO_
}

void CopyUserMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CopyUserMember)
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CopyUserMember)
}

::google::protobuf::uint8* CopyUserMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CopyUserMember)
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CopyUserMember)
  return target;
}

int CopyUserMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CopyUserMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CopyUserMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CopyUserMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CopyUserMember::MergeFrom(const CopyUserMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CopyUserMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyUserMember::CopyFrom(const CopyUserMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyUserMember::IsInitialized() const {

  return true;
}

void CopyUserMember::Swap(CopyUserMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CopyUserMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CopyUserMember_descriptor_;
  metadata.reflection = CopyUserMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCopySceneBinaryData::kMember1FieldNumber;
const int DBCopySceneBinaryData::kMember2FieldNumber;
const int DBCopySceneBinaryData::kCostFieldNumber;
const int DBCopySceneBinaryData::kSeptidFieldNumber;
#endif  // !_MSC_VER

DBCopySceneBinaryData::DBCopySceneBinaryData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBCopySceneBinaryData)
}

void DBCopySceneBinaryData::InitAsDefaultInstance() {
}

DBCopySceneBinaryData::DBCopySceneBinaryData(const DBCopySceneBinaryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBCopySceneBinaryData)
}

void DBCopySceneBinaryData::SharedCtor() {
  _cached_size_ = 0;
  cost_ = 0u;
  septid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCopySceneBinaryData::~DBCopySceneBinaryData() {
  // @@protoc_insertion_point(destructor:DBCopySceneBinaryData)
  SharedDtor();
}

void DBCopySceneBinaryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBCopySceneBinaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCopySceneBinaryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCopySceneBinaryData_descriptor_;
}

const DBCopySceneBinaryData& DBCopySceneBinaryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

DBCopySceneBinaryData* DBCopySceneBinaryData::default_instance_ = NULL;

DBCopySceneBinaryData* DBCopySceneBinaryData::New() const {
  return new DBCopySceneBinaryData;
}

void DBCopySceneBinaryData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBCopySceneBinaryData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cost_, septid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  member1_.Clear();
  member2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCopySceneBinaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBCopySceneBinaryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CopyUserMember member1 = 1;
      case 1: {
        if (tag == 10) {
         parse_member1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_member1;
        if (input->ExpectTag(18)) goto parse_member2;
        break;
      }

      // repeated .CopyUserMember member2 = 2;
      case 2: {
        if (tag == 18) {
         parse_member2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_member2;
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // optional uint32 cost = 3;
      case 3: {
        if (tag == 24) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_septid;
        break;
      }

      // optional uint32 septid = 13;
      case 13: {
        if (tag == 104) {
         parse_septid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septid_)));
          set_has_septid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBCopySceneBinaryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBCopySceneBinaryData)
  return false;
#undef DO_
}

void DBCopySceneBinaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBCopySceneBinaryData)
  // repeated .CopyUserMember member1 = 1;
  for (int i = 0; i < this->member1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member1(i), output);
  }

  // repeated .CopyUserMember member2 = 2;
  for (int i = 0; i < this->member2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member2(i), output);
  }

  // optional uint32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost(), output);
  }

  // optional uint32 septid = 13;
  if (has_septid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->septid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBCopySceneBinaryData)
}

::google::protobuf::uint8* DBCopySceneBinaryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBCopySceneBinaryData)
  // repeated .CopyUserMember member1 = 1;
  for (int i = 0; i < this->member1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member1(i), target);
  }

  // repeated .CopyUserMember member2 = 2;
  for (int i = 0; i < this->member2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member2(i), target);
  }

  // optional uint32 cost = 3;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost(), target);
  }

  // optional uint32 septid = 13;
  if (has_septid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->septid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBCopySceneBinaryData)
  return target;
}

int DBCopySceneBinaryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // optional uint32 septid = 13;
    if (has_septid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septid());
    }

  }
  // repeated .CopyUserMember member1 = 1;
  total_size += 1 * this->member1_size();
  for (int i = 0; i < this->member1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member1(i));
  }

  // repeated .CopyUserMember member2 = 2;
  total_size += 1 * this->member2_size();
  for (int i = 0; i < this->member2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member2(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCopySceneBinaryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCopySceneBinaryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCopySceneBinaryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCopySceneBinaryData::MergeFrom(const DBCopySceneBinaryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  member1_.MergeFrom(from.member1_);
  member2_.MergeFrom(from.member2_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_septid()) {
      set_septid(from.septid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCopySceneBinaryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCopySceneBinaryData::CopyFrom(const DBCopySceneBinaryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCopySceneBinaryData::IsInitialized() const {

  return true;
}

void DBCopySceneBinaryData::Swap(DBCopySceneBinaryData* other) {
  if (other != this) {
    member1_.Swap(&other->member1_);
    member2_.Swap(&other->member2_);
    std::swap(cost_, other->cost_);
    std::swap(septid_, other->septid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCopySceneBinaryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCopySceneBinaryData_descriptor_;
  metadata.reflection = DBCopySceneBinaryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HorseExtraData::kHorseidFieldNumber;
const int HorseExtraData::kLevelFieldNumber;
const int HorseExtraData::kExpFieldNumber;
const int HorseExtraData::kSpeedFieldNumber;
const int HorseExtraData::kSmiterateFieldNumber;
const int HorseExtraData::kLuckFieldNumber;
const int HorseExtraData::kSkillidFieldNumber;
const int HorseExtraData::kBaseidFieldNumber;
const int HorseExtraData::kThisidFieldNumber;
const int HorseExtraData::kSkilllevelFieldNumber;
#endif  // !_MSC_VER

HorseExtraData::HorseExtraData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HorseExtraData)
}

void HorseExtraData::InitAsDefaultInstance() {
}

HorseExtraData::HorseExtraData(const HorseExtraData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HorseExtraData)
}

void HorseExtraData::SharedCtor() {
  _cached_size_ = 0;
  horseid_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  speed_ = 0u;
  smiterate_ = 0u;
  luck_ = 0u;
  baseid_ = 0u;
  thisid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HorseExtraData::~HorseExtraData() {
  // @@protoc_insertion_point(destructor:HorseExtraData)
  SharedDtor();
}

void HorseExtraData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HorseExtraData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorseExtraData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HorseExtraData_descriptor_;
}

const HorseExtraData& HorseExtraData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

HorseExtraData* HorseExtraData::default_instance_ = NULL;

HorseExtraData* HorseExtraData::New() const {
  return new HorseExtraData;
}

void HorseExtraData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HorseExtraData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(horseid_, luck_);
    baseid_ = 0u;
  }
  thisid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  skillid_.Clear();
  skilllevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HorseExtraData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HorseExtraData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 horseid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_speed;
        break;
      }

      // optional uint32 speed = 4;
      case 4: {
        if (tag == 32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_smiterate;
        break;
      }

      // optional uint32 smiterate = 5;
      case 5: {
        if (tag == 40) {
         parse_smiterate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smiterate_)));
          set_has_smiterate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_luck;
        break;
      }

      // optional uint32 luck = 6;
      case 6: {
        if (tag == 48) {
         parse_luck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luck_)));
          set_has_luck();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_skillid;
        break;
      }

      // repeated uint32 skillid = 7;
      case 7: {
        if (tag == 56) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_skillid())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_skillid;
        if (input->ExpectTag(64)) goto parse_baseid;
        break;
      }

      // optional uint32 baseid = 8;
      case 8: {
        if (tag == 64) {
         parse_baseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseid_)));
          set_has_baseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_thisid;
        break;
      }

      // optional uint32 thisid = 9;
      case 9: {
        if (tag == 72) {
         parse_thisid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thisid_)));
          set_has_thisid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_skilllevel;
        break;
      }

      // repeated uint32 skilllevel = 10;
      case 10: {
        if (tag == 80) {
         parse_skilllevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_skilllevel())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skilllevel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_skilllevel;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HorseExtraData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HorseExtraData)
  return false;
#undef DO_
}

void HorseExtraData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HorseExtraData)
  // optional uint32 horseid = 1;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->horseid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->speed(), output);
  }

  // optional uint32 smiterate = 5;
  if (has_smiterate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->smiterate(), output);
  }

  // optional uint32 luck = 6;
  if (has_luck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->luck(), output);
  }

  // repeated uint32 skillid = 7;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->skillid(i), output);
  }

  // optional uint32 baseid = 8;
  if (has_baseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->baseid(), output);
  }

  // optional uint32 thisid = 9;
  if (has_thisid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->thisid(), output);
  }

  // repeated uint32 skilllevel = 10;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->skilllevel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HorseExtraData)
}

::google::protobuf::uint8* HorseExtraData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HorseExtraData)
  // optional uint32 horseid = 1;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->horseid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->speed(), target);
  }

  // optional uint32 smiterate = 5;
  if (has_smiterate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->smiterate(), target);
  }

  // optional uint32 luck = 6;
  if (has_luck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->luck(), target);
  }

  // repeated uint32 skillid = 7;
  for (int i = 0; i < this->skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->skillid(i), target);
  }

  // optional uint32 baseid = 8;
  if (has_baseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->baseid(), target);
  }

  // optional uint32 thisid = 9;
  if (has_thisid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->thisid(), target);
  }

  // repeated uint32 skilllevel = 10;
  for (int i = 0; i < this->skilllevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->skilllevel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HorseExtraData)
  return target;
}

int HorseExtraData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 horseid = 1;
    if (has_horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horseid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 smiterate = 5;
    if (has_smiterate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->smiterate());
    }

    // optional uint32 luck = 6;
    if (has_luck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luck());
    }

    // optional uint32 baseid = 8;
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 thisid = 9;
    if (has_thisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thisid());
    }

  }
  // repeated uint32 skillid = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }

  // repeated uint32 skilllevel = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skilllevel(i));
    }
    total_size += 1 * this->skilllevel_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorseExtraData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HorseExtraData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HorseExtraData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HorseExtraData::MergeFrom(const HorseExtraData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillid_.MergeFrom(from.skillid_);
  skilllevel_.MergeFrom(from.skilllevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_smiterate()) {
      set_smiterate(from.smiterate());
    }
    if (from.has_luck()) {
      set_luck(from.luck());
    }
    if (from.has_baseid()) {
      set_baseid(from.baseid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_thisid()) {
      set_thisid(from.thisid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HorseExtraData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorseExtraData::CopyFrom(const HorseExtraData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorseExtraData::IsInitialized() const {

  return true;
}

void HorseExtraData::Swap(HorseExtraData* other) {
  if (other != this) {
    std::swap(horseid_, other->horseid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(speed_, other->speed_);
    std::swap(smiterate_, other->smiterate_);
    std::swap(luck_, other->luck_);
    skillid_.Swap(&other->skillid_);
    std::swap(baseid_, other->baseid_);
    std::swap(thisid_, other->thisid_);
    skilllevel_.Swap(&other->skilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HorseExtraData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HorseExtraData_descriptor_;
  metadata.reflection = HorseExtraData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMapShow::kFaceFieldNumber;
const int CharacterMapShow::kHairstyleFieldNumber;
const int CharacterMapShow::kHaircolorFieldNumber;
const int CharacterMapShow::kWeaponFieldNumber;
const int CharacterMapShow::kCoatFieldNumber;
const int CharacterMapShow::kHorseFieldNumber;
const int CharacterMapShow::kWingFieldNumber;
#endif  // !_MSC_VER

CharacterMapShow::CharacterMapShow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CharacterMapShow)
}

void CharacterMapShow::InitAsDefaultInstance() {
}

CharacterMapShow::CharacterMapShow(const CharacterMapShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CharacterMapShow)
}

void CharacterMapShow::SharedCtor() {
  _cached_size_ = 0;
  face_ = 0u;
  hairstyle_ = 0u;
  haircolor_ = 0u;
  weapon_ = 0u;
  coat_ = 0u;
  horse_ = 0u;
  wing_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMapShow::~CharacterMapShow() {
  // @@protoc_insertion_point(destructor:CharacterMapShow)
  SharedDtor();
}

void CharacterMapShow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMapShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMapShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMapShow_descriptor_;
}

const CharacterMapShow& CharacterMapShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CharacterMapShow* CharacterMapShow::default_instance_ = NULL;

CharacterMapShow* CharacterMapShow::New() const {
  return new CharacterMapShow;
}

void CharacterMapShow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CharacterMapShow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(face_, wing_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMapShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CharacterMapShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 face = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hairstyle;
        break;
      }

      // optional uint32 hairstyle = 2;
      case 2: {
        if (tag == 16) {
         parse_hairstyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hairstyle_)));
          set_has_hairstyle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 3;
      case 3: {
        if (tag == 24) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_weapon;
        break;
      }

      // optional uint32 weapon = 4;
      case 4: {
        if (tag == 32) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coat;
        break;
      }

      // optional uint32 coat = 5;
      case 5: {
        if (tag == 40) {
         parse_coat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coat_)));
          set_has_coat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_horse;
        break;
      }

      // optional uint32 horse = 6;
      case 6: {
        if (tag == 48) {
         parse_horse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horse_)));
          set_has_horse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_wing;
        break;
      }

      // optional uint32 wing = 7;
      case 7: {
        if (tag == 56) {
         parse_wing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wing_)));
          set_has_wing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CharacterMapShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CharacterMapShow)
  return false;
#undef DO_
}

void CharacterMapShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CharacterMapShow)
  // optional uint32 face = 1;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->face(), output);
  }

  // optional uint32 hairstyle = 2;
  if (has_hairstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hairstyle(), output);
  }

  // optional uint32 haircolor = 3;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->haircolor(), output);
  }

  // optional uint32 weapon = 4;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->weapon(), output);
  }

  // optional uint32 coat = 5;
  if (has_coat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coat(), output);
  }

  // optional uint32 horse = 6;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->horse(), output);
  }

  // optional uint32 wing = 7;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->wing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CharacterMapShow)
}

::google::protobuf::uint8* CharacterMapShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacterMapShow)
  // optional uint32 face = 1;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->face(), target);
  }

  // optional uint32 hairstyle = 2;
  if (has_hairstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hairstyle(), target);
  }

  // optional uint32 haircolor = 3;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->haircolor(), target);
  }

  // optional uint32 weapon = 4;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->weapon(), target);
  }

  // optional uint32 coat = 5;
  if (has_coat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->coat(), target);
  }

  // optional uint32 horse = 6;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->horse(), target);
  }

  // optional uint32 wing = 7;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->wing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacterMapShow)
  return target;
}

int CharacterMapShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 face = 1;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 hairstyle = 2;
    if (has_hairstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hairstyle());
    }

    // optional uint32 haircolor = 3;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 weapon = 4;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon());
    }

    // optional uint32 coat = 5;
    if (has_coat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coat());
    }

    // optional uint32 horse = 6;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horse());
    }

    // optional uint32 wing = 7;
    if (has_wing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMapShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMapShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMapShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMapShow::MergeFrom(const CharacterMapShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_hairstyle()) {
      set_hairstyle(from.hairstyle());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_coat()) {
      set_coat(from.coat());
    }
    if (from.has_horse()) {
      set_horse(from.horse());
    }
    if (from.has_wing()) {
      set_wing(from.wing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMapShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMapShow::CopyFrom(const CharacterMapShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMapShow::IsInitialized() const {

  return true;
}

void CharacterMapShow::Swap(CharacterMapShow* other) {
  if (other != this) {
    std::swap(face_, other->face_);
    std::swap(hairstyle_, other->hairstyle_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(weapon_, other->weapon_);
    std::swap(coat_, other->coat_);
    std::swap(horse_, other->horse_);
    std::swap(wing_, other->wing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMapShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMapShow_descriptor_;
  metadata.reflection = CharacterMapShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateData::kStateidFieldNumber;
const int StateData::kTimeFieldNumber;
const int StateData::kLevelFieldNumber;
const int StateData::kLinkpointFieldNumber;
#endif  // !_MSC_VER

StateData::StateData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StateData)
}

void StateData::InitAsDefaultInstance() {
}

StateData::StateData(const StateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StateData)
}

void StateData::SharedCtor() {
  _cached_size_ = 0;
  stateid_ = GOOGLE_ULONGLONG(0);
  time_ = 0;
  level_ = 0;
  linkpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateData::~StateData() {
  // @@protoc_insertion_point(destructor:StateData)
  SharedDtor();
}

void StateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateData_descriptor_;
}

const StateData& StateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StateData* StateData::default_instance_ = NULL;

StateData* StateData::New() const {
  return new StateData;
}

void StateData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StateData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stateid_, linkpoint_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StateData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_linkpoint;
        break;
      }

      // optional uint32 linkpoint = 4;
      case 4: {
        if (tag == 32) {
         parse_linkpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linkpoint_)));
          set_has_linkpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StateData)
  return false;
#undef DO_
}

void StateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StateData)
  // optional uint64 stateid = 1;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stateid(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional uint32 linkpoint = 4;
  if (has_linkpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->linkpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StateData)
}

::google::protobuf::uint8* StateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StateData)
  // optional uint64 stateid = 1;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stateid(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional uint32 linkpoint = 4;
  if (has_linkpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->linkpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StateData)
  return target;
}

int StateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stateid = 1;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stateid());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 linkpoint = 4;
    if (has_linkpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linkpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateData::MergeFrom(const StateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_linkpoint()) {
      set_linkpoint(from.linkpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateData::CopyFrom(const StateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateData::IsInitialized() const {

  return true;
}

void StateData::Swap(StateData* other) {
  if (other != this) {
    std::swap(stateid_, other->stateid_);
    std::swap(time_, other->time_);
    std::swap(level_, other->level_);
    std::swap(linkpoint_, other->linkpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateData_descriptor_;
  metadata.reflection = StateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMapData::kMapShowFieldNumber;
const int CharacterMapData::kIdFieldNumber;
const int CharacterMapData::kCountryFieldNumber;
const int CharacterMapData::kSeptOfficerFieldNumber;
const int CharacterMapData::kLevelFieldNumber;
const int CharacterMapData::kXFieldNumber;
const int CharacterMapData::kYFieldNumber;
const int CharacterMapData::kZFieldNumber;
const int CharacterMapData::kDirFieldNumber;
const int CharacterMapData::kMoveSpeedFieldNumber;
const int CharacterMapData::kEvilvalueFieldNumber;
const int CharacterMapData::kQuestStateFieldNumber;
const int CharacterMapData::kShopNameFieldNumber;
const int CharacterMapData::kShopStateFieldNumber;
const int CharacterMapData::kShopNameColorFieldNumber;
const int CharacterMapData::kNinestateFieldNumber;
const int CharacterMapData::kNameFieldNumber;
const int CharacterMapData::kSeptnameFieldNumber;
const int CharacterMapData::kTitleFieldNumber;
const int CharacterMapData::kTeamNameFieldNumber;
const int CharacterMapData::kWorldLevelFieldNumber;
const int CharacterMapData::kGohomeFieldNumber;
const int CharacterMapData::kChariotTempidFieldNumber;
const int CharacterMapData::kChariotMastertypeFieldNumber;
const int CharacterMapData::kProfessionFieldNumber;
const int CharacterMapData::kIsGoldShopFieldNumber;
const int CharacterMapData::kHpFieldNumber;
const int CharacterMapData::kMaxhpFieldNumber;
const int CharacterMapData::kPkcampFieldNumber;
const int CharacterMapData::kCitywarwinnerFieldNumber;
const int CharacterMapData::kDuelmodeFieldNumber;
const int CharacterMapData::kCastleLevelFieldNumber;
const int CharacterMapData::kWingidFieldNumber;
const int CharacterMapData::kWinglevelFieldNumber;
const int CharacterMapData::kWingstrenglevelFieldNumber;
const int CharacterMapData::kSubprofessionFieldNumber;
const int CharacterMapData::kNewtitleFieldNumber;
#endif  // !_MSC_VER

CharacterMapData::CharacterMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CharacterMapData)
}

void CharacterMapData::InitAsDefaultInstance() {
  mapshow_ = const_cast< ::CharacterMapShow*>(&::CharacterMapShow::default_instance());
}

CharacterMapData::CharacterMapData(const CharacterMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CharacterMapData)
}

void CharacterMapData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapshow_ = NULL;
  id_ = 0u;
  country_ = 0u;
  septofficer_ = 0u;
  level_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  dir_ = 0u;
  movespeed_ = 0u;
  evilvalue_ = 0u;
  queststate_ = 0u;
  shopname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shopstate_ = 0u;
  shopnamecolor_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  septname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worldlevel_ = 0u;
  gohome_ = 0u;
  chariot_tempid_ = 0u;
  chariot_mastertype_ = 0u;
  profession_ = 0;
  is_gold_shop_ = false;
  hp_ = 0u;
  maxhp_ = 0u;
  pkcamp_ = 0u;
  citywarwinner_ = false;
  duelmode_ = 0u;
  castle_level_ = 0u;
  wingid_ = 0u;
  winglevel_ = 0u;
  wingstrenglevel_ = 0u;
  subprofession_ = 0u;
  newtitle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMapData::~CharacterMapData() {
  // @@protoc_insertion_point(destructor:CharacterMapData)
  SharedDtor();
}

void CharacterMapData::SharedDtor() {
  if (shopname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shopname_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (septname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete septname_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (this != default_instance_) {
    delete mapshow_;
  }
}

void CharacterMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMapData_descriptor_;
}

const CharacterMapData& CharacterMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CharacterMapData* CharacterMapData::default_instance_ = NULL;

CharacterMapData* CharacterMapData::New() const {
  return new CharacterMapData;
}

void CharacterMapData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CharacterMapData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, z_);
    if (has_mapshow()) {
      if (mapshow_ != NULL) mapshow_->::CharacterMapShow::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(dir_, evilvalue_);
    ZR_(queststate_, shopstate_);
    if (has_shopname()) {
      if (shopname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shopname_->clear();
      }
    }
    shopnamecolor_ = 0u;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(gohome_, chariot_mastertype_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_septname()) {
      if (septname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        septname_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamname_->clear();
      }
    }
    worldlevel_ = 0u;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(profession_, castle_level_);
  }
  if (_has_bits_[32 / 32] & 31) {
    ZR_(wingid_, newtitle_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ninestate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CharacterMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharacterMapShow mapShow = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapshow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_country;
        break;
      }

      // optional uint32 country = 3;
      case 3: {
        if (tag == 24) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_septOfficer;
        break;
      }

      // optional uint32 septOfficer = 4;
      case 4: {
        if (tag == 32) {
         parse_septOfficer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septofficer_)));
          set_has_septofficer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_x;
        break;
      }

      // optional uint32 x = 7;
      case 7: {
        if (tag == 56) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_y;
        break;
      }

      // optional uint32 y = 8;
      case 8: {
        if (tag == 64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 9;
      case 9: {
        if (tag == 72) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_moveSpeed;
        break;
      }

      // optional uint32 moveSpeed = 10;
      case 10: {
        if (tag == 80) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_evilvalue;
        break;
      }

      // optional uint32 evilvalue = 11;
      case 11: {
        if (tag == 88) {
         parse_evilvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evilvalue_)));
          set_has_evilvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_questState;
        break;
      }

      // optional uint32 questState = 12;
      case 12: {
        if (tag == 96) {
         parse_questState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queststate_)));
          set_has_queststate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_shopName;
        break;
      }

      // optional string shopName = 13;
      case 13: {
        if (tag == 106) {
         parse_shopName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shopname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shopname().data(), this->shopname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shopname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_shopState;
        break;
      }

      // optional uint32 shopState = 14;
      case 14: {
        if (tag == 112) {
         parse_shopState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopstate_)));
          set_has_shopstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_shopNameColor;
        break;
      }

      // optional uint32 shopNameColor = 15;
      case 15: {
        if (tag == 120) {
         parse_shopNameColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopnamecolor_)));
          set_has_shopnamecolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_ninestate;
        break;
      }

      // repeated .StateData ninestate = 16;
      case 16: {
        if (tag == 130) {
         parse_ninestate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ninestate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_ninestate;
        if (input->ExpectTag(138)) goto parse_name;
        break;
      }

      // optional string name = 17;
      case 17: {
        if (tag == 138) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_septname;
        break;
      }

      // optional string septname = 18;
      case 18: {
        if (tag == 146) {
         parse_septname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_septname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->septname().data(), this->septname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "septname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_title;
        break;
      }

      // optional string title = 20;
      case 20: {
        if (tag == 162) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_teamName;
        break;
      }

      // optional string teamName = 21;
      case 21: {
        if (tag == 170) {
         parse_teamName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_worldLevel;
        break;
      }

      // optional uint32 worldLevel = 22;
      case 22: {
        if (tag == 176) {
         parse_worldLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldlevel_)));
          set_has_worldlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gohome;
        break;
      }

      // optional uint32 gohome = 23;
      case 23: {
        if (tag == 184) {
         parse_gohome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gohome_)));
          set_has_gohome();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_chariot_tempid;
        break;
      }

      // optional uint32 chariot_tempid = 24;
      case 24: {
        if (tag == 192) {
         parse_chariot_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chariot_tempid_)));
          set_has_chariot_tempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_chariot_mastertype;
        break;
      }

      // optional uint32 chariot_mastertype = 25;
      case 25: {
        if (tag == 200) {
         parse_chariot_mastertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chariot_mastertype_)));
          set_has_chariot_mastertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_profession;
        break;
      }

      // optional .ProfessionType profession = 26 [default = Profession_None];
      case 26: {
        if (tag == 208) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProfessionType_IsValid(value)) {
            set_profession(static_cast< ::ProfessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_is_gold_shop;
        break;
      }

      // optional bool is_gold_shop = 27 [default = false];
      case 27: {
        if (tag == 216) {
         parse_is_gold_shop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gold_shop_)));
          set_has_is_gold_shop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 28;
      case 28: {
        if (tag == 224) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_maxhp;
        break;
      }

      // optional uint32 maxhp = 29;
      case 29: {
        if (tag == 232) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_pkcamp;
        break;
      }

      // optional uint32 pkcamp = 30;
      case 30: {
        if (tag == 240) {
         parse_pkcamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkcamp_)));
          set_has_pkcamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_citywarwinner;
        break;
      }

      // optional bool citywarwinner = 31;
      case 31: {
        if (tag == 248) {
         parse_citywarwinner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &citywarwinner_)));
          set_has_citywarwinner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_duelmode;
        break;
      }

      // optional uint32 duelmode = 32;
      case 32: {
        if (tag == 256) {
         parse_duelmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duelmode_)));
          set_has_duelmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_castle_level;
        break;
      }

      // optional uint32 castle_level = 33;
      case 33: {
        if (tag == 264) {
         parse_castle_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castle_level_)));
          set_has_castle_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_wingid;
        break;
      }

      // optional uint32 wingid = 34;
      case 34: {
        if (tag == 272) {
         parse_wingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_winglevel;
        break;
      }

      // optional uint32 winglevel = 35;
      case 35: {
        if (tag == 280) {
         parse_winglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winglevel_)));
          set_has_winglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_wingstrenglevel;
        break;
      }

      // optional uint32 wingstrenglevel = 36;
      case 36: {
        if (tag == 288) {
         parse_wingstrenglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingstrenglevel_)));
          set_has_wingstrenglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_subprofession;
        break;
      }

      // optional uint32 subprofession = 37;
      case 37: {
        if (tag == 296) {
         parse_subprofession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprofession_)));
          set_has_subprofession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_z;
        break;
      }

      // optional uint32 z = 38;
      case 38: {
        if (tag == 304) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_newtitle;
        break;
      }

      // optional uint32 newtitle = 39;
      case 39: {
        if (tag == 312) {
         parse_newtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newtitle_)));
          set_has_newtitle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CharacterMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CharacterMapData)
  return false;
#undef DO_
}

void CharacterMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CharacterMapData)
  // optional .CharacterMapShow mapShow = 1;
  if (has_mapshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapshow(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->country(), output);
  }

  // optional uint32 septOfficer = 4;
  if (has_septofficer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->septofficer(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 x = 7;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->x(), output);
  }

  // optional uint32 y = 8;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->y(), output);
  }

  // optional uint32 dir = 9;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dir(), output);
  }

  // optional uint32 moveSpeed = 10;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->movespeed(), output);
  }

  // optional uint32 evilvalue = 11;
  if (has_evilvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->evilvalue(), output);
  }

  // optional uint32 questState = 12;
  if (has_queststate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->queststate(), output);
  }

  // optional string shopName = 13;
  if (has_shopname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shopname().data(), this->shopname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shopname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->shopname(), output);
  }

  // optional uint32 shopState = 14;
  if (has_shopstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->shopstate(), output);
  }

  // optional uint32 shopNameColor = 15;
  if (has_shopnamecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->shopnamecolor(), output);
  }

  // repeated .StateData ninestate = 16;
  for (int i = 0; i < this->ninestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->ninestate(i), output);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->name(), output);
  }

  // optional string septname = 18;
  if (has_septname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->septname().data(), this->septname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "septname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->septname(), output);
  }

  // optional string title = 20;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->title(), output);
  }

  // optional string teamName = 21;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->teamname(), output);
  }

  // optional uint32 worldLevel = 22;
  if (has_worldlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->worldlevel(), output);
  }

  // optional uint32 gohome = 23;
  if (has_gohome()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gohome(), output);
  }

  // optional uint32 chariot_tempid = 24;
  if (has_chariot_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->chariot_tempid(), output);
  }

  // optional uint32 chariot_mastertype = 25;
  if (has_chariot_mastertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->chariot_mastertype(), output);
  }

  // optional .ProfessionType profession = 26 [default = Profession_None];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->profession(), output);
  }

  // optional bool is_gold_shop = 27 [default = false];
  if (has_is_gold_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_gold_shop(), output);
  }

  // optional uint32 hp = 28;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->hp(), output);
  }

  // optional uint32 maxhp = 29;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->maxhp(), output);
  }

  // optional uint32 pkcamp = 30;
  if (has_pkcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->pkcamp(), output);
  }

  // optional bool citywarwinner = 31;
  if (has_citywarwinner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->citywarwinner(), output);
  }

  // optional uint32 duelmode = 32;
  if (has_duelmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->duelmode(), output);
  }

  // optional uint32 castle_level = 33;
  if (has_castle_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->castle_level(), output);
  }

  // optional uint32 wingid = 34;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->wingid(), output);
  }

  // optional uint32 winglevel = 35;
  if (has_winglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->winglevel(), output);
  }

  // optional uint32 wingstrenglevel = 36;
  if (has_wingstrenglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->wingstrenglevel(), output);
  }

  // optional uint32 subprofession = 37;
  if (has_subprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->subprofession(), output);
  }

  // optional uint32 z = 38;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->z(), output);
  }

  // optional uint32 newtitle = 39;
  if (has_newtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->newtitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CharacterMapData)
}

::google::protobuf::uint8* CharacterMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacterMapData)
  // optional .CharacterMapShow mapShow = 1;
  if (has_mapshow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapshow(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 country = 3;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->country(), target);
  }

  // optional uint32 septOfficer = 4;
  if (has_septofficer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->septofficer(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 x = 7;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->x(), target);
  }

  // optional uint32 y = 8;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->y(), target);
  }

  // optional uint32 dir = 9;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dir(), target);
  }

  // optional uint32 moveSpeed = 10;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->movespeed(), target);
  }

  // optional uint32 evilvalue = 11;
  if (has_evilvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->evilvalue(), target);
  }

  // optional uint32 questState = 12;
  if (has_queststate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->queststate(), target);
  }

  // optional string shopName = 13;
  if (has_shopname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shopname().data(), this->shopname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shopname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->shopname(), target);
  }

  // optional uint32 shopState = 14;
  if (has_shopstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->shopstate(), target);
  }

  // optional uint32 shopNameColor = 15;
  if (has_shopnamecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->shopnamecolor(), target);
  }

  // repeated .StateData ninestate = 16;
  for (int i = 0; i < this->ninestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->ninestate(i), target);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->name(), target);
  }

  // optional string septname = 18;
  if (has_septname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->septname().data(), this->septname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "septname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->septname(), target);
  }

  // optional string title = 20;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->title(), target);
  }

  // optional string teamName = 21;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->teamname(), target);
  }

  // optional uint32 worldLevel = 22;
  if (has_worldlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->worldlevel(), target);
  }

  // optional uint32 gohome = 23;
  if (has_gohome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gohome(), target);
  }

  // optional uint32 chariot_tempid = 24;
  if (has_chariot_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->chariot_tempid(), target);
  }

  // optional uint32 chariot_mastertype = 25;
  if (has_chariot_mastertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->chariot_mastertype(), target);
  }

  // optional .ProfessionType profession = 26 [default = Profession_None];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->profession(), target);
  }

  // optional bool is_gold_shop = 27 [default = false];
  if (has_is_gold_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_gold_shop(), target);
  }

  // optional uint32 hp = 28;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->hp(), target);
  }

  // optional uint32 maxhp = 29;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->maxhp(), target);
  }

  // optional uint32 pkcamp = 30;
  if (has_pkcamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->pkcamp(), target);
  }

  // optional bool citywarwinner = 31;
  if (has_citywarwinner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->citywarwinner(), target);
  }

  // optional uint32 duelmode = 32;
  if (has_duelmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->duelmode(), target);
  }

  // optional uint32 castle_level = 33;
  if (has_castle_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->castle_level(), target);
  }

  // optional uint32 wingid = 34;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->wingid(), target);
  }

  // optional uint32 winglevel = 35;
  if (has_winglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->winglevel(), target);
  }

  // optional uint32 wingstrenglevel = 36;
  if (has_wingstrenglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->wingstrenglevel(), target);
  }

  // optional uint32 subprofession = 37;
  if (has_subprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->subprofession(), target);
  }

  // optional uint32 z = 38;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->z(), target);
  }

  // optional uint32 newtitle = 39;
  if (has_newtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->newtitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacterMapData)
  return target;
}

int CharacterMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharacterMapShow mapShow = 1;
    if (has_mapshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapshow());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional uint32 septOfficer = 4;
    if (has_septofficer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septofficer());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 x = 7;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 8;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 38;
    if (has_z()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dir = 9;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

    // optional uint32 moveSpeed = 10;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

    // optional uint32 evilvalue = 11;
    if (has_evilvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evilvalue());
    }

    // optional uint32 questState = 12;
    if (has_queststate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queststate());
    }

    // optional string shopName = 13;
    if (has_shopname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shopname());
    }

    // optional uint32 shopState = 14;
    if (has_shopstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopstate());
    }

    // optional uint32 shopNameColor = 15;
    if (has_shopnamecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopnamecolor());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string name = 17;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string septname = 18;
    if (has_septname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->septname());
    }

    // optional string title = 20;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string teamName = 21;
    if (has_teamname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

    // optional uint32 worldLevel = 22;
    if (has_worldlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldlevel());
    }

    // optional uint32 gohome = 23;
    if (has_gohome()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gohome());
    }

    // optional uint32 chariot_tempid = 24;
    if (has_chariot_tempid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chariot_tempid());
    }

    // optional uint32 chariot_mastertype = 25;
    if (has_chariot_mastertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chariot_mastertype());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .ProfessionType profession = 26 [default = Profession_None];
    if (has_profession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional bool is_gold_shop = 27 [default = false];
    if (has_is_gold_shop()) {
      total_size += 2 + 1;
    }

    // optional uint32 hp = 28;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 maxhp = 29;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 pkcamp = 30;
    if (has_pkcamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkcamp());
    }

    // optional bool citywarwinner = 31;
    if (has_citywarwinner()) {
      total_size += 2 + 1;
    }

    // optional uint32 duelmode = 32;
    if (has_duelmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duelmode());
    }

    // optional uint32 castle_level = 33;
    if (has_castle_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castle_level());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 wingid = 34;
    if (has_wingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 winglevel = 35;
    if (has_winglevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winglevel());
    }

    // optional uint32 wingstrenglevel = 36;
    if (has_wingstrenglevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingstrenglevel());
    }

    // optional uint32 subprofession = 37;
    if (has_subprofession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subprofession());
    }

    // optional uint32 newtitle = 39;
    if (has_newtitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newtitle());
    }

  }
  // repeated .StateData ninestate = 16;
  total_size += 2 * this->ninestate_size();
  for (int i = 0; i < this->ninestate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ninestate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMapData::MergeFrom(const CharacterMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ninestate_.MergeFrom(from.ninestate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapshow()) {
      mutable_mapshow()->::CharacterMapShow::MergeFrom(from.mapshow());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_septofficer()) {
      set_septofficer(from.septofficer());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_evilvalue()) {
      set_evilvalue(from.evilvalue());
    }
    if (from.has_queststate()) {
      set_queststate(from.queststate());
    }
    if (from.has_shopname()) {
      set_shopname(from.shopname());
    }
    if (from.has_shopstate()) {
      set_shopstate(from.shopstate());
    }
    if (from.has_shopnamecolor()) {
      set_shopnamecolor(from.shopnamecolor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_septname()) {
      set_septname(from.septname());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
    if (from.has_worldlevel()) {
      set_worldlevel(from.worldlevel());
    }
    if (from.has_gohome()) {
      set_gohome(from.gohome());
    }
    if (from.has_chariot_tempid()) {
      set_chariot_tempid(from.chariot_tempid());
    }
    if (from.has_chariot_mastertype()) {
      set_chariot_mastertype(from.chariot_mastertype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_is_gold_shop()) {
      set_is_gold_shop(from.is_gold_shop());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_pkcamp()) {
      set_pkcamp(from.pkcamp());
    }
    if (from.has_citywarwinner()) {
      set_citywarwinner(from.citywarwinner());
    }
    if (from.has_duelmode()) {
      set_duelmode(from.duelmode());
    }
    if (from.has_castle_level()) {
      set_castle_level(from.castle_level());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_winglevel()) {
      set_winglevel(from.winglevel());
    }
    if (from.has_wingstrenglevel()) {
      set_wingstrenglevel(from.wingstrenglevel());
    }
    if (from.has_subprofession()) {
      set_subprofession(from.subprofession());
    }
    if (from.has_newtitle()) {
      set_newtitle(from.newtitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMapData::CopyFrom(const CharacterMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMapData::IsInitialized() const {

  return true;
}

void CharacterMapData::Swap(CharacterMapData* other) {
  if (other != this) {
    std::swap(mapshow_, other->mapshow_);
    std::swap(id_, other->id_);
    std::swap(country_, other->country_);
    std::swap(septofficer_, other->septofficer_);
    std::swap(level_, other->level_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(dir_, other->dir_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(evilvalue_, other->evilvalue_);
    std::swap(queststate_, other->queststate_);
    std::swap(shopname_, other->shopname_);
    std::swap(shopstate_, other->shopstate_);
    std::swap(shopnamecolor_, other->shopnamecolor_);
    ninestate_.Swap(&other->ninestate_);
    std::swap(name_, other->name_);
    std::swap(septname_, other->septname_);
    std::swap(title_, other->title_);
    std::swap(teamname_, other->teamname_);
    std::swap(worldlevel_, other->worldlevel_);
    std::swap(gohome_, other->gohome_);
    std::swap(chariot_tempid_, other->chariot_tempid_);
    std::swap(chariot_mastertype_, other->chariot_mastertype_);
    std::swap(profession_, other->profession_);
    std::swap(is_gold_shop_, other->is_gold_shop_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(pkcamp_, other->pkcamp_);
    std::swap(citywarwinner_, other->citywarwinner_);
    std::swap(duelmode_, other->duelmode_);
    std::swap(castle_level_, other->castle_level_);
    std::swap(wingid_, other->wingid_);
    std::swap(winglevel_, other->winglevel_);
    std::swap(wingstrenglevel_, other->wingstrenglevel_);
    std::swap(subprofession_, other->subprofession_);
    std::swap(newtitle_, other->newtitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMapData_descriptor_;
  metadata.reflection = CharacterMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMainData::kMapDataFieldNumber;
const int CharacterMainData::kMpFieldNumber;
const int CharacterMainData::kMaxmpFieldNumber;
const int CharacterMainData::kExpFieldNumber;
const int CharacterMainData::kStrengthFieldNumber;
const int CharacterMainData::kDexterityFieldNumber;
const int CharacterMainData::kMentalityFieldNumber;
const int CharacterMainData::kConstitutionFieldNumber;
const int CharacterMainData::kAttrpointFieldNumber;
const int CharacterMainData::kAttackSpeedFieldNumber;
const int CharacterMainData::kMinPhysicsFieldNumber;
const int CharacterMainData::kMaxPhysicsFieldNumber;
const int CharacterMainData::kMinMagicFieldNumber;
const int CharacterMainData::kMaxMagicFieldNumber;
const int CharacterMainData::kPDefenceFieldNumber;
const int CharacterMainData::kMDefenceFieldNumber;
const int CharacterMainData::kMoneyFieldNumber;
const int CharacterMainData::kBindMoneyFieldNumber;
const int CharacterMainData::kGoldFieldNumber;
const int CharacterMainData::kBindGoldFieldNumber;
const int CharacterMainData::kLuckyRateFieldNumber;
const int CharacterMainData::kAntiLuckyRateFieldNumber;
const int CharacterMainData::kHeavyRateFieldNumber;
const int CharacterMainData::kAntiHeavyRateFieldNumber;
const int CharacterMainData::kHonorFieldNumber;
const int CharacterMainData::kFuncvalueFieldNumber;
const int CharacterMainData::kSeptawardFieldNumber;
const int CharacterMainData::kSeptactiveFieldNumber;
const int CharacterMainData::kFriendvalueFieldNumber;
const int CharacterMainData::kSubprofessionFieldNumber;
const int CharacterMainData::kHorseidFieldNumber;
const int CharacterMainData::kTotalexpFieldNumber;
const int CharacterMainData::kZonelimitFieldNumber;
const int CharacterMainData::kCountryzoneFieldNumber;
const int CharacterMainData::kResourceFieldNumber;
const int CharacterMainData::kPetskillFieldNumber;
const int CharacterMainData::kAutofightFieldNumber;
const int CharacterMainData::kPropertysFieldNumber;
#endif  // !_MSC_VER

CharacterMainData::CharacterMainData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CharacterMainData)
}

void CharacterMainData::InitAsDefaultInstance() {
  mapdata_ = const_cast< ::CharacterMapData*>(&::CharacterMapData::default_instance());
  propertys_ = const_cast< ::PropertyValues*>(&::PropertyValues::default_instance());
}

CharacterMainData::CharacterMainData(const CharacterMainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CharacterMainData)
}

void CharacterMainData::SharedCtor() {
  _cached_size_ = 0;
  mapdata_ = NULL;
  mp_ = 0u;
  maxmp_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  strength_ = 0u;
  dexterity_ = 0u;
  mentality_ = 0u;
  constitution_ = 0u;
  attrpoint_ = 0u;
  attackspeed_ = 0u;
  minphysics_ = 0u;
  maxphysics_ = 0u;
  minmagic_ = 0u;
  maxmagic_ = 0u;
  pdefence_ = 0u;
  mdefence_ = 0u;
  money_ = 0u;
  bindmoney_ = 0u;
  gold_ = 0u;
  bindgold_ = 0u;
  luckyrate_ = 0u;
  antiluckyrate_ = 0u;
  heavyrate_ = 0u;
  antiheavyrate_ = 0u;
  honor_ = 0u;
  funcvalue_ = 0u;
  septaward_ = 0u;
  septactive_ = 0u;
  friendvalue_ = 0u;
  subprofession_ = 0u;
  horseid_ = 0u;
  totalexp_ = GOOGLE_ULONGLONG(0);
  zonelimit_ = false;
  countryzone_ = false;
  petskill_ = 0u;
  autofight_ = false;
  propertys_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMainData::~CharacterMainData() {
  // @@protoc_insertion_point(destructor:CharacterMainData)
  SharedDtor();
}

void CharacterMainData::SharedDtor() {
  if (this != default_instance_) {
    delete mapdata_;
    delete propertys_;
  }
}

void CharacterMainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMainData_descriptor_;
}

const CharacterMainData& CharacterMainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CharacterMainData* CharacterMainData::default_instance_ = NULL;

CharacterMainData* CharacterMainData::New() const {
  return new CharacterMainData;
}

void CharacterMainData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CharacterMainData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mp_, constitution_);
    if (has_mapdata()) {
      if (mapdata_ != NULL) mapdata_->::CharacterMapData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(attrpoint_, mdefence_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(money_, antiheavyrate_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(honor_, horseid_);
  }
  if (_has_bits_[32 / 32] & 59) {
    ZR_(zonelimit_, autofight_);
    petskill_ = 0u;
    if (has_propertys()) {
      if (propertys_ != NULL) propertys_->::PropertyValues::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  resource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CharacterMainData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharacterMapData mapData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 4;
      case 4: {
        if (tag == 32) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxmp;
        break;
      }

      // optional uint32 maxmp = 5;
      case 5: {
        if (tag == 40) {
         parse_maxmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_strength;
        break;
      }

      // optional uint32 strength = 7;
      case 7: {
        if (tag == 56) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dexterity;
        break;
      }

      // optional uint32 dexterity = 8;
      case 8: {
        if (tag == 64) {
         parse_dexterity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dexterity_)));
          set_has_dexterity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mentality;
        break;
      }

      // optional uint32 mentality = 9;
      case 9: {
        if (tag == 72) {
         parse_mentality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mentality_)));
          set_has_mentality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_constitution;
        break;
      }

      // optional uint32 constitution = 10;
      case 10: {
        if (tag == 80) {
         parse_constitution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constitution_)));
          set_has_constitution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_attrpoint;
        break;
      }

      // optional uint32 attrpoint = 12;
      case 12: {
        if (tag == 96) {
         parse_attrpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrpoint_)));
          set_has_attrpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_attackSpeed;
        break;
      }

      // optional uint32 attackSpeed = 13;
      case 13: {
        if (tag == 104) {
         parse_attackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackspeed_)));
          set_has_attackspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_minPhysics;
        break;
      }

      // optional uint32 minPhysics = 14;
      case 14: {
        if (tag == 112) {
         parse_minPhysics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minphysics_)));
          set_has_minphysics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_maxPhysics;
        break;
      }

      // optional uint32 maxPhysics = 15;
      case 15: {
        if (tag == 120) {
         parse_maxPhysics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxphysics_)));
          set_has_maxphysics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_minMagic;
        break;
      }

      // optional uint32 minMagic = 16;
      case 16: {
        if (tag == 128) {
         parse_minMagic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minmagic_)));
          set_has_minmagic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_maxMagic;
        break;
      }

      // optional uint32 maxMagic = 17;
      case 17: {
        if (tag == 136) {
         parse_maxMagic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmagic_)));
          set_has_maxmagic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_pDefence;
        break;
      }

      // optional uint32 pDefence = 18;
      case 18: {
        if (tag == 144) {
         parse_pDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdefence_)));
          set_has_pdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_mDefence;
        break;
      }

      // optional uint32 mDefence = 19;
      case 19: {
        if (tag == 152) {
         parse_mDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdefence_)));
          set_has_mdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_money;
        break;
      }

      // optional uint32 money = 20;
      case 20: {
        if (tag == 160) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_bindMoney;
        break;
      }

      // optional uint32 bindMoney = 21;
      case 21: {
        if (tag == 168) {
         parse_bindMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindmoney_)));
          set_has_bindmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 22;
      case 22: {
        if (tag == 176) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_bindGold;
        break;
      }

      // optional uint32 bindGold = 23;
      case 23: {
        if (tag == 184) {
         parse_bindGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_luckyRate;
        break;
      }

      // optional uint32 luckyRate = 24;
      case 24: {
        if (tag == 192) {
         parse_luckyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckyrate_)));
          set_has_luckyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_antiLuckyRate;
        break;
      }

      // optional uint32 antiLuckyRate = 25;
      case 25: {
        if (tag == 200) {
         parse_antiLuckyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antiluckyrate_)));
          set_has_antiluckyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_heavyRate;
        break;
      }

      // optional uint32 heavyRate = 26;
      case 26: {
        if (tag == 208) {
         parse_heavyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heavyrate_)));
          set_has_heavyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_antiHeavyRate;
        break;
      }

      // optional uint32 antiHeavyRate = 27;
      case 27: {
        if (tag == 216) {
         parse_antiHeavyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antiheavyrate_)));
          set_has_antiheavyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 28;
      case 28: {
        if (tag == 224) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_funcvalue;
        break;
      }

      // optional uint32 funcvalue = 30;
      case 30: {
        if (tag == 240) {
         parse_funcvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funcvalue_)));
          set_has_funcvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_septaward;
        break;
      }

      // optional uint32 septaward = 31;
      case 31: {
        if (tag == 248) {
         parse_septaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septaward_)));
          set_has_septaward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_septactive;
        break;
      }

      // optional uint32 septactive = 32;
      case 32: {
        if (tag == 256) {
         parse_septactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septactive_)));
          set_has_septactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_friendvalue;
        break;
      }

      // optional uint32 friendvalue = 33;
      case 33: {
        if (tag == 264) {
         parse_friendvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendvalue_)));
          set_has_friendvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_subprofession;
        break;
      }

      // optional uint32 subprofession = 34;
      case 34: {
        if (tag == 272) {
         parse_subprofession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprofession_)));
          set_has_subprofession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_horseid;
        break;
      }

      // optional uint32 horseid = 35;
      case 35: {
        if (tag == 280) {
         parse_horseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_totalexp;
        break;
      }

      // optional uint64 totalexp = 36;
      case 36: {
        if (tag == 288) {
         parse_totalexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_zonelimit;
        break;
      }

      // optional bool zonelimit = 37;
      case 37: {
        if (tag == 296) {
         parse_zonelimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zonelimit_)));
          set_has_zonelimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_countryzone;
        break;
      }

      // optional bool countryzone = 38;
      case 38: {
        if (tag == 304) {
         parse_countryzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &countryzone_)));
          set_has_countryzone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_resource;
        break;
      }

      // repeated uint64 resource = 39;
      case 39: {
        if (tag == 312) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 312, input, this->mutable_resource())));
        } else if (tag == 314) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_resource())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_resource;
        if (input->ExpectTag(320)) goto parse_petskill;
        break;
      }

      // optional uint32 petskill = 40;
      case 40: {
        if (tag == 320) {
         parse_petskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petskill_)));
          set_has_petskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_autofight;
        break;
      }

      // optional bool autofight = 41;
      case 41: {
        if (tag == 328) {
         parse_autofight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofight_)));
          set_has_autofight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_propertys;
        break;
      }

      // optional .PropertyValues propertys = 100;
      case 100: {
        if (tag == 802) {
         parse_propertys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propertys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CharacterMainData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CharacterMainData)
  return false;
#undef DO_
}

void CharacterMainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CharacterMainData)
  // optional .CharacterMapData mapData = 1;
  if (has_mapdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapdata(), output);
  }

  // optional uint32 mp = 4;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mp(), output);
  }

  // optional uint32 maxmp = 5;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxmp(), output);
  }

  // optional uint64 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->exp(), output);
  }

  // optional uint32 strength = 7;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->strength(), output);
  }

  // optional uint32 dexterity = 8;
  if (has_dexterity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dexterity(), output);
  }

  // optional uint32 mentality = 9;
  if (has_mentality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mentality(), output);
  }

  // optional uint32 constitution = 10;
  if (has_constitution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->constitution(), output);
  }

  // optional uint32 attrpoint = 12;
  if (has_attrpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->attrpoint(), output);
  }

  // optional uint32 attackSpeed = 13;
  if (has_attackspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->attackspeed(), output);
  }

  // optional uint32 minPhysics = 14;
  if (has_minphysics()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->minphysics(), output);
  }

  // optional uint32 maxPhysics = 15;
  if (has_maxphysics()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->maxphysics(), output);
  }

  // optional uint32 minMagic = 16;
  if (has_minmagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->minmagic(), output);
  }

  // optional uint32 maxMagic = 17;
  if (has_maxmagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->maxmagic(), output);
  }

  // optional uint32 pDefence = 18;
  if (has_pdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->pdefence(), output);
  }

  // optional uint32 mDefence = 19;
  if (has_mdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->mdefence(), output);
  }

  // optional uint32 money = 20;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->money(), output);
  }

  // optional uint32 bindMoney = 21;
  if (has_bindmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->bindmoney(), output);
  }

  // optional uint32 gold = 22;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->gold(), output);
  }

  // optional uint32 bindGold = 23;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->bindgold(), output);
  }

  // optional uint32 luckyRate = 24;
  if (has_luckyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->luckyrate(), output);
  }

  // optional uint32 antiLuckyRate = 25;
  if (has_antiluckyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->antiluckyrate(), output);
  }

  // optional uint32 heavyRate = 26;
  if (has_heavyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->heavyrate(), output);
  }

  // optional uint32 antiHeavyRate = 27;
  if (has_antiheavyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->antiheavyrate(), output);
  }

  // optional uint32 honor = 28;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->honor(), output);
  }

  // optional uint32 funcvalue = 30;
  if (has_funcvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->funcvalue(), output);
  }

  // optional uint32 septaward = 31;
  if (has_septaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->septaward(), output);
  }

  // optional uint32 septactive = 32;
  if (has_septactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->septactive(), output);
  }

  // optional uint32 friendvalue = 33;
  if (has_friendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->friendvalue(), output);
  }

  // optional uint32 subprofession = 34;
  if (has_subprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->subprofession(), output);
  }

  // optional uint32 horseid = 35;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->horseid(), output);
  }

  // optional uint64 totalexp = 36;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->totalexp(), output);
  }

  // optional bool zonelimit = 37;
  if (has_zonelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->zonelimit(), output);
  }

  // optional bool countryzone = 38;
  if (has_countryzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->countryzone(), output);
  }

  // repeated uint64 resource = 39;
  for (int i = 0; i < this->resource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      39, this->resource(i), output);
  }

  // optional uint32 petskill = 40;
  if (has_petskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->petskill(), output);
  }

  // optional bool autofight = 41;
  if (has_autofight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->autofight(), output);
  }

  // optional .PropertyValues propertys = 100;
  if (has_propertys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->propertys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CharacterMainData)
}

::google::protobuf::uint8* CharacterMainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacterMainData)
  // optional .CharacterMapData mapData = 1;
  if (has_mapdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapdata(), target);
  }

  // optional uint32 mp = 4;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mp(), target);
  }

  // optional uint32 maxmp = 5;
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxmp(), target);
  }

  // optional uint64 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->exp(), target);
  }

  // optional uint32 strength = 7;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->strength(), target);
  }

  // optional uint32 dexterity = 8;
  if (has_dexterity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dexterity(), target);
  }

  // optional uint32 mentality = 9;
  if (has_mentality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mentality(), target);
  }

  // optional uint32 constitution = 10;
  if (has_constitution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->constitution(), target);
  }

  // optional uint32 attrpoint = 12;
  if (has_attrpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->attrpoint(), target);
  }

  // optional uint32 attackSpeed = 13;
  if (has_attackspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->attackspeed(), target);
  }

  // optional uint32 minPhysics = 14;
  if (has_minphysics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->minphysics(), target);
  }

  // optional uint32 maxPhysics = 15;
  if (has_maxphysics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->maxphysics(), target);
  }

  // optional uint32 minMagic = 16;
  if (has_minmagic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->minmagic(), target);
  }

  // optional uint32 maxMagic = 17;
  if (has_maxmagic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->maxmagic(), target);
  }

  // optional uint32 pDefence = 18;
  if (has_pdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->pdefence(), target);
  }

  // optional uint32 mDefence = 19;
  if (has_mdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->mdefence(), target);
  }

  // optional uint32 money = 20;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->money(), target);
  }

  // optional uint32 bindMoney = 21;
  if (has_bindmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->bindmoney(), target);
  }

  // optional uint32 gold = 22;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->gold(), target);
  }

  // optional uint32 bindGold = 23;
  if (has_bindgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->bindgold(), target);
  }

  // optional uint32 luckyRate = 24;
  if (has_luckyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->luckyrate(), target);
  }

  // optional uint32 antiLuckyRate = 25;
  if (has_antiluckyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->antiluckyrate(), target);
  }

  // optional uint32 heavyRate = 26;
  if (has_heavyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->heavyrate(), target);
  }

  // optional uint32 antiHeavyRate = 27;
  if (has_antiheavyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->antiheavyrate(), target);
  }

  // optional uint32 honor = 28;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->honor(), target);
  }

  // optional uint32 funcvalue = 30;
  if (has_funcvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->funcvalue(), target);
  }

  // optional uint32 septaward = 31;
  if (has_septaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->septaward(), target);
  }

  // optional uint32 septactive = 32;
  if (has_septactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->septactive(), target);
  }

  // optional uint32 friendvalue = 33;
  if (has_friendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->friendvalue(), target);
  }

  // optional uint32 subprofession = 34;
  if (has_subprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->subprofession(), target);
  }

  // optional uint32 horseid = 35;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->horseid(), target);
  }

  // optional uint64 totalexp = 36;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->totalexp(), target);
  }

  // optional bool zonelimit = 37;
  if (has_zonelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->zonelimit(), target);
  }

  // optional bool countryzone = 38;
  if (has_countryzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->countryzone(), target);
  }

  // repeated uint64 resource = 39;
  for (int i = 0; i < this->resource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(39, this->resource(i), target);
  }

  // optional uint32 petskill = 40;
  if (has_petskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->petskill(), target);
  }

  // optional bool autofight = 41;
  if (has_autofight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->autofight(), target);
  }

  // optional .PropertyValues propertys = 100;
  if (has_propertys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->propertys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacterMainData)
  return target;
}

int CharacterMainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharacterMapData mapData = 1;
    if (has_mapdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapdata());
    }

    // optional uint32 mp = 4;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 maxmp = 5;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmp());
    }

    // optional uint64 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint32 strength = 7;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 dexterity = 8;
    if (has_dexterity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dexterity());
    }

    // optional uint32 mentality = 9;
    if (has_mentality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mentality());
    }

    // optional uint32 constitution = 10;
    if (has_constitution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constitution());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 attrpoint = 12;
    if (has_attrpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrpoint());
    }

    // optional uint32 attackSpeed = 13;
    if (has_attackspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackspeed());
    }

    // optional uint32 minPhysics = 14;
    if (has_minphysics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minphysics());
    }

    // optional uint32 maxPhysics = 15;
    if (has_maxphysics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxphysics());
    }

    // optional uint32 minMagic = 16;
    if (has_minmagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minmagic());
    }

    // optional uint32 maxMagic = 17;
    if (has_maxmagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmagic());
    }

    // optional uint32 pDefence = 18;
    if (has_pdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdefence());
    }

    // optional uint32 mDefence = 19;
    if (has_mdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdefence());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 money = 20;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 bindMoney = 21;
    if (has_bindmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindmoney());
    }

    // optional uint32 gold = 22;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 bindGold = 23;
    if (has_bindgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindgold());
    }

    // optional uint32 luckyRate = 24;
    if (has_luckyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckyrate());
    }

    // optional uint32 antiLuckyRate = 25;
    if (has_antiluckyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antiluckyrate());
    }

    // optional uint32 heavyRate = 26;
    if (has_heavyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heavyrate());
    }

    // optional uint32 antiHeavyRate = 27;
    if (has_antiheavyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antiheavyrate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 honor = 28;
    if (has_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

    // optional uint32 funcvalue = 30;
    if (has_funcvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funcvalue());
    }

    // optional uint32 septaward = 31;
    if (has_septaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septaward());
    }

    // optional uint32 septactive = 32;
    if (has_septactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septactive());
    }

    // optional uint32 friendvalue = 33;
    if (has_friendvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendvalue());
    }

    // optional uint32 subprofession = 34;
    if (has_subprofession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subprofession());
    }

    // optional uint32 horseid = 35;
    if (has_horseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horseid());
    }

    // optional uint64 totalexp = 36;
    if (has_totalexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalexp());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool zonelimit = 37;
    if (has_zonelimit()) {
      total_size += 2 + 1;
    }

    // optional bool countryzone = 38;
    if (has_countryzone()) {
      total_size += 2 + 1;
    }

    // optional uint32 petskill = 40;
    if (has_petskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petskill());
    }

    // optional bool autofight = 41;
    if (has_autofight()) {
      total_size += 2 + 1;
    }

    // optional .PropertyValues propertys = 100;
    if (has_propertys()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propertys());
    }

  }
  // repeated uint64 resource = 39;
  {
    int data_size = 0;
    for (int i = 0; i < this->resource_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->resource(i));
    }
    total_size += 2 * this->resource_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMainData::MergeFrom(const CharacterMainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_.MergeFrom(from.resource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapdata()) {
      mutable_mapdata()->::CharacterMapData::MergeFrom(from.mapdata());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_dexterity()) {
      set_dexterity(from.dexterity());
    }
    if (from.has_mentality()) {
      set_mentality(from.mentality());
    }
    if (from.has_constitution()) {
      set_constitution(from.constitution());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attrpoint()) {
      set_attrpoint(from.attrpoint());
    }
    if (from.has_attackspeed()) {
      set_attackspeed(from.attackspeed());
    }
    if (from.has_minphysics()) {
      set_minphysics(from.minphysics());
    }
    if (from.has_maxphysics()) {
      set_maxphysics(from.maxphysics());
    }
    if (from.has_minmagic()) {
      set_minmagic(from.minmagic());
    }
    if (from.has_maxmagic()) {
      set_maxmagic(from.maxmagic());
    }
    if (from.has_pdefence()) {
      set_pdefence(from.pdefence());
    }
    if (from.has_mdefence()) {
      set_mdefence(from.mdefence());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_bindmoney()) {
      set_bindmoney(from.bindmoney());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_luckyrate()) {
      set_luckyrate(from.luckyrate());
    }
    if (from.has_antiluckyrate()) {
      set_antiluckyrate(from.antiluckyrate());
    }
    if (from.has_heavyrate()) {
      set_heavyrate(from.heavyrate());
    }
    if (from.has_antiheavyrate()) {
      set_antiheavyrate(from.antiheavyrate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_funcvalue()) {
      set_funcvalue(from.funcvalue());
    }
    if (from.has_septaward()) {
      set_septaward(from.septaward());
    }
    if (from.has_septactive()) {
      set_septactive(from.septactive());
    }
    if (from.has_friendvalue()) {
      set_friendvalue(from.friendvalue());
    }
    if (from.has_subprofession()) {
      set_subprofession(from.subprofession());
    }
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_zonelimit()) {
      set_zonelimit(from.zonelimit());
    }
    if (from.has_countryzone()) {
      set_countryzone(from.countryzone());
    }
    if (from.has_petskill()) {
      set_petskill(from.petskill());
    }
    if (from.has_autofight()) {
      set_autofight(from.autofight());
    }
    if (from.has_propertys()) {
      mutable_propertys()->::PropertyValues::MergeFrom(from.propertys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMainData::CopyFrom(const CharacterMainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMainData::IsInitialized() const {

  return true;
}

void CharacterMainData::Swap(CharacterMainData* other) {
  if (other != this) {
    std::swap(mapdata_, other->mapdata_);
    std::swap(mp_, other->mp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(exp_, other->exp_);
    std::swap(strength_, other->strength_);
    std::swap(dexterity_, other->dexterity_);
    std::swap(mentality_, other->mentality_);
    std::swap(constitution_, other->constitution_);
    std::swap(attrpoint_, other->attrpoint_);
    std::swap(attackspeed_, other->attackspeed_);
    std::swap(minphysics_, other->minphysics_);
    std::swap(maxphysics_, other->maxphysics_);
    std::swap(minmagic_, other->minmagic_);
    std::swap(maxmagic_, other->maxmagic_);
    std::swap(pdefence_, other->pdefence_);
    std::swap(mdefence_, other->mdefence_);
    std::swap(money_, other->money_);
    std::swap(bindmoney_, other->bindmoney_);
    std::swap(gold_, other->gold_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(luckyrate_, other->luckyrate_);
    std::swap(antiluckyrate_, other->antiluckyrate_);
    std::swap(heavyrate_, other->heavyrate_);
    std::swap(antiheavyrate_, other->antiheavyrate_);
    std::swap(honor_, other->honor_);
    std::swap(funcvalue_, other->funcvalue_);
    std::swap(septaward_, other->septaward_);
    std::swap(septactive_, other->septactive_);
    std::swap(friendvalue_, other->friendvalue_);
    std::swap(subprofession_, other->subprofession_);
    std::swap(horseid_, other->horseid_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(zonelimit_, other->zonelimit_);
    std::swap(countryzone_, other->countryzone_);
    resource_.Swap(&other->resource_);
    std::swap(petskill_, other->petskill_);
    std::swap(autofight_, other->autofight_);
    std::swap(propertys_, other->propertys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMainData_descriptor_;
  metadata.reflection = CharacterMainData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcMapData::kIdFieldNumber;
const int NpcMapData::kTmpidFieldNumber;
const int NpcMapData::kHpFieldNumber;
const int NpcMapData::kXFieldNumber;
const int NpcMapData::kYFieldNumber;
const int NpcMapData::kSpeedFieldNumber;
const int NpcMapData::kDirFieldNumber;
const int NpcMapData::kLevelFieldNumber;
const int NpcMapData::kVisitFieldNumber;
const int NpcMapData::kCountryIdFieldNumber;
const int NpcMapData::kTeamidFieldNumber;
const int NpcMapData::kSeptidFieldNumber;
const int NpcMapData::kUnionidFieldNumber;
const int NpcMapData::kMasterTypeFieldNumber;
const int NpcMapData::kMasteridFieldNumber;
const int NpcMapData::kMasternameFieldNumber;
const int NpcMapData::kNameFieldNumber;
const int NpcMapData::kSkillcountFieldNumber;
const int NpcMapData::kSignFieldNumber;
const int NpcMapData::kNinestateFieldNumber;
const int NpcMapData::kAttackedTypeFieldNumber;
const int NpcMapData::kMaxhpFieldNumber;
const int NpcMapData::kPkcampFieldNumber;
const int NpcMapData::kDesnameFieldNumber;
const int NpcMapData::kIntoFieldNumber;
const int NpcMapData::kKillerFieldNumber;
#endif  // !_MSC_VER

NpcMapData::NpcMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NpcMapData)
}

void NpcMapData::InitAsDefaultInstance() {
}

NpcMapData::NpcMapData(const NpcMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NpcMapData)
}

void NpcMapData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  tmpid_ = 0u;
  hp_ = 0u;
  x_ = 0u;
  y_ = 0u;
  speed_ = 0u;
  dir_ = 0u;
  level_ = 0u;
  visit_ = 0u;
  countryid_ = 0u;
  teamid_ = 0u;
  septid_ = 0u;
  unionid_ = 0u;
  master_type_ = 0u;
  masterid_ = 0u;
  mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillcount_ = 0u;
  attacked_type_ = 0u;
  maxhp_ = 0u;
  pkcamp_ = 0u;
  desname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  into_ = false;
  killer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcMapData::~NpcMapData() {
  // @@protoc_insertion_point(destructor:NpcMapData)
  SharedDtor();
}

void NpcMapData::SharedDtor() {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desname_;
  }
  if (this != default_instance_) {
  }
}

void NpcMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcMapData_descriptor_;
}

const NpcMapData& NpcMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NpcMapData* NpcMapData::default_instance_ = NULL;

NpcMapData* NpcMapData::New() const {
  return new NpcMapData;
}

void NpcMapData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcMapData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, level_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(visit_, master_type_);
    masterid_ = 0u;
    if (has_mastername()) {
      if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mastername_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 15925248) {
    ZR_(attacked_type_, maxhp_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    skillcount_ = 0u;
    pkcamp_ = 0u;
    if (has_desname()) {
      if (desname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desname_->clear();
      }
    }
  }
  ZR_(into_, killer_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sign_.Clear();
  ninestate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NpcMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tmpid;
        break;
      }

      // optional uint32 tmpid = 2;
      case 2: {
        if (tag == 16) {
         parse_tmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }

      // optional uint32 x = 4;
      case 4: {
        if (tag == 32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }

      // optional uint32 y = 5;
      case 5: {
        if (tag == 40) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional uint32 speed = 6;
      case 6: {
        if (tag == 48) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 7;
      case 7: {
        if (tag == 56) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_visit;
        break;
      }

      // optional uint32 visit = 9;
      case 9: {
        if (tag == 72) {
         parse_visit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visit_)));
          set_has_visit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_countryId;
        break;
      }

      // optional uint32 countryId = 10;
      case 10: {
        if (tag == 80) {
         parse_countryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 11;
      case 11: {
        if (tag == 88) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_septid;
        break;
      }

      // optional uint32 septid = 12;
      case 12: {
        if (tag == 96) {
         parse_septid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septid_)));
          set_has_septid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_unionid;
        break;
      }

      // optional uint32 unionid = 13;
      case 13: {
        if (tag == 104) {
         parse_unionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unionid_)));
          set_has_unionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_master_type;
        break;
      }

      // optional uint32 master_type = 14;
      case 14: {
        if (tag == 112) {
         parse_master_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_type_)));
          set_has_master_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_masterid;
        break;
      }

      // optional uint32 masterid = 15;
      case 15: {
        if (tag == 120) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_mastername;
        break;
      }

      // optional string mastername = 16;
      case 16: {
        if (tag == 130) {
         parse_mastername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mastername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mastername().data(), this->mastername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mastername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_name;
        break;
      }

      // optional string name = 17;
      case 17: {
        if (tag == 138) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_skillcount;
        break;
      }

      // optional uint32 skillcount = 18;
      case 18: {
        if (tag == 144) {
         parse_skillcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillcount_)));
          set_has_skillcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_sign;
        break;
      }

      // repeated uint32 sign = 19;
      case 19: {
        if (tag == 152) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_sign())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sign())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_sign;
        if (input->ExpectTag(162)) goto parse_ninestate;
        break;
      }

      // repeated .StateData ninestate = 20;
      case 20: {
        if (tag == 162) {
         parse_ninestate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ninestate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ninestate;
        if (input->ExpectTag(168)) goto parse_attacked_type;
        break;
      }

      // optional uint32 attacked_type = 21;
      case 21: {
        if (tag == 168) {
         parse_attacked_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacked_type_)));
          set_has_attacked_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_maxhp;
        break;
      }

      // optional uint32 maxhp = 22;
      case 22: {
        if (tag == 176) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_pkcamp;
        break;
      }

      // optional uint32 pkcamp = 23;
      case 23: {
        if (tag == 184) {
         parse_pkcamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkcamp_)));
          set_has_pkcamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_desname;
        break;
      }

      // optional string desname = 24;
      case 24: {
        if (tag == 194) {
         parse_desname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desname().data(), this->desname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_into;
        break;
      }

      // optional bool into = 25 [default = false];
      case 25: {
        if (tag == 200) {
         parse_into:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &into_)));
          set_has_into();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_killer;
        break;
      }

      // optional uint32 killer = 26;
      case 26: {
        if (tag == 208) {
         parse_killer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_)));
          set_has_killer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NpcMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NpcMapData)
  return false;
#undef DO_
}

void NpcMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NpcMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 tmpid = 2;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tmpid(), output);
  }

  // optional uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  // optional uint32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->x(), output);
  }

  // optional uint32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->y(), output);
  }

  // optional uint32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->speed(), output);
  }

  // optional uint32 dir = 7;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dir(), output);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional uint32 visit = 9;
  if (has_visit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->visit(), output);
  }

  // optional uint32 countryId = 10;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->countryid(), output);
  }

  // optional uint32 teamid = 11;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->teamid(), output);
  }

  // optional uint32 septid = 12;
  if (has_septid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->septid(), output);
  }

  // optional uint32 unionid = 13;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->unionid(), output);
  }

  // optional uint32 master_type = 14;
  if (has_master_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->master_type(), output);
  }

  // optional uint32 masterid = 15;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->masterid(), output);
  }

  // optional string mastername = 16;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->mastername(), output);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->name(), output);
  }

  // optional uint32 skillcount = 18;
  if (has_skillcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->skillcount(), output);
  }

  // repeated uint32 sign = 19;
  for (int i = 0; i < this->sign_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->sign(i), output);
  }

  // repeated .StateData ninestate = 20;
  for (int i = 0; i < this->ninestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->ninestate(i), output);
  }

  // optional uint32 attacked_type = 21;
  if (has_attacked_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->attacked_type(), output);
  }

  // optional uint32 maxhp = 22;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->maxhp(), output);
  }

  // optional uint32 pkcamp = 23;
  if (has_pkcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->pkcamp(), output);
  }

  // optional string desname = 24;
  if (has_desname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desname().data(), this->desname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->desname(), output);
  }

  // optional bool into = 25 [default = false];
  if (has_into()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->into(), output);
  }

  // optional uint32 killer = 26;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->killer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NpcMapData)
}

::google::protobuf::uint8* NpcMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NpcMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 tmpid = 2;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tmpid(), target);
  }

  // optional uint32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  // optional uint32 x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->x(), target);
  }

  // optional uint32 y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->y(), target);
  }

  // optional uint32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->speed(), target);
  }

  // optional uint32 dir = 7;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dir(), target);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // optional uint32 visit = 9;
  if (has_visit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->visit(), target);
  }

  // optional uint32 countryId = 10;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->countryid(), target);
  }

  // optional uint32 teamid = 11;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->teamid(), target);
  }

  // optional uint32 septid = 12;
  if (has_septid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->septid(), target);
  }

  // optional uint32 unionid = 13;
  if (has_unionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->unionid(), target);
  }

  // optional uint32 master_type = 14;
  if (has_master_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->master_type(), target);
  }

  // optional uint32 masterid = 15;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->masterid(), target);
  }

  // optional string mastername = 16;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->mastername(), target);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->name(), target);
  }

  // optional uint32 skillcount = 18;
  if (has_skillcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->skillcount(), target);
  }

  // repeated uint32 sign = 19;
  for (int i = 0; i < this->sign_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->sign(i), target);
  }

  // repeated .StateData ninestate = 20;
  for (int i = 0; i < this->ninestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->ninestate(i), target);
  }

  // optional uint32 attacked_type = 21;
  if (has_attacked_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->attacked_type(), target);
  }

  // optional uint32 maxhp = 22;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->maxhp(), target);
  }

  // optional uint32 pkcamp = 23;
  if (has_pkcamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->pkcamp(), target);
  }

  // optional string desname = 24;
  if (has_desname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desname().data(), this->desname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->desname(), target);
  }

  // optional bool into = 25 [default = false];
  if (has_into()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->into(), target);
  }

  // optional uint32 killer = 26;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->killer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NpcMapData)
  return target;
}

int NpcMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 tmpid = 2;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmpid());
    }

    // optional uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 dir = 7;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

    // optional uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 visit = 9;
    if (has_visit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visit());
    }

    // optional uint32 countryId = 10;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 teamid = 11;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 septid = 12;
    if (has_septid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septid());
    }

    // optional uint32 unionid = 13;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unionid());
    }

    // optional uint32 master_type = 14;
    if (has_master_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master_type());
    }

    // optional uint32 masterid = 15;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterid());
    }

    // optional string mastername = 16;
    if (has_mastername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mastername());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string name = 17;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 skillcount = 18;
    if (has_skillcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillcount());
    }

    // optional uint32 attacked_type = 21;
    if (has_attacked_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacked_type());
    }

    // optional uint32 maxhp = 22;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 pkcamp = 23;
    if (has_pkcamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkcamp());
    }

    // optional string desname = 24;
    if (has_desname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desname());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool into = 25 [default = false];
    if (has_into()) {
      total_size += 2 + 1;
    }

    // optional uint32 killer = 26;
    if (has_killer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer());
    }

  }
  // repeated uint32 sign = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->sign_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sign(i));
    }
    total_size += 2 * this->sign_size() + data_size;
  }

  // repeated .StateData ninestate = 20;
  total_size += 2 * this->ninestate_size();
  for (int i = 0; i < this->ninestate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ninestate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcMapData::MergeFrom(const NpcMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sign_.MergeFrom(from.sign_);
  ninestate_.MergeFrom(from.ninestate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_visit()) {
      set_visit(from.visit());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_septid()) {
      set_septid(from.septid());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
    if (from.has_master_type()) {
      set_master_type(from.master_type());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_mastername()) {
      set_mastername(from.mastername());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_skillcount()) {
      set_skillcount(from.skillcount());
    }
    if (from.has_attacked_type()) {
      set_attacked_type(from.attacked_type());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_pkcamp()) {
      set_pkcamp(from.pkcamp());
    }
    if (from.has_desname()) {
      set_desname(from.desname());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_into()) {
      set_into(from.into());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcMapData::CopyFrom(const NpcMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcMapData::IsInitialized() const {

  return true;
}

void NpcMapData::Swap(NpcMapData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tmpid_, other->tmpid_);
    std::swap(hp_, other->hp_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(speed_, other->speed_);
    std::swap(dir_, other->dir_);
    std::swap(level_, other->level_);
    std::swap(visit_, other->visit_);
    std::swap(countryid_, other->countryid_);
    std::swap(teamid_, other->teamid_);
    std::swap(septid_, other->septid_);
    std::swap(unionid_, other->unionid_);
    std::swap(master_type_, other->master_type_);
    std::swap(masterid_, other->masterid_);
    std::swap(mastername_, other->mastername_);
    std::swap(name_, other->name_);
    std::swap(skillcount_, other->skillcount_);
    sign_.Swap(&other->sign_);
    ninestate_.Swap(&other->ninestate_);
    std::swap(attacked_type_, other->attacked_type_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(pkcamp_, other->pkcamp_);
    std::swap(desname_, other->desname_);
    std::swap(into_, other->into_);
    std::swap(killer_, other->killer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcMapData_descriptor_;
  metadata.reflection = NpcMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcDeathMapData::kIdFieldNumber;
const int NpcDeathMapData::kTmpidFieldNumber;
const int NpcDeathMapData::kXFieldNumber;
const int NpcDeathMapData::kYFieldNumber;
const int NpcDeathMapData::kDirFieldNumber;
const int NpcDeathMapData::kDisappearTimeFieldNumber;
const int NpcDeathMapData::kNameFieldNumber;
const int NpcDeathMapData::kKillerFieldNumber;
#endif  // !_MSC_VER

NpcDeathMapData::NpcDeathMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NpcDeathMapData)
}

void NpcDeathMapData::InitAsDefaultInstance() {
}

NpcDeathMapData::NpcDeathMapData(const NpcDeathMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NpcDeathMapData)
}

void NpcDeathMapData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  tmpid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  dir_ = 0u;
  disappeartime_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  killer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcDeathMapData::~NpcDeathMapData() {
  // @@protoc_insertion_point(destructor:NpcDeathMapData)
  SharedDtor();
}

void NpcDeathMapData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NpcDeathMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcDeathMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcDeathMapData_descriptor_;
}

const NpcDeathMapData& NpcDeathMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NpcDeathMapData* NpcDeathMapData::default_instance_ = NULL;

NpcDeathMapData* NpcDeathMapData::New() const {
  return new NpcDeathMapData;
}

void NpcDeathMapData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcDeathMapData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, disappeartime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    killer_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcDeathMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NpcDeathMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tmpid;
        break;
      }

      // optional uint32 tmpid = 2;
      case 2: {
        if (tag == 16) {
         parse_tmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 5;
      case 5: {
        if (tag == 40) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_disappearTime;
        break;
      }

      // optional uint32 disappearTime = 6;
      case 6: {
        if (tag == 48) {
         parse_disappearTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disappeartime_)));
          set_has_disappeartime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_killer;
        break;
      }

      // optional uint32 killer = 8;
      case 8: {
        if (tag == 64) {
         parse_killer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_)));
          set_has_killer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NpcDeathMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NpcDeathMapData)
  return false;
#undef DO_
}

void NpcDeathMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NpcDeathMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 tmpid = 2;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tmpid(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional uint32 dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dir(), output);
  }

  // optional uint32 disappearTime = 6;
  if (has_disappeartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->disappeartime(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional uint32 killer = 8;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->killer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NpcDeathMapData)
}

::google::protobuf::uint8* NpcDeathMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NpcDeathMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 tmpid = 2;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tmpid(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional uint32 dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dir(), target);
  }

  // optional uint32 disappearTime = 6;
  if (has_disappeartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->disappeartime(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional uint32 killer = 8;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->killer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NpcDeathMapData)
  return target;
}

int NpcDeathMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 tmpid = 2;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmpid());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

    // optional uint32 disappearTime = 6;
    if (has_disappeartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disappeartime());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 killer = 8;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcDeathMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcDeathMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcDeathMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcDeathMapData::MergeFrom(const NpcDeathMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_disappeartime()) {
      set_disappeartime(from.disappeartime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcDeathMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcDeathMapData::CopyFrom(const NpcDeathMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcDeathMapData::IsInitialized() const {

  return true;
}

void NpcDeathMapData::Swap(NpcDeathMapData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tmpid_, other->tmpid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(dir_, other->dir_);
    std::swap(disappeartime_, other->disappeartime_);
    std::swap(name_, other->name_);
    std::swap(killer_, other->killer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcDeathMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcDeathMapData_descriptor_;
  metadata.reflection = NpcDeathMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipChangeMaterial::kThisidFieldNumber;
const int EquipChangeMaterial::kNumFieldNumber;
#endif  // !_MSC_VER

EquipChangeMaterial::EquipChangeMaterial()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipChangeMaterial)
}

void EquipChangeMaterial::InitAsDefaultInstance() {
}

EquipChangeMaterial::EquipChangeMaterial(const EquipChangeMaterial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipChangeMaterial)
}

void EquipChangeMaterial::SharedCtor() {
  _cached_size_ = 0;
  thisid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipChangeMaterial::~EquipChangeMaterial() {
  // @@protoc_insertion_point(destructor:EquipChangeMaterial)
  SharedDtor();
}

void EquipChangeMaterial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipChangeMaterial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipChangeMaterial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipChangeMaterial_descriptor_;
}

const EquipChangeMaterial& EquipChangeMaterial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

EquipChangeMaterial* EquipChangeMaterial::default_instance_ = NULL;

EquipChangeMaterial* EquipChangeMaterial::New() const {
  return new EquipChangeMaterial;
}

void EquipChangeMaterial::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipChangeMaterial*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(thisid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipChangeMaterial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipChangeMaterial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 thisid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thisid_)));
          set_has_thisid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipChangeMaterial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipChangeMaterial)
  return false;
#undef DO_
}

void EquipChangeMaterial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipChangeMaterial)
  // optional uint32 thisid = 1;
  if (has_thisid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thisid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipChangeMaterial)
}

::google::protobuf::uint8* EquipChangeMaterial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipChangeMaterial)
  // optional uint32 thisid = 1;
  if (has_thisid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thisid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipChangeMaterial)
  return target;
}

int EquipChangeMaterial::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 thisid = 1;
    if (has_thisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thisid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipChangeMaterial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipChangeMaterial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipChangeMaterial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipChangeMaterial::MergeFrom(const EquipChangeMaterial& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thisid()) {
      set_thisid(from.thisid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipChangeMaterial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipChangeMaterial::CopyFrom(const EquipChangeMaterial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipChangeMaterial::IsInitialized() const {

  return true;
}

void EquipChangeMaterial::Swap(EquipChangeMaterial* other) {
  if (other != this) {
    std::swap(thisid_, other->thisid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipChangeMaterial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipChangeMaterial_descriptor_;
  metadata.reflection = EquipChangeMaterial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMaxCount_Count::kTypeFieldNumber;
const int AddMaxCount_Count::kIdFieldNumber;
const int AddMaxCount_Count::kCycleFieldNumber;
const int AddMaxCount_Count::kAddcountFieldNumber;
#endif  // !_MSC_VER

AddMaxCount_Count::AddMaxCount_Count()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddMaxCount.Count)
}

void AddMaxCount_Count::InitAsDefaultInstance() {
}

AddMaxCount_Count::AddMaxCount_Count(const AddMaxCount_Count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AddMaxCount.Count)
}

void AddMaxCount_Count::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0u;
  cycle_ = 0;
  addcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMaxCount_Count::~AddMaxCount_Count() {
  // @@protoc_insertion_point(destructor:AddMaxCount.Count)
  SharedDtor();
}

void AddMaxCount_Count::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMaxCount_Count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMaxCount_Count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMaxCount_Count_descriptor_;
}

const AddMaxCount_Count& AddMaxCount_Count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

AddMaxCount_Count* AddMaxCount_Count::default_instance_ = NULL;

AddMaxCount_Count* AddMaxCount_Count::New() const {
  return new AddMaxCount_Count;
}

void AddMaxCount_Count::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddMaxCount_Count*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, addcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMaxCount_Count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddMaxCount.Count)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CounterType type = 1 [default = COUNTERT_NONE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CounterType_IsValid(value)) {
            set_type(static_cast< ::CounterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cycle;
        break;
      }

      // optional .TimeCycle cycle = 3 [default = TimeCycle_None];
      case 3: {
        if (tag == 24) {
         parse_cycle:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TimeCycle_IsValid(value)) {
            set_cycle(static_cast< ::TimeCycle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_addcount;
        break;
      }

      // optional uint32 addcount = 4;
      case 4: {
        if (tag == 32) {
         parse_addcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addcount_)));
          set_has_addcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddMaxCount.Count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddMaxCount.Count)
  return false;
#undef DO_
}

void AddMaxCount_Count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddMaxCount.Count)
  // optional .CounterType type = 1 [default = COUNTERT_NONE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .TimeCycle cycle = 3 [default = TimeCycle_None];
  if (has_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cycle(), output);
  }

  // optional uint32 addcount = 4;
  if (has_addcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->addcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AddMaxCount.Count)
}

::google::protobuf::uint8* AddMaxCount_Count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddMaxCount.Count)
  // optional .CounterType type = 1 [default = COUNTERT_NONE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .TimeCycle cycle = 3 [default = TimeCycle_None];
  if (has_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cycle(), target);
  }

  // optional uint32 addcount = 4;
  if (has_addcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->addcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddMaxCount.Count)
  return target;
}

int AddMaxCount_Count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CounterType type = 1 [default = COUNTERT_NONE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .TimeCycle cycle = 3 [default = TimeCycle_None];
    if (has_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cycle());
    }

    // optional uint32 addcount = 4;
    if (has_addcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMaxCount_Count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMaxCount_Count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMaxCount_Count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMaxCount_Count::MergeFrom(const AddMaxCount_Count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cycle()) {
      set_cycle(from.cycle());
    }
    if (from.has_addcount()) {
      set_addcount(from.addcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMaxCount_Count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMaxCount_Count::CopyFrom(const AddMaxCount_Count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMaxCount_Count::IsInitialized() const {

  return true;
}

void AddMaxCount_Count::Swap(AddMaxCount_Count* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(cycle_, other->cycle_);
    std::swap(addcount_, other->addcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMaxCount_Count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMaxCount_Count_descriptor_;
  metadata.reflection = AddMaxCount_Count_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AddMaxCount::kCountFieldNumber;
#endif  // !_MSC_VER

AddMaxCount::AddMaxCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddMaxCount)
}

void AddMaxCount::InitAsDefaultInstance() {
}

AddMaxCount::AddMaxCount(const AddMaxCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AddMaxCount)
}

void AddMaxCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMaxCount::~AddMaxCount() {
  // @@protoc_insertion_point(destructor:AddMaxCount)
  SharedDtor();
}

void AddMaxCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMaxCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMaxCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMaxCount_descriptor_;
}

const AddMaxCount& AddMaxCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

AddMaxCount* AddMaxCount::default_instance_ = NULL;

AddMaxCount* AddMaxCount::New() const {
  return new AddMaxCount;
}

void AddMaxCount::Clear() {
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMaxCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddMaxCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AddMaxCount.Count count = 1;
      case 1: {
        if (tag == 10) {
         parse_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddMaxCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddMaxCount)
  return false;
#undef DO_
}

void AddMaxCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddMaxCount)
  // repeated .AddMaxCount.Count count = 1;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AddMaxCount)
}

::google::protobuf::uint8* AddMaxCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddMaxCount)
  // repeated .AddMaxCount.Count count = 1;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddMaxCount)
  return target;
}

int AddMaxCount::ByteSize() const {
  int total_size = 0;

  // repeated .AddMaxCount.Count count = 1;
  total_size += 1 * this->count_size();
  for (int i = 0; i < this->count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMaxCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMaxCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMaxCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMaxCount::MergeFrom(const AddMaxCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  count_.MergeFrom(from.count_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMaxCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMaxCount::CopyFrom(const AddMaxCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMaxCount::IsInitialized() const {

  return true;
}

void AddMaxCount::Swap(AddMaxCount* other) {
  if (other != this) {
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMaxCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMaxCount_descriptor_;
  metadata.reflection = AddMaxCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossReliveInfo::kNameFieldNumber;
const int BossReliveInfo::kHppercentFieldNumber;
const int BossReliveInfo::kTimeFieldNumber;
const int BossReliveInfo::kMapFieldNumber;
const int BossReliveInfo::kLevelFieldNumber;
const int BossReliveInfo::kCountryFieldNumber;
const int BossReliveInfo::kDescFieldNumber;
#endif  // !_MSC_VER

BossReliveInfo::BossReliveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BossReliveInfo)
}

void BossReliveInfo::InitAsDefaultInstance() {
}

BossReliveInfo::BossReliveInfo(const BossReliveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BossReliveInfo)
}

void BossReliveInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hppercent_ = 0u;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  country_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossReliveInfo::~BossReliveInfo() {
  // @@protoc_insertion_point(destructor:BossReliveInfo)
  SharedDtor();
}

void BossReliveInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void BossReliveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossReliveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossReliveInfo_descriptor_;
}

const BossReliveInfo& BossReliveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BossReliveInfo* BossReliveInfo::default_instance_ = NULL;

BossReliveInfo* BossReliveInfo::New() const {
  return new BossReliveInfo;
}

void BossReliveInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossReliveInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(hppercent_, level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_->clear();
      }
    }
    country_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossReliveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BossReliveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hppercent;
        break;
      }

      // optional uint32 hppercent = 2;
      case 2: {
        if (tag == 16) {
         parse_hppercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hppercent_)));
          set_has_hppercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // optional string time = 3;
      case 3: {
        if (tag == 26) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_map;
        break;
      }

      // optional string map = 4;
      case 4: {
        if (tag == 34) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_country;
        break;
      }

      // optional uint32 country = 6;
      case 6: {
        if (tag == 48) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_desc;
        break;
      }

      // optional string desc = 7;
      case 7: {
        if (tag == 58) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BossReliveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BossReliveInfo)
  return false;
#undef DO_
}

void BossReliveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BossReliveInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 hppercent = 2;
  if (has_hppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hppercent(), output);
  }

  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->time(), output);
  }

  // optional string map = 4;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->map(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->country(), output);
  }

  // optional string desc = 7;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BossReliveInfo)
}

::google::protobuf::uint8* BossReliveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BossReliveInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 hppercent = 2;
  if (has_hppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hppercent(), target);
  }

  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->time(), target);
  }

  // optional string map = 4;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->map(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 country = 6;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->country(), target);
  }

  // optional string desc = 7;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BossReliveInfo)
  return target;
}

int BossReliveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 hppercent = 2;
    if (has_hppercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hppercent());
    }

    // optional string time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional string map = 4;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional string desc = 7;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossReliveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossReliveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossReliveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossReliveInfo::MergeFrom(const BossReliveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hppercent()) {
      set_hppercent(from.hppercent());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossReliveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossReliveInfo::CopyFrom(const BossReliveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossReliveInfo::IsInitialized() const {

  return true;
}

void BossReliveInfo::Swap(BossReliveInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(hppercent_, other->hppercent_);
    std::swap(time_, other->time_);
    std::swap(map_, other->map_);
    std::swap(level_, other->level_);
    std::swap(country_, other->country_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossReliveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossReliveInfo_descriptor_;
  metadata.reflection = BossReliveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeZoneInfo::kNewzoneidFieldNumber;
const int ChangeZoneInfo::kTokenFieldNumber;
#endif  // !_MSC_VER

ChangeZoneInfo::ChangeZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChangeZoneInfo)
}

void ChangeZoneInfo::InitAsDefaultInstance() {
}

ChangeZoneInfo::ChangeZoneInfo(const ChangeZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChangeZoneInfo)
}

void ChangeZoneInfo::SharedCtor() {
  _cached_size_ = 0;
  newzoneid_ = 0u;
  token_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeZoneInfo::~ChangeZoneInfo() {
  // @@protoc_insertion_point(destructor:ChangeZoneInfo)
  SharedDtor();
}

void ChangeZoneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeZoneInfo_descriptor_;
}

const ChangeZoneInfo& ChangeZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ChangeZoneInfo* ChangeZoneInfo::default_instance_ = NULL;

ChangeZoneInfo* ChangeZoneInfo::New() const {
  return new ChangeZoneInfo;
}

void ChangeZoneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeZoneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(newzoneid_, token_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChangeZoneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 newzoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newzoneid_)));
          set_has_newzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_token;
        break;
      }

      // optional uint32 token = 4;
      case 4: {
        if (tag == 32) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChangeZoneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChangeZoneInfo)
  return false;
#undef DO_
}

void ChangeZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChangeZoneInfo)
  // optional uint32 newzoneid = 1;
  if (has_newzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->newzoneid(), output);
  }

  // optional uint32 token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChangeZoneInfo)
}

::google::protobuf::uint8* ChangeZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeZoneInfo)
  // optional uint32 newzoneid = 1;
  if (has_newzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->newzoneid(), target);
  }

  // optional uint32 token = 4;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeZoneInfo)
  return target;
}

int ChangeZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 newzoneid = 1;
    if (has_newzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newzoneid());
    }

    // optional uint32 token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeZoneInfo::MergeFrom(const ChangeZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newzoneid()) {
      set_newzoneid(from.newzoneid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeZoneInfo::CopyFrom(const ChangeZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeZoneInfo::IsInitialized() const {

  return true;
}

void ChangeZoneInfo::Swap(ChangeZoneInfo* other) {
  if (other != this) {
    std::swap(newzoneid_, other->newzoneid_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeZoneInfo_descriptor_;
  metadata.reflection = ChangeZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserScore::kTypeFieldNumber;
const int UserScore::kScoreFieldNumber;
const int UserScore::kTotalscoreFieldNumber;
#endif  // !_MSC_VER

UserScore::UserScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserScore)
}

void UserScore::InitAsDefaultInstance() {
}

UserScore::UserScore(const UserScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserScore)
}

void UserScore::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  score_ = 0u;
  totalscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserScore::~UserScore() {
  // @@protoc_insertion_point(destructor:UserScore)
  SharedDtor();
}

void UserScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserScore_descriptor_;
}

const UserScore& UserScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UserScore* UserScore::default_instance_ = NULL;

UserScore* UserScore::New() const {
  return new UserScore;
}

void UserScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, totalscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ScoreType type = 1 [default = Score_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScoreType_IsValid(value)) {
            set_type(static_cast< ::ScoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalscore;
        break;
      }

      // optional uint32 totalscore = 3;
      case 3: {
        if (tag == 24) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserScore)
  return false;
#undef DO_
}

void UserScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserScore)
  // optional .ScoreType type = 1 [default = Score_None];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 totalscore = 3;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserScore)
}

::google::protobuf::uint8* UserScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserScore)
  // optional .ScoreType type = 1 [default = Score_None];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 totalscore = 3;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserScore)
  return target;
}

int UserScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ScoreType type = 1 [default = Score_None];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 totalscore = 3;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserScore::MergeFrom(const UserScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserScore::CopyFrom(const UserScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserScore::IsInitialized() const {

  return true;
}

void UserScore::Swap(UserScore* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(score_, other->score_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserScore_descriptor_;
  metadata.reflection = UserScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneYaoQianItem::kBuynumFieldNumber;
const int OneYaoQianItem::kBuylevelFieldNumber;
const int OneYaoQianItem::kReturnlevelFieldNumber;
#endif  // !_MSC_VER

OneYaoQianItem::OneYaoQianItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneYaoQianItem)
}

void OneYaoQianItem::InitAsDefaultInstance() {
}

OneYaoQianItem::OneYaoQianItem(const OneYaoQianItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OneYaoQianItem)
}

void OneYaoQianItem::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  buylevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneYaoQianItem::~OneYaoQianItem() {
  // @@protoc_insertion_point(destructor:OneYaoQianItem)
  SharedDtor();
}

void OneYaoQianItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneYaoQianItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneYaoQianItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneYaoQianItem_descriptor_;
}

const OneYaoQianItem& OneYaoQianItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

OneYaoQianItem* OneYaoQianItem::default_instance_ = NULL;

OneYaoQianItem* OneYaoQianItem::New() const {
  return new OneYaoQianItem;
}

void OneYaoQianItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OneYaoQianItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buynum_, buylevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  returnlevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneYaoQianItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneYaoQianItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buynum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buylevel;
        break;
      }

      // optional uint32 buylevel = 2;
      case 2: {
        if (tag == 16) {
         parse_buylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buylevel_)));
          set_has_buylevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_returnlevel;
        break;
      }

      // repeated uint32 returnlevel = 3;
      case 3: {
        if (tag == 24) {
         parse_returnlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_returnlevel())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_returnlevel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_returnlevel;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneYaoQianItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneYaoQianItem)
  return false;
#undef DO_
}

void OneYaoQianItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneYaoQianItem)
  // optional uint32 buynum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buynum(), output);
  }

  // optional uint32 buylevel = 2;
  if (has_buylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buylevel(), output);
  }

  // repeated uint32 returnlevel = 3;
  for (int i = 0; i < this->returnlevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->returnlevel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneYaoQianItem)
}

::google::protobuf::uint8* OneYaoQianItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OneYaoQianItem)
  // optional uint32 buynum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buynum(), target);
  }

  // optional uint32 buylevel = 2;
  if (has_buylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buylevel(), target);
  }

  // repeated uint32 returnlevel = 3;
  for (int i = 0; i < this->returnlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->returnlevel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneYaoQianItem)
  return target;
}

int OneYaoQianItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buynum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // optional uint32 buylevel = 2;
    if (has_buylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buylevel());
    }

  }
  // repeated uint32 returnlevel = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->returnlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->returnlevel(i));
    }
    total_size += 1 * this->returnlevel_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneYaoQianItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneYaoQianItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneYaoQianItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneYaoQianItem::MergeFrom(const OneYaoQianItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  returnlevel_.MergeFrom(from.returnlevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_buylevel()) {
      set_buylevel(from.buylevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneYaoQianItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneYaoQianItem::CopyFrom(const OneYaoQianItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneYaoQianItem::IsInitialized() const {

  return true;
}

void OneYaoQianItem::Swap(OneYaoQianItem* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(buylevel_, other->buylevel_);
    returnlevel_.Swap(&other->returnlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneYaoQianItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneYaoQianItem_descriptor_;
  metadata.reflection = OneYaoQianItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YaoQianSaveData::kHavebuyFieldNumber;
const int YaoQianSaveData::kReturngoldFieldNumber;
const int YaoQianSaveData::kReturnbindgoldFieldNumber;
const int YaoQianSaveData::kItemsFieldNumber;
const int YaoQianSaveData::kStageFieldNumber;
#endif  // !_MSC_VER

YaoQianSaveData::YaoQianSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YaoQianSaveData)
}

void YaoQianSaveData::InitAsDefaultInstance() {
}

YaoQianSaveData::YaoQianSaveData(const YaoQianSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YaoQianSaveData)
}

void YaoQianSaveData::SharedCtor() {
  _cached_size_ = 0;
  havebuy_ = 0u;
  returngold_ = 0u;
  returnbindgold_ = 0u;
  stage_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YaoQianSaveData::~YaoQianSaveData() {
  // @@protoc_insertion_point(destructor:YaoQianSaveData)
  SharedDtor();
}

void YaoQianSaveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YaoQianSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YaoQianSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaoQianSaveData_descriptor_;
}

const YaoQianSaveData& YaoQianSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

YaoQianSaveData* YaoQianSaveData::default_instance_ = NULL;

YaoQianSaveData* YaoQianSaveData::New() const {
  return new YaoQianSaveData;
}

void YaoQianSaveData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<YaoQianSaveData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(havebuy_, returngold_);
    returnbindgold_ = 0u;
    stage_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YaoQianSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YaoQianSaveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 havebuy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havebuy_)));
          set_has_havebuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_returngold;
        break;
      }

      // optional uint32 returngold = 2;
      case 2: {
        if (tag == 16) {
         parse_returngold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &returngold_)));
          set_has_returngold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_returnbindgold;
        break;
      }

      // optional uint32 returnbindgold = 3;
      case 3: {
        if (tag == 24) {
         parse_returnbindgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &returnbindgold_)));
          set_has_returnbindgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .OneYaoQianItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_stage;
        break;
      }

      // optional uint32 stage = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YaoQianSaveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YaoQianSaveData)
  return false;
#undef DO_
}

void YaoQianSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YaoQianSaveData)
  // optional uint32 havebuy = 1;
  if (has_havebuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->havebuy(), output);
  }

  // optional uint32 returngold = 2;
  if (has_returngold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->returngold(), output);
  }

  // optional uint32 returnbindgold = 3;
  if (has_returnbindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->returnbindgold(), output);
  }

  // repeated .OneYaoQianItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  // optional uint32 stage = 5 [default = 1];
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YaoQianSaveData)
}

::google::protobuf::uint8* YaoQianSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YaoQianSaveData)
  // optional uint32 havebuy = 1;
  if (has_havebuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->havebuy(), target);
  }

  // optional uint32 returngold = 2;
  if (has_returngold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->returngold(), target);
  }

  // optional uint32 returnbindgold = 3;
  if (has_returnbindgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->returnbindgold(), target);
  }

  // repeated .OneYaoQianItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  // optional uint32 stage = 5 [default = 1];
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YaoQianSaveData)
  return target;
}

int YaoQianSaveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 havebuy = 1;
    if (has_havebuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havebuy());
    }

    // optional uint32 returngold = 2;
    if (has_returngold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->returngold());
    }

    // optional uint32 returnbindgold = 3;
    if (has_returnbindgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->returnbindgold());
    }

    // optional uint32 stage = 5 [default = 1];
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

  }
  // repeated .OneYaoQianItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YaoQianSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YaoQianSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YaoQianSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YaoQianSaveData::MergeFrom(const YaoQianSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_havebuy()) {
      set_havebuy(from.havebuy());
    }
    if (from.has_returngold()) {
      set_returngold(from.returngold());
    }
    if (from.has_returnbindgold()) {
      set_returnbindgold(from.returnbindgold());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YaoQianSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YaoQianSaveData::CopyFrom(const YaoQianSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YaoQianSaveData::IsInitialized() const {

  return true;
}

void YaoQianSaveData::Swap(YaoQianSaveData* other) {
  if (other != this) {
    std::swap(havebuy_, other->havebuy_);
    std::swap(returngold_, other->returngold_);
    std::swap(returnbindgold_, other->returnbindgold_);
    items_.Swap(&other->items_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YaoQianSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YaoQianSaveData_descriptor_;
  metadata.reflection = YaoQianSaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonSaveData::kIdFieldNumber;
const int DungeonSaveData::kTimesFieldNumber;
const int DungeonSaveData::kTimeFieldNumber;
#endif  // !_MSC_VER

DungeonSaveData::DungeonSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DungeonSaveData)
}

void DungeonSaveData::InitAsDefaultInstance() {
}

DungeonSaveData::DungeonSaveData(const DungeonSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DungeonSaveData)
}

void DungeonSaveData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  times_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonSaveData::~DungeonSaveData() {
  // @@protoc_insertion_point(destructor:DungeonSaveData)
  SharedDtor();
}

void DungeonSaveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonSaveData_descriptor_;
}

const DungeonSaveData& DungeonSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

DungeonSaveData* DungeonSaveData::default_instance_ = NULL;

DungeonSaveData* DungeonSaveData::New() const {
  return new DungeonSaveData;
}

void DungeonSaveData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DungeonSaveData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DungeonSaveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (tag == 16) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DungeonSaveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DungeonSaveData)
  return false;
#undef DO_
}

void DungeonSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DungeonSaveData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DungeonSaveData)
}

::google::protobuf::uint8* DungeonSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DungeonSaveData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DungeonSaveData)
  return target;
}

int DungeonSaveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonSaveData::MergeFrom(const DungeonSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonSaveData::CopyFrom(const DungeonSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonSaveData::IsInitialized() const {

  return true;
}

void DungeonSaveData::Swap(DungeonSaveData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(times_, other->times_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonSaveData_descriptor_;
  metadata.reflection = DungeonSaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VarInfo::kKeyFieldNumber;
const int VarInfo::kValueFieldNumber;
const int VarInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

VarInfo::VarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VarInfo)
}

void VarInfo::InitAsDefaultInstance() {
}

VarInfo::VarInfo(const VarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VarInfo)
}

void VarInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarInfo::~VarInfo() {
  // @@protoc_insertion_point(destructor:VarInfo)
  SharedDtor();
}

void VarInfo::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void VarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarInfo_descriptor_;
}

const VarInfo& VarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

VarInfo* VarInfo::default_instance_ = NULL;

VarInfo* VarInfo::New() const {
  return new VarInfo;
}

void VarInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VarInfo)
  return false;
#undef DO_
}

void VarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VarInfo)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VarInfo)
}

::google::protobuf::uint8* VarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VarInfo)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VarInfo)
  return target;
}

int VarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarInfo::MergeFrom(const VarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarInfo::CopyFrom(const VarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarInfo::IsInitialized() const {

  return true;
}

void VarInfo::Swap(VarInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarInfo_descriptor_;
  metadata.reflection = VarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildInfo::kIdFieldNumber;
const int BuildInfo::kLevelFieldNumber;
const int BuildInfo::kStateFieldNumber;
const int BuildInfo::kLastcollecttimeFieldNumber;
const int BuildInfo::kUpgradetimeFieldNumber;
const int BuildInfo::kOutputitemtimesFieldNumber;
const int BuildInfo::kLastgetitemtimeFieldNumber;
#endif  // !_MSC_VER

BuildInfo::BuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BuildInfo)
}

void BuildInfo::InitAsDefaultInstance() {
}

BuildInfo::BuildInfo(const BuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BuildInfo)
}

void BuildInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  state_ = 0u;
  lastcollecttime_ = 0u;
  upgradetime_ = 0u;
  outputitemtimes_ = 0u;
  lastgetitemtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildInfo::~BuildInfo() {
  // @@protoc_insertion_point(destructor:BuildInfo)
  SharedDtor();
}

void BuildInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildInfo_descriptor_;
}

const BuildInfo& BuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BuildInfo* BuildInfo::default_instance_ = NULL;

BuildInfo* BuildInfo::New() const {
  return new BuildInfo;
}

void BuildInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, lastgetitemtime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastcollecttime;
        break;
      }

      // optional uint32 lastcollecttime = 4;
      case 4: {
        if (tag == 32) {
         parse_lastcollecttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastcollecttime_)));
          set_has_lastcollecttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_upgradetime;
        break;
      }

      // optional uint32 upgradetime = 5;
      case 5: {
        if (tag == 40) {
         parse_upgradetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgradetime_)));
          set_has_upgradetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_outputitemtimes;
        break;
      }

      // optional uint32 outputitemtimes = 6;
      case 6: {
        if (tag == 48) {
         parse_outputitemtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outputitemtimes_)));
          set_has_outputitemtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lastgetitemtime;
        break;
      }

      // optional uint32 lastgetitemtime = 7;
      case 7: {
        if (tag == 56) {
         parse_lastgetitemtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastgetitemtime_)));
          set_has_lastgetitemtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BuildInfo)
  return false;
#undef DO_
}

void BuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BuildInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // optional uint32 lastcollecttime = 4;
  if (has_lastcollecttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastcollecttime(), output);
  }

  // optional uint32 upgradetime = 5;
  if (has_upgradetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->upgradetime(), output);
  }

  // optional uint32 outputitemtimes = 6;
  if (has_outputitemtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->outputitemtimes(), output);
  }

  // optional uint32 lastgetitemtime = 7;
  if (has_lastgetitemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lastgetitemtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BuildInfo)
}

::google::protobuf::uint8* BuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // optional uint32 lastcollecttime = 4;
  if (has_lastcollecttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastcollecttime(), target);
  }

  // optional uint32 upgradetime = 5;
  if (has_upgradetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->upgradetime(), target);
  }

  // optional uint32 outputitemtimes = 6;
  if (has_outputitemtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->outputitemtimes(), target);
  }

  // optional uint32 lastgetitemtime = 7;
  if (has_lastgetitemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lastgetitemtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildInfo)
  return target;
}

int BuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 lastcollecttime = 4;
    if (has_lastcollecttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastcollecttime());
    }

    // optional uint32 upgradetime = 5;
    if (has_upgradetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgradetime());
    }

    // optional uint32 outputitemtimes = 6;
    if (has_outputitemtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outputitemtimes());
    }

    // optional uint32 lastgetitemtime = 7;
    if (has_lastgetitemtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastgetitemtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildInfo::MergeFrom(const BuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_lastcollecttime()) {
      set_lastcollecttime(from.lastcollecttime());
    }
    if (from.has_upgradetime()) {
      set_upgradetime(from.upgradetime());
    }
    if (from.has_outputitemtimes()) {
      set_outputitemtimes(from.outputitemtimes());
    }
    if (from.has_lastgetitemtime()) {
      set_lastgetitemtime(from.lastgetitemtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildInfo::CopyFrom(const BuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildInfo::IsInitialized() const {

  return true;
}

void BuildInfo::Swap(BuildInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(state_, other->state_);
    std::swap(lastcollecttime_, other->lastcollecttime_);
    std::swap(upgradetime_, other->upgradetime_);
    std::swap(outputitemtimes_, other->outputitemtimes_);
    std::swap(lastgetitemtime_, other->lastgetitemtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildInfo_descriptor_;
  metadata.reflection = BuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeEquipInfo::kIidFieldNumber;
const int MakeEquipInfo::kEquipidFieldNumber;
const int MakeEquipInfo::kQualityFieldNumber;
const int MakeEquipInfo::kMaketimeFieldNumber;
const int MakeEquipInfo::kStateFieldNumber;
#endif  // !_MSC_VER

MakeEquipInfo::MakeEquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MakeEquipInfo)
}

void MakeEquipInfo::InitAsDefaultInstance() {
}

MakeEquipInfo::MakeEquipInfo(const MakeEquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MakeEquipInfo)
}

void MakeEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  iid_ = GOOGLE_ULONGLONG(0);
  equipid_ = 0u;
  quality_ = 0u;
  maketime_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeEquipInfo::~MakeEquipInfo() {
  // @@protoc_insertion_point(destructor:MakeEquipInfo)
  SharedDtor();
}

void MakeEquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeEquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeEquipInfo_descriptor_;
}

const MakeEquipInfo& MakeEquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MakeEquipInfo* MakeEquipInfo::default_instance_ = NULL;

MakeEquipInfo* MakeEquipInfo::New() const {
  return new MakeEquipInfo;
}

void MakeEquipInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MakeEquipInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(iid_, state_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MakeEquipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 iid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equipid;
        break;
      }

      // optional uint32 equipid = 2;
      case 2: {
        if (tag == 16) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 3;
      case 3: {
        if (tag == 24) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maketime;
        break;
      }

      // optional uint32 maketime = 4;
      case 4: {
        if (tag == 32) {
         parse_maketime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maketime_)));
          set_has_maketime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional uint32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MakeEquipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MakeEquipInfo)
  return false;
#undef DO_
}

void MakeEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MakeEquipInfo)
  // optional uint64 iid = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->iid(), output);
  }

  // optional uint32 equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equipid(), output);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // optional uint32 maketime = 4;
  if (has_maketime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maketime(), output);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MakeEquipInfo)
}

::google::protobuf::uint8* MakeEquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MakeEquipInfo)
  // optional uint64 iid = 1;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->iid(), target);
  }

  // optional uint32 equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equipid(), target);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // optional uint32 maketime = 4;
  if (has_maketime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maketime(), target);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MakeEquipInfo)
  return target;
}

int MakeEquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 iid = 1;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->iid());
    }

    // optional uint32 equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // optional uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 maketime = 4;
    if (has_maketime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maketime());
    }

    // optional uint32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeEquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeEquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeEquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeEquipInfo::MergeFrom(const MakeEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_maketime()) {
      set_maketime(from.maketime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeEquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeEquipInfo::CopyFrom(const MakeEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeEquipInfo::IsInitialized() const {

  return true;
}

void MakeEquipInfo::Swap(MakeEquipInfo* other) {
  if (other != this) {
    std::swap(iid_, other->iid_);
    std::swap(equipid_, other->equipid_);
    std::swap(quality_, other->quality_);
    std::swap(maketime_, other->maketime_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeEquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeEquipInfo_descriptor_;
  metadata.reflection = MakeEquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CastleExploreInfo::kIdFieldNumber;
const int CastleExploreInfo::kStateFieldNumber;
const int CastleExploreInfo::kFinishtimeFieldNumber;
const int CastleExploreInfo::kIssucFieldNumber;
const int CastleExploreInfo::kPetsFieldNumber;
#endif  // !_MSC_VER

CastleExploreInfo::CastleExploreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CastleExploreInfo)
}

void CastleExploreInfo::InitAsDefaultInstance() {
}

CastleExploreInfo::CastleExploreInfo(const CastleExploreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CastleExploreInfo)
}

void CastleExploreInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  state_ = 0u;
  finishtime_ = 0u;
  issuc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CastleExploreInfo::~CastleExploreInfo() {
  // @@protoc_insertion_point(destructor:CastleExploreInfo)
  SharedDtor();
}

void CastleExploreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CastleExploreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastleExploreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CastleExploreInfo_descriptor_;
}

const CastleExploreInfo& CastleExploreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CastleExploreInfo* CastleExploreInfo::default_instance_ = NULL;

CastleExploreInfo* CastleExploreInfo::New() const {
  return new CastleExploreInfo;
}

void CastleExploreInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CastleExploreInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, issuc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  pets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CastleExploreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CastleExploreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_finishtime;
        break;
      }

      // optional uint32 finishtime = 3;
      case 3: {
        if (tag == 24) {
         parse_finishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_issuc;
        break;
      }

      // optional bool issuc = 4;
      case 4: {
        if (tag == 32) {
         parse_issuc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuc_)));
          set_has_issuc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pets;
        break;
      }

      // repeated uint64 pets = 5;
      case 5: {
        if (tag == 40) {
         parse_pets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_pets())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CastleExploreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CastleExploreInfo)
  return false;
#undef DO_
}

void CastleExploreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CastleExploreInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 finishtime = 3;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finishtime(), output);
  }

  // optional bool issuc = 4;
  if (has_issuc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->issuc(), output);
  }

  // repeated uint64 pets = 5;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->pets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CastleExploreInfo)
}

::google::protobuf::uint8* CastleExploreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CastleExploreInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 finishtime = 3;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finishtime(), target);
  }

  // optional bool issuc = 4;
  if (has_issuc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->issuc(), target);
  }

  // repeated uint64 pets = 5;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->pets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CastleExploreInfo)
  return target;
}

int CastleExploreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 finishtime = 3;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

    // optional bool issuc = 4;
    if (has_issuc()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 pets = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pets(i));
    }
    total_size += 1 * this->pets_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastleExploreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CastleExploreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CastleExploreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CastleExploreInfo::MergeFrom(const CastleExploreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pets_.MergeFrom(from.pets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_issuc()) {
      set_issuc(from.issuc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CastleExploreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastleExploreInfo::CopyFrom(const CastleExploreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastleExploreInfo::IsInitialized() const {

  return true;
}

void CastleExploreInfo::Swap(CastleExploreInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(issuc_, other->issuc_);
    pets_.Swap(&other->pets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CastleExploreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CastleExploreInfo_descriptor_;
  metadata.reflection = CastleExploreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryCastle::kLevelFieldNumber;
const int BinaryCastle::kDistFieldNumber;
const int BinaryCastle::kInfoFieldNumber;
const int BinaryCastle::kOpenFieldNumber;
const int BinaryCastle::kExpinfoFieldNumber;
#endif  // !_MSC_VER

BinaryCastle::BinaryCastle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinaryCastle)
}

void BinaryCastle::InitAsDefaultInstance() {
}

BinaryCastle::BinaryCastle(const BinaryCastle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BinaryCastle)
}

void BinaryCastle::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  open_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryCastle::~BinaryCastle() {
  // @@protoc_insertion_point(destructor:BinaryCastle)
  SharedDtor();
}

void BinaryCastle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryCastle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryCastle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryCastle_descriptor_;
}

const BinaryCastle& BinaryCastle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BinaryCastle* BinaryCastle::default_instance_ = NULL;

BinaryCastle* BinaryCastle::New() const {
  return new BinaryCastle;
}

void BinaryCastle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BinaryCastle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, open_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  dist_.Clear();
  info_.Clear();
  expinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryCastle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinaryCastle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dist;
        break;
      }

      // repeated uint32 dist = 2;
      case 2: {
        if (tag == 16) {
         parse_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_dist())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dist;
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .BuildInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional uint32 open = 4;
      case 4: {
        if (tag == 32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_expinfo;
        break;
      }

      // repeated .CastleExploreInfo expinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_expinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_expinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinaryCastle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinaryCastle)
  return false;
#undef DO_
}

void BinaryCastle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinaryCastle)
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // repeated uint32 dist = 2;
  for (int i = 0; i < this->dist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->dist(i), output);
  }

  // repeated .BuildInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  // optional uint32 open = 4;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->open(), output);
  }

  // repeated .CastleExploreInfo expinfo = 5;
  for (int i = 0; i < this->expinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->expinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinaryCastle)
}

::google::protobuf::uint8* BinaryCastle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinaryCastle)
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // repeated uint32 dist = 2;
  for (int i = 0; i < this->dist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->dist(i), target);
  }

  // repeated .BuildInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  // optional uint32 open = 4;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->open(), target);
  }

  // repeated .CastleExploreInfo expinfo = 5;
  for (int i = 0; i < this->expinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->expinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinaryCastle)
  return target;
}

int BinaryCastle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 open = 4;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open());
    }

  }
  // repeated uint32 dist = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dist(i));
    }
    total_size += 1 * this->dist_size() + data_size;
  }

  // repeated .BuildInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .CastleExploreInfo expinfo = 5;
  total_size += 1 * this->expinfo_size();
  for (int i = 0; i < this->expinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryCastle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryCastle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryCastle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryCastle::MergeFrom(const BinaryCastle& from) {
  GOOGLE_CHECK_NE(&from, this);
  dist_.MergeFrom(from.dist_);
  info_.MergeFrom(from.info_);
  expinfo_.MergeFrom(from.expinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryCastle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryCastle::CopyFrom(const BinaryCastle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryCastle::IsInitialized() const {

  return true;
}

void BinaryCastle::Swap(BinaryCastle* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    dist_.Swap(&other->dist_);
    info_.Swap(&other->info_);
    std::swap(open_, other->open_);
    expinfo_.Swap(&other->expinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryCastle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryCastle_descriptor_;
  metadata.reflection = BinaryCastle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryMakeEquip::kInfoFieldNumber;
#endif  // !_MSC_VER

BinaryMakeEquip::BinaryMakeEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinaryMakeEquip)
}

void BinaryMakeEquip::InitAsDefaultInstance() {
}

BinaryMakeEquip::BinaryMakeEquip(const BinaryMakeEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BinaryMakeEquip)
}

void BinaryMakeEquip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryMakeEquip::~BinaryMakeEquip() {
  // @@protoc_insertion_point(destructor:BinaryMakeEquip)
  SharedDtor();
}

void BinaryMakeEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryMakeEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryMakeEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryMakeEquip_descriptor_;
}

const BinaryMakeEquip& BinaryMakeEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BinaryMakeEquip* BinaryMakeEquip::default_instance_ = NULL;

BinaryMakeEquip* BinaryMakeEquip::New() const {
  return new BinaryMakeEquip;
}

void BinaryMakeEquip::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryMakeEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinaryMakeEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MakeEquipInfo info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinaryMakeEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinaryMakeEquip)
  return false;
#undef DO_
}

void BinaryMakeEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinaryMakeEquip)
  // repeated .MakeEquipInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinaryMakeEquip)
}

::google::protobuf::uint8* BinaryMakeEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinaryMakeEquip)
  // repeated .MakeEquipInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinaryMakeEquip)
  return target;
}

int BinaryMakeEquip::ByteSize() const {
  int total_size = 0;

  // repeated .MakeEquipInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryMakeEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryMakeEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryMakeEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryMakeEquip::MergeFrom(const BinaryMakeEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryMakeEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryMakeEquip::CopyFrom(const BinaryMakeEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryMakeEquip::IsInitialized() const {

  return true;
}

void BinaryMakeEquip::Swap(BinaryMakeEquip* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryMakeEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryMakeEquip_descriptor_;
  metadata.reflection = BinaryMakeEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CastlePetInfo::kIidFieldNumber;
const int CastlePetInfo::kIdFieldNumber;
const int CastlePetInfo::kBaseskillFieldNumber;
const int CastlePetInfo::kRandomskillFieldNumber;
const int CastlePetInfo::kLevelFieldNumber;
const int CastlePetInfo::kExpFieldNumber;
const int CastlePetInfo::kStarsFieldNumber;
const int CastlePetInfo::kSoulsFieldNumber;
const int CastlePetInfo::kPhyattFieldNumber;
const int CastlePetInfo::kPhydefFieldNumber;
const int CastlePetInfo::kMagattFieldNumber;
const int CastlePetInfo::kMagdefFieldNumber;
const int CastlePetInfo::kHpFieldNumber;
const int CastlePetInfo::kMpFieldNumber;
const int CastlePetInfo::kExperttypeFieldNumber;
const int CastlePetInfo::kWorkabilityFieldNumber;
const int CastlePetInfo::kStateFieldNumber;
const int CastlePetInfo::kAllsoulsFieldNumber;
const int CastlePetInfo::kNameFieldNumber;
const int CastlePetInfo::kStateidFieldNumber;
#endif  // !_MSC_VER

CastlePetInfo::CastlePetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CastlePetInfo)
}

void CastlePetInfo::InitAsDefaultInstance() {
}

CastlePetInfo::CastlePetInfo(const CastlePetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CastlePetInfo)
}

void CastlePetInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iid_ = GOOGLE_ULONGLONG(0);
  id_ = 0u;
  baseskill_ = 0u;
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  stars_ = 0u;
  souls_ = 0u;
  phyatt_ = 0u;
  phydef_ = 0u;
  magatt_ = 0u;
  magdef_ = 0u;
  hp_ = 0u;
  mp_ = 0u;
  experttype_ = 0u;
  workability_ = 0u;
  state_ = 0u;
  allsouls_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stateid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CastlePetInfo::~CastlePetInfo() {
  // @@protoc_insertion_point(destructor:CastlePetInfo)
  SharedDtor();
}

void CastlePetInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CastlePetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastlePetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CastlePetInfo_descriptor_;
}

const CastlePetInfo& CastlePetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CastlePetInfo* CastlePetInfo::default_instance_ = NULL;

CastlePetInfo* CastlePetInfo::New() const {
  return new CastlePetInfo;
}

void CastlePetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CastlePetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(iid_, baseskill_);
    ZR_(exp_, souls_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(phyatt_, workability_);
  }
  if (_has_bits_[16 / 32] & 983040) {
    ZR_(allsouls_, stateid_);
    state_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  randomskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CastlePetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CastlePetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 iid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_baseskill;
        break;
      }

      // optional uint32 baseskill = 3;
      case 3: {
        if (tag == 24) {
         parse_baseskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseskill_)));
          set_has_baseskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_randomskill;
        break;
      }

      // repeated uint32 randomskill = 4;
      case 4: {
        if (tag == 32) {
         parse_randomskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_randomskill())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_randomskill())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_randomskill;
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_stars;
        break;
      }

      // optional uint32 stars = 7;
      case 7: {
        if (tag == 56) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stars_)));
          set_has_stars();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_souls;
        break;
      }

      // optional uint32 souls = 8;
      case 8: {
        if (tag == 64) {
         parse_souls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &souls_)));
          set_has_souls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_phyatt;
        break;
      }

      // optional uint32 phyatt = 9;
      case 9: {
        if (tag == 72) {
         parse_phyatt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phyatt_)));
          set_has_phyatt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_phydef;
        break;
      }

      // optional uint32 phydef = 10;
      case 10: {
        if (tag == 80) {
         parse_phydef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phydef_)));
          set_has_phydef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_magatt;
        break;
      }

      // optional uint32 magatt = 11;
      case 11: {
        if (tag == 88) {
         parse_magatt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magatt_)));
          set_has_magatt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_magdef;
        break;
      }

      // optional uint32 magdef = 12;
      case 12: {
        if (tag == 96) {
         parse_magdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magdef_)));
          set_has_magdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 13;
      case 13: {
        if (tag == 104) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 14;
      case 14: {
        if (tag == 112) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_experttype;
        break;
      }

      // optional uint32 experttype = 15;
      case 15: {
        if (tag == 120) {
         parse_experttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experttype_)));
          set_has_experttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_workability;
        break;
      }

      // optional uint32 workability = 16;
      case 16: {
        if (tag == 128) {
         parse_workability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workability_)));
          set_has_workability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_state;
        break;
      }

      // optional uint32 state = 17;
      case 17: {
        if (tag == 136) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_allsouls;
        break;
      }

      // optional uint32 allsouls = 18;
      case 18: {
        if (tag == 144) {
         parse_allsouls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allsouls_)));
          set_has_allsouls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_name;
        break;
      }

      // optional string name = 19;
      case 19: {
        if (tag == 154) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_stateid;
        break;
      }

      // optional uint32 stateid = 20;
      case 20: {
        if (tag == 160) {
         parse_stateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CastlePetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CastlePetInfo)
  return false;
#undef DO_
}

void CastlePetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CastlePetInfo)
  // optional uint64 iid = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->iid(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 baseskill = 3;
  if (has_baseskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->baseskill(), output);
  }

  // repeated uint32 randomskill = 4;
  for (int i = 0; i < this->randomskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->randomskill(i), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint64 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->exp(), output);
  }

  // optional uint32 stars = 7;
  if (has_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stars(), output);
  }

  // optional uint32 souls = 8;
  if (has_souls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->souls(), output);
  }

  // optional uint32 phyatt = 9;
  if (has_phyatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->phyatt(), output);
  }

  // optional uint32 phydef = 10;
  if (has_phydef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->phydef(), output);
  }

  // optional uint32 magatt = 11;
  if (has_magatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->magatt(), output);
  }

  // optional uint32 magdef = 12;
  if (has_magdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->magdef(), output);
  }

  // optional uint32 hp = 13;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->hp(), output);
  }

  // optional uint32 mp = 14;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->mp(), output);
  }

  // optional uint32 experttype = 15;
  if (has_experttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->experttype(), output);
  }

  // optional uint32 workability = 16;
  if (has_workability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->workability(), output);
  }

  // optional uint32 state = 17;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->state(), output);
  }

  // optional uint32 allsouls = 18;
  if (has_allsouls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->allsouls(), output);
  }

  // optional string name = 19;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->name(), output);
  }

  // optional uint32 stateid = 20;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->stateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CastlePetInfo)
}

::google::protobuf::uint8* CastlePetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CastlePetInfo)
  // optional uint64 iid = 1;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->iid(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 baseskill = 3;
  if (has_baseskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->baseskill(), target);
  }

  // repeated uint32 randomskill = 4;
  for (int i = 0; i < this->randomskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->randomskill(i), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint64 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->exp(), target);
  }

  // optional uint32 stars = 7;
  if (has_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stars(), target);
  }

  // optional uint32 souls = 8;
  if (has_souls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->souls(), target);
  }

  // optional uint32 phyatt = 9;
  if (has_phyatt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->phyatt(), target);
  }

  // optional uint32 phydef = 10;
  if (has_phydef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->phydef(), target);
  }

  // optional uint32 magatt = 11;
  if (has_magatt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->magatt(), target);
  }

  // optional uint32 magdef = 12;
  if (has_magdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->magdef(), target);
  }

  // optional uint32 hp = 13;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->hp(), target);
  }

  // optional uint32 mp = 14;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->mp(), target);
  }

  // optional uint32 experttype = 15;
  if (has_experttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->experttype(), target);
  }

  // optional uint32 workability = 16;
  if (has_workability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->workability(), target);
  }

  // optional uint32 state = 17;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->state(), target);
  }

  // optional uint32 allsouls = 18;
  if (has_allsouls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->allsouls(), target);
  }

  // optional string name = 19;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->name(), target);
  }

  // optional uint32 stateid = 20;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->stateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CastlePetInfo)
  return target;
}

int CastlePetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 iid = 1;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->iid());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 baseskill = 3;
    if (has_baseskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseskill());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint32 stars = 7;
    if (has_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stars());
    }

    // optional uint32 souls = 8;
    if (has_souls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->souls());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 phyatt = 9;
    if (has_phyatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phyatt());
    }

    // optional uint32 phydef = 10;
    if (has_phydef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phydef());
    }

    // optional uint32 magatt = 11;
    if (has_magatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magatt());
    }

    // optional uint32 magdef = 12;
    if (has_magdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magdef());
    }

    // optional uint32 hp = 13;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 mp = 14;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 experttype = 15;
    if (has_experttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experttype());
    }

    // optional uint32 workability = 16;
    if (has_workability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workability());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 state = 17;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 allsouls = 18;
    if (has_allsouls()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allsouls());
    }

    // optional string name = 19;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 stateid = 20;
    if (has_stateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stateid());
    }

  }
  // repeated uint32 randomskill = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->randomskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->randomskill(i));
    }
    total_size += 1 * this->randomskill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastlePetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CastlePetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CastlePetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CastlePetInfo::MergeFrom(const CastlePetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  randomskill_.MergeFrom(from.randomskill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_baseskill()) {
      set_baseskill(from.baseskill());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_stars()) {
      set_stars(from.stars());
    }
    if (from.has_souls()) {
      set_souls(from.souls());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phyatt()) {
      set_phyatt(from.phyatt());
    }
    if (from.has_phydef()) {
      set_phydef(from.phydef());
    }
    if (from.has_magatt()) {
      set_magatt(from.magatt());
    }
    if (from.has_magdef()) {
      set_magdef(from.magdef());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_experttype()) {
      set_experttype(from.experttype());
    }
    if (from.has_workability()) {
      set_workability(from.workability());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_allsouls()) {
      set_allsouls(from.allsouls());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CastlePetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastlePetInfo::CopyFrom(const CastlePetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastlePetInfo::IsInitialized() const {

  return true;
}

void CastlePetInfo::Swap(CastlePetInfo* other) {
  if (other != this) {
    std::swap(iid_, other->iid_);
    std::swap(id_, other->id_);
    std::swap(baseskill_, other->baseskill_);
    randomskill_.Swap(&other->randomskill_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(stars_, other->stars_);
    std::swap(souls_, other->souls_);
    std::swap(phyatt_, other->phyatt_);
    std::swap(phydef_, other->phydef_);
    std::swap(magatt_, other->magatt_);
    std::swap(magdef_, other->magdef_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(experttype_, other->experttype_);
    std::swap(workability_, other->workability_);
    std::swap(state_, other->state_);
    std::swap(allsouls_, other->allsouls_);
    std::swap(name_, other->name_);
    std::swap(stateid_, other->stateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CastlePetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CastlePetInfo_descriptor_;
  metadata.reflection = CastlePetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CastleWorkPet::kIidFieldNumber;
const int CastleWorkPet::kBuildidFieldNumber;
#endif  // !_MSC_VER

CastleWorkPet::CastleWorkPet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CastleWorkPet)
}

void CastleWorkPet::InitAsDefaultInstance() {
}

CastleWorkPet::CastleWorkPet(const CastleWorkPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CastleWorkPet)
}

void CastleWorkPet::SharedCtor() {
  _cached_size_ = 0;
  iid_ = GOOGLE_ULONGLONG(0);
  buildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CastleWorkPet::~CastleWorkPet() {
  // @@protoc_insertion_point(destructor:CastleWorkPet)
  SharedDtor();
}

void CastleWorkPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CastleWorkPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastleWorkPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CastleWorkPet_descriptor_;
}

const CastleWorkPet& CastleWorkPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CastleWorkPet* CastleWorkPet::default_instance_ = NULL;

CastleWorkPet* CastleWorkPet::New() const {
  return new CastleWorkPet;
}

void CastleWorkPet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CastleWorkPet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(iid_, buildid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CastleWorkPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CastleWorkPet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 iid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buildid;
        break;
      }

      // optional uint32 buildid = 2;
      case 2: {
        if (tag == 16) {
         parse_buildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CastleWorkPet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CastleWorkPet)
  return false;
#undef DO_
}

void CastleWorkPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CastleWorkPet)
  // optional uint64 iid = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->iid(), output);
  }

  // optional uint32 buildid = 2;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CastleWorkPet)
}

::google::protobuf::uint8* CastleWorkPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CastleWorkPet)
  // optional uint64 iid = 1;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->iid(), target);
  }

  // optional uint32 buildid = 2;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CastleWorkPet)
  return target;
}

int CastleWorkPet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 iid = 1;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->iid());
    }

    // optional uint32 buildid = 2;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastleWorkPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CastleWorkPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CastleWorkPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CastleWorkPet::MergeFrom(const CastleWorkPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CastleWorkPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastleWorkPet::CopyFrom(const CastleWorkPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastleWorkPet::IsInitialized() const {

  return true;
}

void CastleWorkPet::Swap(CastleWorkPet* other) {
  if (other != this) {
    std::swap(iid_, other->iid_);
    std::swap(buildid_, other->buildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CastleWorkPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CastleWorkPet_descriptor_;
  metadata.reflection = CastleWorkPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryCastlePet::kInfoFieldNumber;
const int BinaryCastlePet::kFightpetFieldNumber;
const int BinaryCastlePet::kWorkpetFieldNumber;
const int BinaryCastlePet::kCollectionFieldNumber;
#endif  // !_MSC_VER

BinaryCastlePet::BinaryCastlePet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinaryCastlePet)
}

void BinaryCastlePet::InitAsDefaultInstance() {
}

BinaryCastlePet::BinaryCastlePet(const BinaryCastlePet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BinaryCastlePet)
}

void BinaryCastlePet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryCastlePet::~BinaryCastlePet() {
  // @@protoc_insertion_point(destructor:BinaryCastlePet)
  SharedDtor();
}

void BinaryCastlePet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryCastlePet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryCastlePet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryCastlePet_descriptor_;
}

const BinaryCastlePet& BinaryCastlePet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BinaryCastlePet* BinaryCastlePet::default_instance_ = NULL;

BinaryCastlePet* BinaryCastlePet::New() const {
  return new BinaryCastlePet;
}

void BinaryCastlePet::Clear() {
  info_.Clear();
  fightpet_.Clear();
  workpet_.Clear();
  collection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryCastlePet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinaryCastlePet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CastlePetInfo info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_fightpet;
        break;
      }

      // repeated uint64 fightpet = 2;
      case 2: {
        if (tag == 16) {
         parse_fightpet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_fightpet())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_fightpet())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fightpet;
        if (input->ExpectTag(26)) goto parse_workpet;
        break;
      }

      // repeated .CastleWorkPet workpet = 3;
      case 3: {
        if (tag == 26) {
         parse_workpet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workpet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_workpet;
        if (input->ExpectTag(32)) goto parse_collection;
        break;
      }

      // repeated uint32 collection = 4;
      case 4: {
        if (tag == 32) {
         parse_collection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_collection())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_collection())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_collection;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinaryCastlePet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinaryCastlePet)
  return false;
#undef DO_
}

void BinaryCastlePet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinaryCastlePet)
  // repeated .CastlePetInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // repeated uint64 fightpet = 2;
  for (int i = 0; i < this->fightpet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->fightpet(i), output);
  }

  // repeated .CastleWorkPet workpet = 3;
  for (int i = 0; i < this->workpet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->workpet(i), output);
  }

  // repeated uint32 collection = 4;
  for (int i = 0; i < this->collection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->collection(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinaryCastlePet)
}

::google::protobuf::uint8* BinaryCastlePet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinaryCastlePet)
  // repeated .CastlePetInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // repeated uint64 fightpet = 2;
  for (int i = 0; i < this->fightpet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->fightpet(i), target);
  }

  // repeated .CastleWorkPet workpet = 3;
  for (int i = 0; i < this->workpet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->workpet(i), target);
  }

  // repeated uint32 collection = 4;
  for (int i = 0; i < this->collection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->collection(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinaryCastlePet)
  return target;
}

int BinaryCastlePet::ByteSize() const {
  int total_size = 0;

  // repeated .CastlePetInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated uint64 fightpet = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fightpet_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->fightpet(i));
    }
    total_size += 1 * this->fightpet_size() + data_size;
  }

  // repeated .CastleWorkPet workpet = 3;
  total_size += 1 * this->workpet_size();
  for (int i = 0; i < this->workpet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->workpet(i));
  }

  // repeated uint32 collection = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->collection_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->collection(i));
    }
    total_size += 1 * this->collection_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryCastlePet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryCastlePet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryCastlePet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryCastlePet::MergeFrom(const BinaryCastlePet& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  fightpet_.MergeFrom(from.fightpet_);
  workpet_.MergeFrom(from.workpet_);
  collection_.MergeFrom(from.collection_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryCastlePet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryCastlePet::CopyFrom(const BinaryCastlePet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryCastlePet::IsInitialized() const {

  return true;
}

void BinaryCastlePet::Swap(BinaryCastlePet* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    fightpet_.Swap(&other->fightpet_);
    workpet_.Swap(&other->workpet_);
    collection_.Swap(&other->collection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryCastlePet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryCastlePet_descriptor_;
  metadata.reflection = BinaryCastlePet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CastlePetState::kIidFieldNumber;
const int CastlePetState::kStateFieldNumber;
const int CastlePetState::kStateidFieldNumber;
#endif  // !_MSC_VER

CastlePetState::CastlePetState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CastlePetState)
}

void CastlePetState::InitAsDefaultInstance() {
}

CastlePetState::CastlePetState(const CastlePetState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CastlePetState)
}

void CastlePetState::SharedCtor() {
  _cached_size_ = 0;
  iid_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  stateid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CastlePetState::~CastlePetState() {
  // @@protoc_insertion_point(destructor:CastlePetState)
  SharedDtor();
}

void CastlePetState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CastlePetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastlePetState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CastlePetState_descriptor_;
}

const CastlePetState& CastlePetState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CastlePetState* CastlePetState::default_instance_ = NULL;

CastlePetState* CastlePetState::New() const {
  return new CastlePetState;
}

void CastlePetState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CastlePetState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(iid_, stateid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CastlePetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CastlePetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 iid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stateid;
        break;
      }

      // optional uint32 stateid = 3;
      case 3: {
        if (tag == 24) {
         parse_stateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CastlePetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CastlePetState)
  return false;
#undef DO_
}

void CastlePetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CastlePetState)
  // optional uint64 iid = 1;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->iid(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 stateid = 3;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CastlePetState)
}

::google::protobuf::uint8* CastlePetState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CastlePetState)
  // optional uint64 iid = 1;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->iid(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 stateid = 3;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CastlePetState)
  return target;
}

int CastlePetState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 iid = 1;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->iid());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 stateid = 3;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastlePetState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CastlePetState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CastlePetState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CastlePetState::MergeFrom(const CastlePetState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CastlePetState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastlePetState::CopyFrom(const CastlePetState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastlePetState::IsInitialized() const {

  return true;
}

void CastlePetState::Swap(CastlePetState* other) {
  if (other != this) {
    std::swap(iid_, other->iid_);
    std::swap(state_, other->state_);
    std::swap(stateid_, other->stateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CastlePetState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CastlePetState_descriptor_;
  metadata.reflection = CastlePetState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CastleStatueInfo::kIdFieldNumber;
const int CastleStatueInfo::kLevelFieldNumber;
const int CastleStatueInfo::kExpFieldNumber;
const int CastleStatueInfo::kSelectFieldNumber;
#endif  // !_MSC_VER

CastleStatueInfo::CastleStatueInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CastleStatueInfo)
}

void CastleStatueInfo::InitAsDefaultInstance() {
}

CastleStatueInfo::CastleStatueInfo(const CastleStatueInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CastleStatueInfo)
}

void CastleStatueInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  select_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CastleStatueInfo::~CastleStatueInfo() {
  // @@protoc_insertion_point(destructor:CastleStatueInfo)
  SharedDtor();
}

void CastleStatueInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CastleStatueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastleStatueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CastleStatueInfo_descriptor_;
}

const CastleStatueInfo& CastleStatueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CastleStatueInfo* CastleStatueInfo::default_instance_ = NULL;

CastleStatueInfo* CastleStatueInfo::New() const {
  return new CastleStatueInfo;
}

void CastleStatueInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CastleStatueInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, exp_);
    select_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CastleStatueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CastleStatueInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_select;
        break;
      }

      // optional bool select = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_select:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &select_)));
          set_has_select();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CastleStatueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CastleStatueInfo)
  return false;
#undef DO_
}

void CastleStatueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CastleStatueInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional bool select = 4 [default = true];
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->select(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CastleStatueInfo)
}

::google::protobuf::uint8* CastleStatueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CastleStatueInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional bool select = 4 [default = true];
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->select(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CastleStatueInfo)
  return target;
}

int CastleStatueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional bool select = 4 [default = true];
    if (has_select()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastleStatueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CastleStatueInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CastleStatueInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CastleStatueInfo::MergeFrom(const CastleStatueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_select()) {
      set_select(from.select());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CastleStatueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastleStatueInfo::CopyFrom(const CastleStatueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastleStatueInfo::IsInitialized() const {

  return true;
}

void CastleStatueInfo::Swap(CastleStatueInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(select_, other->select_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CastleStatueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CastleStatueInfo_descriptor_;
  metadata.reflection = CastleStatueInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryCastleStatue::kInfoFieldNumber;
const int BinaryCastleStatue::kSelectFieldNumber;
const int BinaryCastleStatue::kSkillFieldNumber;
#endif  // !_MSC_VER

BinaryCastleStatue::BinaryCastleStatue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinaryCastleStatue)
}

void BinaryCastleStatue::InitAsDefaultInstance() {
}

BinaryCastleStatue::BinaryCastleStatue(const BinaryCastleStatue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BinaryCastleStatue)
}

void BinaryCastleStatue::SharedCtor() {
  _cached_size_ = 0;
  select_ = 0u;
  skill_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryCastleStatue::~BinaryCastleStatue() {
  // @@protoc_insertion_point(destructor:BinaryCastleStatue)
  SharedDtor();
}

void BinaryCastleStatue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryCastleStatue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryCastleStatue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryCastleStatue_descriptor_;
}

const BinaryCastleStatue& BinaryCastleStatue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BinaryCastleStatue* BinaryCastleStatue::default_instance_ = NULL;

BinaryCastleStatue* BinaryCastleStatue::New() const {
  return new BinaryCastleStatue;
}

void BinaryCastleStatue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BinaryCastleStatue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(select_, skill_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryCastleStatue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinaryCastleStatue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CastleStatueInfo info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_select;
        break;
      }

      // optional uint32 select = 2;
      case 2: {
        if (tag == 16) {
         parse_select:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &select_)));
          set_has_select();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skill;
        break;
      }

      // optional uint32 skill = 3;
      case 3: {
        if (tag == 24) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinaryCastleStatue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinaryCastleStatue)
  return false;
#undef DO_
}

void BinaryCastleStatue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinaryCastleStatue)
  // repeated .CastleStatueInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional uint32 select = 2;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->select(), output);
  }

  // optional uint32 skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinaryCastleStatue)
}

::google::protobuf::uint8* BinaryCastleStatue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinaryCastleStatue)
  // repeated .CastleStatueInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional uint32 select = 2;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->select(), target);
  }

  // optional uint32 skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinaryCastleStatue)
  return target;
}

int BinaryCastleStatue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 select = 2;
    if (has_select()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->select());
    }

    // optional uint32 skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill());
    }

  }
  // repeated .CastleStatueInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryCastleStatue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryCastleStatue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryCastleStatue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryCastleStatue::MergeFrom(const BinaryCastleStatue& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_select()) {
      set_select(from.select());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryCastleStatue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryCastleStatue::CopyFrom(const BinaryCastleStatue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryCastleStatue::IsInitialized() const {

  return true;
}

void BinaryCastleStatue::Swap(BinaryCastleStatue* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(select_, other->select_);
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryCastleStatue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryCastleStatue_descriptor_;
  metadata.reflection = BinaryCastleStatue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaceSkill::kSrcskillFieldNumber;
const int ReplaceSkill::kDesskillFieldNumber;
const int ReplaceSkill::kStudysuccFieldNumber;
#endif  // !_MSC_VER

ReplaceSkill::ReplaceSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReplaceSkill)
}

void ReplaceSkill::InitAsDefaultInstance() {
}

ReplaceSkill::ReplaceSkill(const ReplaceSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReplaceSkill)
}

void ReplaceSkill::SharedCtor() {
  _cached_size_ = 0;
  srcskill_ = 0u;
  desskill_ = 0u;
  studysucc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceSkill::~ReplaceSkill() {
  // @@protoc_insertion_point(destructor:ReplaceSkill)
  SharedDtor();
}

void ReplaceSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplaceSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplaceSkill_descriptor_;
}

const ReplaceSkill& ReplaceSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ReplaceSkill* ReplaceSkill::default_instance_ = NULL;

ReplaceSkill* ReplaceSkill::New() const {
  return new ReplaceSkill;
}

void ReplaceSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplaceSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(srcskill_, studysucc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplaceSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReplaceSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 srcskill = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcskill_)));
          set_has_srcskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_desskill;
        break;
      }

      // optional uint32 desskill = 2;
      case 2: {
        if (tag == 16) {
         parse_desskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desskill_)));
          set_has_desskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_studysucc;
        break;
      }

      // optional uint32 studysucc = 3;
      case 3: {
        if (tag == 24) {
         parse_studysucc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &studysucc_)));
          set_has_studysucc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReplaceSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReplaceSkill)
  return false;
#undef DO_
}

void ReplaceSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReplaceSkill)
  // optional uint32 srcskill = 1;
  if (has_srcskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcskill(), output);
  }

  // optional uint32 desskill = 2;
  if (has_desskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->desskill(), output);
  }

  // optional uint32 studysucc = 3;
  if (has_studysucc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->studysucc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReplaceSkill)
}

::google::protobuf::uint8* ReplaceSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReplaceSkill)
  // optional uint32 srcskill = 1;
  if (has_srcskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcskill(), target);
  }

  // optional uint32 desskill = 2;
  if (has_desskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->desskill(), target);
  }

  // optional uint32 studysucc = 3;
  if (has_studysucc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->studysucc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReplaceSkill)
  return target;
}

int ReplaceSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 srcskill = 1;
    if (has_srcskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcskill());
    }

    // optional uint32 desskill = 2;
    if (has_desskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desskill());
    }

    // optional uint32 studysucc = 3;
    if (has_studysucc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->studysucc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplaceSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplaceSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplaceSkill::MergeFrom(const ReplaceSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcskill()) {
      set_srcskill(from.srcskill());
    }
    if (from.has_desskill()) {
      set_desskill(from.desskill());
    }
    if (from.has_studysucc()) {
      set_studysucc(from.studysucc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplaceSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceSkill::CopyFrom(const ReplaceSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceSkill::IsInitialized() const {

  return true;
}

void ReplaceSkill::Swap(ReplaceSkill* other) {
  if (other != this) {
    std::swap(srcskill_, other->srcskill_);
    std::swap(desskill_, other->desskill_);
    std::swap(studysucc_, other->studysucc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplaceSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplaceSkill_descriptor_;
  metadata.reflection = ReplaceSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelicUserPos::kUseridFieldNumber;
const int RelicUserPos::kXFieldNumber;
const int RelicUserPos::kYFieldNumber;
const int RelicUserPos::kSeptidFieldNumber;
#endif  // !_MSC_VER

RelicUserPos::RelicUserPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RelicUserPos)
}

void RelicUserPos::InitAsDefaultInstance() {
}

RelicUserPos::RelicUserPos(const RelicUserPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RelicUserPos)
}

void RelicUserPos::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  septid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelicUserPos::~RelicUserPos() {
  // @@protoc_insertion_point(destructor:RelicUserPos)
  SharedDtor();
}

void RelicUserPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelicUserPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelicUserPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelicUserPos_descriptor_;
}

const RelicUserPos& RelicUserPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RelicUserPos* RelicUserPos::default_instance_ = NULL;

RelicUserPos* RelicUserPos::New() const {
  return new RelicUserPos;
}

void RelicUserPos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RelicUserPos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, septid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelicUserPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RelicUserPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional uint32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional uint32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_septid;
        break;
      }

      // optional uint32 septid = 4;
      case 4: {
        if (tag == 32) {
         parse_septid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septid_)));
          set_has_septid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RelicUserPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RelicUserPos)
  return false;
#undef DO_
}

void RelicUserPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RelicUserPos)
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // optional uint32 septid = 4;
  if (has_septid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->septid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RelicUserPos)
}

::google::protobuf::uint8* RelicUserPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RelicUserPos)
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional uint32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // optional uint32 septid = 4;
  if (has_septid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->septid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RelicUserPos)
  return target;
}

int RelicUserPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 septid = 4;
    if (has_septid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelicUserPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelicUserPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelicUserPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelicUserPos::MergeFrom(const RelicUserPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_septid()) {
      set_septid(from.septid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelicUserPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelicUserPos::CopyFrom(const RelicUserPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelicUserPos::IsInitialized() const {

  return true;
}

void RelicUserPos::Swap(RelicUserPos* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(septid_, other->septid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelicUserPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelicUserPos_descriptor_;
  metadata.reflection = RelicUserPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RiskTaskInfo::kTaskFieldNumber;
const int RiskTaskInfo::kLevelFieldNumber;
const int RiskTaskInfo::kStateFieldNumber;
#endif  // !_MSC_VER

RiskTaskInfo::RiskTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RiskTaskInfo)
}

void RiskTaskInfo::InitAsDefaultInstance() {
}

RiskTaskInfo::RiskTaskInfo(const RiskTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RiskTaskInfo)
}

void RiskTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  task_ = 0u;
  level_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskTaskInfo::~RiskTaskInfo() {
  // @@protoc_insertion_point(destructor:RiskTaskInfo)
  SharedDtor();
}

void RiskTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RiskTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskTaskInfo_descriptor_;
}

const RiskTaskInfo& RiskTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RiskTaskInfo* RiskTaskInfo::default_instance_ = NULL;

RiskTaskInfo* RiskTaskInfo::New() const {
  return new RiskTaskInfo;
}

void RiskTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RiskTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(task_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RiskTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_)));
          set_has_task();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RiskTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RiskTaskInfo)
  return false;
#undef DO_
}

void RiskTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RiskTaskInfo)
  // optional uint32 task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RiskTaskInfo)
}

::google::protobuf::uint8* RiskTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RiskTaskInfo)
  // optional uint32 task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RiskTaskInfo)
  return target;
}

int RiskTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskTaskInfo::MergeFrom(const RiskTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      set_task(from.task());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskTaskInfo::CopyFrom(const RiskTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskTaskInfo::IsInitialized() const {

  return true;
}

void RiskTaskInfo::Swap(RiskTaskInfo* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(level_, other->level_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskTaskInfo_descriptor_;
  metadata.reflection = RiskTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryRiskTaskInfo::kTimeFieldNumber;
const int BinaryRiskTaskInfo::kInfoFieldNumber;
const int BinaryRiskTaskInfo::kNumFieldNumber;
#endif  // !_MSC_VER

BinaryRiskTaskInfo::BinaryRiskTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinaryRiskTaskInfo)
}

void BinaryRiskTaskInfo::InitAsDefaultInstance() {
}

BinaryRiskTaskInfo::BinaryRiskTaskInfo(const BinaryRiskTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BinaryRiskTaskInfo)
}

void BinaryRiskTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryRiskTaskInfo::~BinaryRiskTaskInfo() {
  // @@protoc_insertion_point(destructor:BinaryRiskTaskInfo)
  SharedDtor();
}

void BinaryRiskTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryRiskTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryRiskTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryRiskTaskInfo_descriptor_;
}

const BinaryRiskTaskInfo& BinaryRiskTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BinaryRiskTaskInfo* BinaryRiskTaskInfo::default_instance_ = NULL;

BinaryRiskTaskInfo* BinaryRiskTaskInfo::New() const {
  return new BinaryRiskTaskInfo;
}

void BinaryRiskTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BinaryRiskTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryRiskTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinaryRiskTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .RiskTaskInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinaryRiskTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinaryRiskTaskInfo)
  return false;
#undef DO_
}

void BinaryRiskTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinaryRiskTaskInfo)
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // repeated .RiskTaskInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinaryRiskTaskInfo)
}

::google::protobuf::uint8* BinaryRiskTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinaryRiskTaskInfo)
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // repeated .RiskTaskInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinaryRiskTaskInfo)
  return target;
}

int BinaryRiskTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated .RiskTaskInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryRiskTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryRiskTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryRiskTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryRiskTaskInfo::MergeFrom(const BinaryRiskTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryRiskTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryRiskTaskInfo::CopyFrom(const BinaryRiskTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryRiskTaskInfo::IsInitialized() const {

  return true;
}

void BinaryRiskTaskInfo::Swap(BinaryRiskTaskInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    info_.Swap(&other->info_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryRiskTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryRiskTaskInfo_descriptor_;
  metadata.reflection = BinaryRiskTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LifeSkillInfo::kIdFieldNumber;
const int LifeSkillInfo::kLevelFieldNumber;
const int LifeSkillInfo::kStageFieldNumber;
#endif  // !_MSC_VER

LifeSkillInfo::LifeSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LifeSkillInfo)
}

void LifeSkillInfo::InitAsDefaultInstance() {
}

LifeSkillInfo::LifeSkillInfo(const LifeSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LifeSkillInfo)
}

void LifeSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LifeSkillInfo::~LifeSkillInfo() {
  // @@protoc_insertion_point(destructor:LifeSkillInfo)
  SharedDtor();
}

void LifeSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LifeSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LifeSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LifeSkillInfo_descriptor_;
}

const LifeSkillInfo& LifeSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LifeSkillInfo* LifeSkillInfo::default_instance_ = NULL;

LifeSkillInfo* LifeSkillInfo::New() const {
  return new LifeSkillInfo;
}

void LifeSkillInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LifeSkillInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, stage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LifeSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LifeSkillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stage;
        break;
      }

      // optional uint32 stage = 3;
      case 3: {
        if (tag == 24) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LifeSkillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LifeSkillInfo)
  return false;
#undef DO_
}

void LifeSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LifeSkillInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 stage = 3;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LifeSkillInfo)
}

::google::protobuf::uint8* LifeSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LifeSkillInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 stage = 3;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LifeSkillInfo)
  return target;
}

int LifeSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 stage = 3;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LifeSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LifeSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LifeSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LifeSkillInfo::MergeFrom(const LifeSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LifeSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LifeSkillInfo::CopyFrom(const LifeSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LifeSkillInfo::IsInitialized() const {

  return true;
}

void LifeSkillInfo::Swap(LifeSkillInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LifeSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LifeSkillInfo_descriptor_;
  metadata.reflection = LifeSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryLifeSkill::kInfoFieldNumber;
#endif  // !_MSC_VER

BinaryLifeSkill::BinaryLifeSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BinaryLifeSkill)
}

void BinaryLifeSkill::InitAsDefaultInstance() {
}

BinaryLifeSkill::BinaryLifeSkill(const BinaryLifeSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BinaryLifeSkill)
}

void BinaryLifeSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryLifeSkill::~BinaryLifeSkill() {
  // @@protoc_insertion_point(destructor:BinaryLifeSkill)
  SharedDtor();
}

void BinaryLifeSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryLifeSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryLifeSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryLifeSkill_descriptor_;
}

const BinaryLifeSkill& BinaryLifeSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BinaryLifeSkill* BinaryLifeSkill::default_instance_ = NULL;

BinaryLifeSkill* BinaryLifeSkill::New() const {
  return new BinaryLifeSkill;
}

void BinaryLifeSkill::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryLifeSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BinaryLifeSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LifeSkillInfo info = 1;
      case 1: {
        if (tag == 10) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BinaryLifeSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BinaryLifeSkill)
  return false;
#undef DO_
}

void BinaryLifeSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BinaryLifeSkill)
  // repeated .LifeSkillInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BinaryLifeSkill)
}

::google::protobuf::uint8* BinaryLifeSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BinaryLifeSkill)
  // repeated .LifeSkillInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BinaryLifeSkill)
  return target;
}

int BinaryLifeSkill::ByteSize() const {
  int total_size = 0;

  // repeated .LifeSkillInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryLifeSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryLifeSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryLifeSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryLifeSkill::MergeFrom(const BinaryLifeSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryLifeSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryLifeSkill::CopyFrom(const BinaryLifeSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryLifeSkill::IsInitialized() const {

  return true;
}

void BinaryLifeSkill::Swap(BinaryLifeSkill* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryLifeSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryLifeSkill_descriptor_;
  metadata.reflection = BinaryLifeSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayGuideInfo::kIdFieldNumber;
const int DayGuideInfo::kTargettimesFieldNumber;
const int DayGuideInfo::kCurtimesFieldNumber;
const int DayGuideInfo::kPara1FieldNumber;
const int DayGuideInfo::kPara2FieldNumber;
const int DayGuideInfo::kPara3FieldNumber;
const int DayGuideInfo::kAcceptbonusFieldNumber;
const int DayGuideInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

DayGuideInfo::DayGuideInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DayGuideInfo)
}

void DayGuideInfo::InitAsDefaultInstance() {
}

DayGuideInfo::DayGuideInfo(const DayGuideInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DayGuideInfo)
}

void DayGuideInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  targettimes_ = 0u;
  curtimes_ = 0u;
  para1_ = 0u;
  para2_ = 0u;
  para3_ = 0u;
  acceptbonus_ = false;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayGuideInfo::~DayGuideInfo() {
  // @@protoc_insertion_point(destructor:DayGuideInfo)
  SharedDtor();
}

void DayGuideInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayGuideInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayGuideInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayGuideInfo_descriptor_;
}

const DayGuideInfo& DayGuideInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

DayGuideInfo* DayGuideInfo::default_instance_ = NULL;

DayGuideInfo* DayGuideInfo::New() const {
  return new DayGuideInfo;
}

void DayGuideInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DayGuideInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayGuideInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DayGuideInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targettimes;
        break;
      }

      // optional uint32 targettimes = 2;
      case 2: {
        if (tag == 16) {
         parse_targettimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettimes_)));
          set_has_targettimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curtimes;
        break;
      }

      // optional uint32 curtimes = 3;
      case 3: {
        if (tag == 24) {
         parse_curtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtimes_)));
          set_has_curtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_para1;
        break;
      }

      // optional uint32 para1 = 4;
      case 4: {
        if (tag == 32) {
         parse_para1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para1_)));
          set_has_para1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_para2;
        break;
      }

      // optional uint32 para2 = 5;
      case 5: {
        if (tag == 40) {
         parse_para2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para2_)));
          set_has_para2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_para3;
        break;
      }

      // optional uint32 para3 = 6;
      case 6: {
        if (tag == 48) {
         parse_para3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para3_)));
          set_has_para3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_acceptbonus;
        break;
      }

      // optional bool acceptbonus = 7;
      case 7: {
        if (tag == 56) {
         parse_acceptbonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acceptbonus_)));
          set_has_acceptbonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DayGuideInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DayGuideInfo)
  return false;
#undef DO_
}

void DayGuideInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DayGuideInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 targettimes = 2;
  if (has_targettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targettimes(), output);
  }

  // optional uint32 curtimes = 3;
  if (has_curtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curtimes(), output);
  }

  // optional uint32 para1 = 4;
  if (has_para1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->para1(), output);
  }

  // optional uint32 para2 = 5;
  if (has_para2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->para2(), output);
  }

  // optional uint32 para3 = 6;
  if (has_para3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->para3(), output);
  }

  // optional bool acceptbonus = 7;
  if (has_acceptbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->acceptbonus(), output);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DayGuideInfo)
}

::google::protobuf::uint8* DayGuideInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DayGuideInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 targettimes = 2;
  if (has_targettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targettimes(), target);
  }

  // optional uint32 curtimes = 3;
  if (has_curtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curtimes(), target);
  }

  // optional uint32 para1 = 4;
  if (has_para1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->para1(), target);
  }

  // optional uint32 para2 = 5;
  if (has_para2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->para2(), target);
  }

  // optional uint32 para3 = 6;
  if (has_para3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->para3(), target);
  }

  // optional bool acceptbonus = 7;
  if (has_acceptbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->acceptbonus(), target);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DayGuideInfo)
  return target;
}

int DayGuideInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 targettimes = 2;
    if (has_targettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettimes());
    }

    // optional uint32 curtimes = 3;
    if (has_curtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtimes());
    }

    // optional uint32 para1 = 4;
    if (has_para1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para1());
    }

    // optional uint32 para2 = 5;
    if (has_para2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para2());
    }

    // optional uint32 para3 = 6;
    if (has_para3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para3());
    }

    // optional bool acceptbonus = 7;
    if (has_acceptbonus()) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayGuideInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayGuideInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayGuideInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayGuideInfo::MergeFrom(const DayGuideInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_targettimes()) {
      set_targettimes(from.targettimes());
    }
    if (from.has_curtimes()) {
      set_curtimes(from.curtimes());
    }
    if (from.has_para1()) {
      set_para1(from.para1());
    }
    if (from.has_para2()) {
      set_para2(from.para2());
    }
    if (from.has_para3()) {
      set_para3(from.para3());
    }
    if (from.has_acceptbonus()) {
      set_acceptbonus(from.acceptbonus());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayGuideInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayGuideInfo::CopyFrom(const DayGuideInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayGuideInfo::IsInitialized() const {

  return true;
}

void DayGuideInfo::Swap(DayGuideInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(targettimes_, other->targettimes_);
    std::swap(curtimes_, other->curtimes_);
    std::swap(para1_, other->para1_);
    std::swap(para2_, other->para2_);
    std::swap(para3_, other->para3_);
    std::swap(acceptbonus_, other->acceptbonus_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayGuideInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayGuideInfo_descriptor_;
  metadata.reflection = DayGuideInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleData::kIdFieldNumber;
const int TitleData::kTimeFieldNumber;
#endif  // !_MSC_VER

TitleData::TitleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TitleData)
}

void TitleData::InitAsDefaultInstance() {
}

TitleData::TitleData(const TitleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TitleData)
}

void TitleData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleData::~TitleData() {
  // @@protoc_insertion_point(destructor:TitleData)
  SharedDtor();
}

void TitleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleData_descriptor_;
}

const TitleData& TitleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TitleData* TitleData::default_instance_ = NULL;

TitleData* TitleData::New() const {
  return new TitleData;
}

void TitleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TitleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TitleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TitleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TitleData)
  return false;
#undef DO_
}

void TitleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TitleData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TitleData)
}

::google::protobuf::uint8* TitleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TitleData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TitleData)
  return target;
}

int TitleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleData::MergeFrom(const TitleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleData::CopyFrom(const TitleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleData::IsInitialized() const {

  return true;
}

void TitleData::Swap(TitleData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleData_descriptor_;
  metadata.reflection = TitleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonthCardData::kIdFieldNumber;
const int MonthCardData::kBuytimeFieldNumber;
const int MonthCardData::kObtaintimeFieldNumber;
const int MonthCardData::kStatusFieldNumber;
#endif  // !_MSC_VER

MonthCardData::MonthCardData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MonthCardData)
}

void MonthCardData::InitAsDefaultInstance() {
}

MonthCardData::MonthCardData(const MonthCardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MonthCardData)
}

void MonthCardData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buytime_ = 0u;
  obtaintime_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthCardData::~MonthCardData() {
  // @@protoc_insertion_point(destructor:MonthCardData)
  SharedDtor();
}

void MonthCardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonthCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonthCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonthCardData_descriptor_;
}

const MonthCardData& MonthCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MonthCardData* MonthCardData::default_instance_ = NULL;

MonthCardData* MonthCardData::New() const {
  return new MonthCardData;
}

void MonthCardData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MonthCardData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonthCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MonthCardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buytime;
        break;
      }

      // optional uint32 buytime = 2;
      case 2: {
        if (tag == 16) {
         parse_buytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_obtaintime;
        break;
      }

      // optional uint32 obtaintime = 3;
      case 3: {
        if (tag == 24) {
         parse_obtaintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obtaintime_)));
          set_has_obtaintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MonthCardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MonthCardData)
  return false;
#undef DO_
}

void MonthCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MonthCardData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 buytime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buytime(), output);
  }

  // optional uint32 obtaintime = 3;
  if (has_obtaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->obtaintime(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MonthCardData)
}

::google::protobuf::uint8* MonthCardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MonthCardData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 buytime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buytime(), target);
  }

  // optional uint32 obtaintime = 3;
  if (has_obtaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->obtaintime(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MonthCardData)
  return target;
}

int MonthCardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 buytime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buytime());
    }

    // optional uint32 obtaintime = 3;
    if (has_obtaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obtaintime());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthCardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonthCardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonthCardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonthCardData::MergeFrom(const MonthCardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
    if (from.has_obtaintime()) {
      set_obtaintime(from.obtaintime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonthCardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthCardData::CopyFrom(const MonthCardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthCardData::IsInitialized() const {

  return true;
}

void MonthCardData::Swap(MonthCardData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buytime_, other->buytime_);
    std::swap(obtaintime_, other->obtaintime_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonthCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonthCardData_descriptor_;
  metadata.reflection = MonthCardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingSystemData::kLevelFieldNumber;
const int WingSystemData::kAttphyminFieldNumber;
const int WingSystemData::kAttphymaxFieldNumber;
const int WingSystemData::kPhydefFieldNumber;
const int WingSystemData::kMagdefFieldNumber;
const int WingSystemData::kHpFieldNumber;
const int WingSystemData::kMpFieldNumber;
const int WingSystemData::kEnhancemaxtimesFieldNumber;
const int WingSystemData::kEnhancemintimesFieldNumber;
const int WingSystemData::kReleaseskillsFieldNumber;
const int WingSystemData::kFightingFieldNumber;
const int WingSystemData::kCurexpFieldNumber;
const int WingSystemData::kMaxexpFieldNumber;
const int WingSystemData::kAttmagminFieldNumber;
const int WingSystemData::kAttmagmaxFieldNumber;
const int WingSystemData::kLefttimesFieldNumber;
const int WingSystemData::kOpenFieldNumber;
#endif  // !_MSC_VER

WingSystemData::WingSystemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WingSystemData)
}

void WingSystemData::InitAsDefaultInstance() {
}

WingSystemData::WingSystemData(const WingSystemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WingSystemData)
}

void WingSystemData::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  attphymin_ = 0u;
  attphymax_ = 0u;
  phydef_ = 0u;
  magdef_ = 0u;
  hp_ = 0u;
  mp_ = 0u;
  enhancemaxtimes_ = 0u;
  enhancemintimes_ = 0u;
  fighting_ = 0u;
  curexp_ = GOOGLE_ULONGLONG(0);
  maxexp_ = GOOGLE_ULONGLONG(0);
  attmagmin_ = 0u;
  attmagmax_ = 0u;
  lefttimes_ = 0u;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingSystemData::~WingSystemData() {
  // @@protoc_insertion_point(destructor:WingSystemData)
  SharedDtor();
}

void WingSystemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingSystemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingSystemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingSystemData_descriptor_;
}

const WingSystemData& WingSystemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

WingSystemData* WingSystemData::default_instance_ = NULL;

WingSystemData* WingSystemData::New() const {
  return new WingSystemData;
}

void WingSystemData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WingSystemData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, enhancemaxtimes_);
  }
  if (_has_bits_[8 / 32] & 64768) {
    ZR_(enhancemintimes_, lefttimes_);
  }
  open_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  releaseskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingSystemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WingSystemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attphymin;
        break;
      }

      // optional uint32 attphymin = 2;
      case 2: {
        if (tag == 16) {
         parse_attphymin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attphymin_)));
          set_has_attphymin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attphymax;
        break;
      }

      // optional uint32 attphymax = 3;
      case 3: {
        if (tag == 24) {
         parse_attphymax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attphymax_)));
          set_has_attphymax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_phydef;
        break;
      }

      // optional uint32 phydef = 4;
      case 4: {
        if (tag == 32) {
         parse_phydef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phydef_)));
          set_has_phydef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_magdef;
        break;
      }

      // optional uint32 magdef = 5;
      case 5: {
        if (tag == 40) {
         parse_magdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magdef_)));
          set_has_magdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 6;
      case 6: {
        if (tag == 48) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 7;
      case 7: {
        if (tag == 56) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_enhancemaxtimes;
        break;
      }

      // optional uint32 enhancemaxtimes = 8;
      case 8: {
        if (tag == 64) {
         parse_enhancemaxtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhancemaxtimes_)));
          set_has_enhancemaxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_enhancemintimes;
        break;
      }

      // optional uint32 enhancemintimes = 9;
      case 9: {
        if (tag == 72) {
         parse_enhancemintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhancemintimes_)));
          set_has_enhancemintimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_releaseskills;
        break;
      }

      // repeated uint32 releaseskills = 10;
      case 10: {
        if (tag == 80) {
         parse_releaseskills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_releaseskills())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_releaseskills())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_releaseskills;
        if (input->ExpectTag(88)) goto parse_fighting;
        break;
      }

      // optional uint32 fighting = 11;
      case 11: {
        if (tag == 88) {
         parse_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_)));
          set_has_fighting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_curexp;
        break;
      }

      // optional uint64 curexp = 12;
      case 12: {
        if (tag == 96) {
         parse_curexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_maxexp;
        break;
      }

      // optional uint64 maxexp = 13;
      case 13: {
        if (tag == 104) {
         parse_maxexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxexp_)));
          set_has_maxexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_attmagmin;
        break;
      }

      // optional uint32 attmagmin = 14;
      case 14: {
        if (tag == 112) {
         parse_attmagmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmagmin_)));
          set_has_attmagmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_attmagmax;
        break;
      }

      // optional uint32 attmagmax = 15;
      case 15: {
        if (tag == 120) {
         parse_attmagmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attmagmax_)));
          set_has_attmagmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_lefttimes;
        break;
      }

      // optional uint32 lefttimes = 16;
      case 16: {
        if (tag == 128) {
         parse_lefttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttimes_)));
          set_has_lefttimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_open;
        break;
      }

      // optional bool open = 17;
      case 17: {
        if (tag == 136) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WingSystemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WingSystemData)
  return false;
#undef DO_
}

void WingSystemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WingSystemData)
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 attphymin = 2;
  if (has_attphymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attphymin(), output);
  }

  // optional uint32 attphymax = 3;
  if (has_attphymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attphymax(), output);
  }

  // optional uint32 phydef = 4;
  if (has_phydef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->phydef(), output);
  }

  // optional uint32 magdef = 5;
  if (has_magdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->magdef(), output);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hp(), output);
  }

  // optional uint32 mp = 7;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mp(), output);
  }

  // optional uint32 enhancemaxtimes = 8;
  if (has_enhancemaxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->enhancemaxtimes(), output);
  }

  // optional uint32 enhancemintimes = 9;
  if (has_enhancemintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->enhancemintimes(), output);
  }

  // repeated uint32 releaseskills = 10;
  for (int i = 0; i < this->releaseskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->releaseskills(i), output);
  }

  // optional uint32 fighting = 11;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->fighting(), output);
  }

  // optional uint64 curexp = 12;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->curexp(), output);
  }

  // optional uint64 maxexp = 13;
  if (has_maxexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->maxexp(), output);
  }

  // optional uint32 attmagmin = 14;
  if (has_attmagmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->attmagmin(), output);
  }

  // optional uint32 attmagmax = 15;
  if (has_attmagmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->attmagmax(), output);
  }

  // optional uint32 lefttimes = 16;
  if (has_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->lefttimes(), output);
  }

  // optional bool open = 17;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WingSystemData)
}

::google::protobuf::uint8* WingSystemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WingSystemData)
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 attphymin = 2;
  if (has_attphymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attphymin(), target);
  }

  // optional uint32 attphymax = 3;
  if (has_attphymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attphymax(), target);
  }

  // optional uint32 phydef = 4;
  if (has_phydef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->phydef(), target);
  }

  // optional uint32 magdef = 5;
  if (has_magdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->magdef(), target);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hp(), target);
  }

  // optional uint32 mp = 7;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mp(), target);
  }

  // optional uint32 enhancemaxtimes = 8;
  if (has_enhancemaxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->enhancemaxtimes(), target);
  }

  // optional uint32 enhancemintimes = 9;
  if (has_enhancemintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->enhancemintimes(), target);
  }

  // repeated uint32 releaseskills = 10;
  for (int i = 0; i < this->releaseskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->releaseskills(i), target);
  }

  // optional uint32 fighting = 11;
  if (has_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->fighting(), target);
  }

  // optional uint64 curexp = 12;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->curexp(), target);
  }

  // optional uint64 maxexp = 13;
  if (has_maxexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->maxexp(), target);
  }

  // optional uint32 attmagmin = 14;
  if (has_attmagmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->attmagmin(), target);
  }

  // optional uint32 attmagmax = 15;
  if (has_attmagmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->attmagmax(), target);
  }

  // optional uint32 lefttimes = 16;
  if (has_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->lefttimes(), target);
  }

  // optional bool open = 17;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WingSystemData)
  return target;
}

int WingSystemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 attphymin = 2;
    if (has_attphymin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attphymin());
    }

    // optional uint32 attphymax = 3;
    if (has_attphymax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attphymax());
    }

    // optional uint32 phydef = 4;
    if (has_phydef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phydef());
    }

    // optional uint32 magdef = 5;
    if (has_magdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magdef());
    }

    // optional uint32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 mp = 7;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 enhancemaxtimes = 8;
    if (has_enhancemaxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhancemaxtimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 enhancemintimes = 9;
    if (has_enhancemintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhancemintimes());
    }

    // optional uint32 fighting = 11;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting());
    }

    // optional uint64 curexp = 12;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curexp());
    }

    // optional uint64 maxexp = 13;
    if (has_maxexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxexp());
    }

    // optional uint32 attmagmin = 14;
    if (has_attmagmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmagmin());
    }

    // optional uint32 attmagmax = 15;
    if (has_attmagmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attmagmax());
    }

    // optional uint32 lefttimes = 16;
    if (has_lefttimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttimes());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool open = 17;
    if (has_open()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint32 releaseskills = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->releaseskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->releaseskills(i));
    }
    total_size += 1 * this->releaseskills_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingSystemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingSystemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingSystemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingSystemData::MergeFrom(const WingSystemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  releaseskills_.MergeFrom(from.releaseskills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_attphymin()) {
      set_attphymin(from.attphymin());
    }
    if (from.has_attphymax()) {
      set_attphymax(from.attphymax());
    }
    if (from.has_phydef()) {
      set_phydef(from.phydef());
    }
    if (from.has_magdef()) {
      set_magdef(from.magdef());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_enhancemaxtimes()) {
      set_enhancemaxtimes(from.enhancemaxtimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enhancemintimes()) {
      set_enhancemintimes(from.enhancemintimes());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
    if (from.has_maxexp()) {
      set_maxexp(from.maxexp());
    }
    if (from.has_attmagmin()) {
      set_attmagmin(from.attmagmin());
    }
    if (from.has_attmagmax()) {
      set_attmagmax(from.attmagmax());
    }
    if (from.has_lefttimes()) {
      set_lefttimes(from.lefttimes());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingSystemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingSystemData::CopyFrom(const WingSystemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingSystemData::IsInitialized() const {

  return true;
}

void WingSystemData::Swap(WingSystemData* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(attphymin_, other->attphymin_);
    std::swap(attphymax_, other->attphymax_);
    std::swap(phydef_, other->phydef_);
    std::swap(magdef_, other->magdef_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(enhancemaxtimes_, other->enhancemaxtimes_);
    std::swap(enhancemintimes_, other->enhancemintimes_);
    releaseskills_.Swap(&other->releaseskills_);
    std::swap(fighting_, other->fighting_);
    std::swap(curexp_, other->curexp_);
    std::swap(maxexp_, other->maxexp_);
    std::swap(attmagmin_, other->attmagmin_);
    std::swap(attmagmax_, other->attmagmax_);
    std::swap(lefttimes_, other->lefttimes_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingSystemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingSystemData_descriptor_;
  metadata.reflection = WingSystemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatHurtData::kHurtFieldNumber;
const int StatHurtData::kNameFieldNumber;
#endif  // !_MSC_VER

StatHurtData::StatHurtData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatHurtData)
}

void StatHurtData::InitAsDefaultInstance() {
}

StatHurtData::StatHurtData(const StatHurtData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StatHurtData)
}

void StatHurtData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hurt_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatHurtData::~StatHurtData() {
  // @@protoc_insertion_point(destructor:StatHurtData)
  SharedDtor();
}

void StatHurtData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StatHurtData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatHurtData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatHurtData_descriptor_;
}

const StatHurtData& StatHurtData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StatHurtData* StatHurtData::default_instance_ = NULL;

StatHurtData* StatHurtData::New() const {
  return new StatHurtData;
}

void StatHurtData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    hurt_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatHurtData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StatHurtData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hurt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StatHurtData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StatHurtData)
  return false;
#undef DO_
}

void StatHurtData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StatHurtData)
  // optional uint32 hurt = 1;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hurt(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StatHurtData)
}

::google::protobuf::uint8* StatHurtData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatHurtData)
  // optional uint32 hurt = 1;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hurt(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatHurtData)
  return target;
}

int StatHurtData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hurt = 1;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatHurtData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatHurtData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatHurtData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatHurtData::MergeFrom(const StatHurtData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatHurtData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatHurtData::CopyFrom(const StatHurtData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatHurtData::IsInitialized() const {

  return true;
}

void StatHurtData::Swap(StatHurtData* other) {
  if (other != this) {
    std::swap(hurt_, other->hurt_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatHurtData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatHurtData_descriptor_;
  metadata.reflection = StatHurtData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleInfo::kIdFieldNumber;
const int TitleInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

TitleInfo::TitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TitleInfo)
}

void TitleInfo::InitAsDefaultInstance() {
}

TitleInfo::TitleInfo(const TitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TitleInfo)
}

void TitleInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleInfo::~TitleInfo() {
  // @@protoc_insertion_point(destructor:TitleInfo)
  SharedDtor();
}

void TitleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleInfo_descriptor_;
}

const TitleInfo& TitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TitleInfo* TitleInfo::default_instance_ = NULL;

TitleInfo* TitleInfo::New() const {
  return new TitleInfo;
}

void TitleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TitleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TitleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TitleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TitleInfo)
  return false;
#undef DO_
}

void TitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TitleInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TitleInfo)
}

::google::protobuf::uint8* TitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TitleInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TitleInfo)
  return target;
}

int TitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleInfo::MergeFrom(const TitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleInfo::CopyFrom(const TitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleInfo::IsInitialized() const {

  return true;
}

void TitleInfo::Swap(TitleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleInfo_descriptor_;
  metadata.reflection = TitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kIdFieldNumber;
const int ItemInfo::kNumFieldNumber;
const int ItemInfo::kBindFieldNumber;
const int ItemInfo::kKindFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ItemInfo)
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  bind_ = 0u;
  kind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, kind_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional uint32 bind = 3;
      case 3: {
        if (tag == 24) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kind;
        break;
      }

      // optional uint32 kind = 4;
      case 4: {
        if (tag == 32) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ItemInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bind(), output);
  }

  // optional uint32 kind = 4;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bind(), target);
  }

  // optional uint32 kind = 4;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind());
    }

    // optional uint32 kind = 4;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(bind_, other->bind_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitShopData::kIdFieldNumber;
const int LimitShopData::kNameFieldNumber;
const int LimitShopData::kPriceFieldNumber;
const int LimitShopData::kItemdataFieldNumber;
#endif  // !_MSC_VER

LimitShopData::LimitShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LimitShopData)
}

void LimitShopData::InitAsDefaultInstance() {
}

LimitShopData::LimitShopData(const LimitShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LimitShopData)
}

void LimitShopData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitShopData::~LimitShopData() {
  // @@protoc_insertion_point(destructor:LimitShopData)
  SharedDtor();
}

void LimitShopData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LimitShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitShopData_descriptor_;
}

const LimitShopData& LimitShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LimitShopData* LimitShopData::default_instance_ = NULL;

LimitShopData* LimitShopData::New() const {
  return new LimitShopData;
}

void LimitShopData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LimitShopData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, price_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LimitShopData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional uint32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemdata;
        break;
      }

      // repeated .ItemInfo itemdata = 4;
      case 4: {
        if (tag == 34) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemdata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LimitShopData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LimitShopData)
  return false;
#undef DO_
}

void LimitShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LimitShopData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // repeated .ItemInfo itemdata = 4;
  for (int i = 0; i < this->itemdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LimitShopData)
}

::google::protobuf::uint8* LimitShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LimitShopData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // repeated .ItemInfo itemdata = 4;
  for (int i = 0; i < this->itemdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LimitShopData)
  return target;
}

int LimitShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  // repeated .ItemInfo itemdata = 4;
  total_size += 1 * this->itemdata_size();
  for (int i = 0; i < this->itemdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitShopData::MergeFrom(const LimitShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemdata_.MergeFrom(from.itemdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitShopData::CopyFrom(const LimitShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitShopData::IsInitialized() const {

  return true;
}

void LimitShopData::Swap(LimitShopData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(price_, other->price_);
    itemdata_.Swap(&other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitShopData_descriptor_;
  metadata.reflection = LimitShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FundData::kHasbuyFieldNumber;
const int FundData::kLevelfundFieldNumber;
#endif  // !_MSC_VER

FundData::FundData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FundData)
}

void FundData::InitAsDefaultInstance() {
}

FundData::FundData(const FundData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FundData)
}

void FundData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FundData::~FundData() {
  // @@protoc_insertion_point(destructor:FundData)
  SharedDtor();
}

void FundData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FundData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FundData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FundData_descriptor_;
}

const FundData& FundData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FundData* FundData::default_instance_ = NULL;

FundData* FundData::New() const {
  return new FundData;
}

void FundData::Clear() {
  hasbuy_.Clear();
  levelfund_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FundData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FundData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hasbuy = 1;
      case 1: {
        if (tag == 8) {
         parse_hasbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_hasbuy())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hasbuy())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_hasbuy;
        if (input->ExpectTag(18)) goto parse_levelfund;
        break;
      }

      // repeated .PairDataDWORD levelfund = 2;
      case 2: {
        if (tag == 18) {
         parse_levelfund:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelfund()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_levelfund;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FundData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FundData)
  return false;
#undef DO_
}

void FundData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FundData)
  // repeated uint32 hasbuy = 1;
  for (int i = 0; i < this->hasbuy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->hasbuy(i), output);
  }

  // repeated .PairDataDWORD levelfund = 2;
  for (int i = 0; i < this->levelfund_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->levelfund(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FundData)
}

::google::protobuf::uint8* FundData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FundData)
  // repeated uint32 hasbuy = 1;
  for (int i = 0; i < this->hasbuy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->hasbuy(i), target);
  }

  // repeated .PairDataDWORD levelfund = 2;
  for (int i = 0; i < this->levelfund_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->levelfund(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FundData)
  return target;
}

int FundData::ByteSize() const {
  int total_size = 0;

  // repeated uint32 hasbuy = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hasbuy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hasbuy(i));
    }
    total_size += 1 * this->hasbuy_size() + data_size;
  }

  // repeated .PairDataDWORD levelfund = 2;
  total_size += 1 * this->levelfund_size();
  for (int i = 0; i < this->levelfund_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelfund(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FundData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FundData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FundData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FundData::MergeFrom(const FundData& from) {
  GOOGLE_CHECK_NE(&from, this);
  hasbuy_.MergeFrom(from.hasbuy_);
  levelfund_.MergeFrom(from.levelfund_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FundData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundData::CopyFrom(const FundData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundData::IsInitialized() const {

  return true;
}

void FundData::Swap(FundData* other) {
  if (other != this) {
    hasbuy_.Swap(&other->hasbuy_);
    levelfund_.Swap(&other->levelfund_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FundData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FundData_descriptor_;
  metadata.reflection = FundData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TotalReSpData::kNumFieldNumber;
const int TotalReSpData::kTotalgetFieldNumber;
const int TotalReSpData::kDaysFieldNumber;
#endif  // !_MSC_VER

TotalReSpData::TotalReSpData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TotalReSpData)
}

void TotalReSpData::InitAsDefaultInstance() {
}

TotalReSpData::TotalReSpData(const TotalReSpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TotalReSpData)
}

void TotalReSpData::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  days_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TotalReSpData::~TotalReSpData() {
  // @@protoc_insertion_point(destructor:TotalReSpData)
  SharedDtor();
}

void TotalReSpData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TotalReSpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TotalReSpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotalReSpData_descriptor_;
}

const TotalReSpData& TotalReSpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TotalReSpData* TotalReSpData::default_instance_ = NULL;

TotalReSpData* TotalReSpData::New() const {
  return new TotalReSpData;
}

void TotalReSpData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TotalReSpData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, days_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  totalget_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TotalReSpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TotalReSpData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalget;
        break;
      }

      // repeated uint32 totalget = 2;
      case 2: {
        if (tag == 16) {
         parse_totalget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_totalget())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_totalget())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalget;
        if (input->ExpectTag(24)) goto parse_days;
        break;
      }

      // optional uint32 days = 3;
      case 3: {
        if (tag == 24) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TotalReSpData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TotalReSpData)
  return false;
#undef DO_
}

void TotalReSpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TotalReSpData)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // repeated uint32 totalget = 2;
  for (int i = 0; i < this->totalget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->totalget(i), output);
  }

  // optional uint32 days = 3;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->days(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TotalReSpData)
}

::google::protobuf::uint8* TotalReSpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TotalReSpData)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // repeated uint32 totalget = 2;
  for (int i = 0; i < this->totalget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->totalget(i), target);
  }

  // optional uint32 days = 3;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->days(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TotalReSpData)
  return target;
}

int TotalReSpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 days = 3;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

  }
  // repeated uint32 totalget = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->totalget_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->totalget(i));
    }
    total_size += 1 * this->totalget_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TotalReSpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TotalReSpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TotalReSpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TotalReSpData::MergeFrom(const TotalReSpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  totalget_.MergeFrom(from.totalget_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TotalReSpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotalReSpData::CopyFrom(const TotalReSpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalReSpData::IsInitialized() const {

  return true;
}

void TotalReSpData::Swap(TotalReSpData* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    totalget_.Swap(&other->totalget_);
    std::swap(days_, other->days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TotalReSpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TotalReSpData_descriptor_;
  metadata.reflection = TotalReSpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeSpendData::kReacttimeFieldNumber;
const int RechargeSpendData::kRedaybonusFieldNumber;
const int RechargeSpendData::kRetotalbonusFieldNumber;
const int RechargeSpendData::kSpacttimeFieldNumber;
const int RechargeSpendData::kSpdaybonusFieldNumber;
const int RechargeSpendData::kSptotalbonusFieldNumber;
#endif  // !_MSC_VER

RechargeSpendData::RechargeSpendData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RechargeSpendData)
}

void RechargeSpendData::InitAsDefaultInstance() {
}

RechargeSpendData::RechargeSpendData(const RechargeSpendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RechargeSpendData)
}

void RechargeSpendData::SharedCtor() {
  _cached_size_ = 0;
  reacttime_ = 0u;
  spacttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeSpendData::~RechargeSpendData() {
  // @@protoc_insertion_point(destructor:RechargeSpendData)
  SharedDtor();
}

void RechargeSpendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargeSpendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeSpendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeSpendData_descriptor_;
}

const RechargeSpendData& RechargeSpendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RechargeSpendData* RechargeSpendData::default_instance_ = NULL;

RechargeSpendData* RechargeSpendData::New() const {
  return new RechargeSpendData;
}

void RechargeSpendData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RechargeSpendData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(reacttime_, spacttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  redaybonus_.Clear();
  retotalbonus_.Clear();
  spdaybonus_.Clear();
  sptotalbonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeSpendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RechargeSpendData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reacttime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reacttime_)));
          set_has_reacttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_redaybonus;
        break;
      }

      // repeated uint32 redaybonus = 2;
      case 2: {
        if (tag == 16) {
         parse_redaybonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_redaybonus())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_redaybonus())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_redaybonus;
        if (input->ExpectTag(26)) goto parse_retotalbonus;
        break;
      }

      // repeated .TotalReSpData retotalbonus = 3;
      case 3: {
        if (tag == 26) {
         parse_retotalbonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_retotalbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_retotalbonus;
        if (input->ExpectTag(32)) goto parse_spacttime;
        break;
      }

      // optional uint32 spacttime = 4;
      case 4: {
        if (tag == 32) {
         parse_spacttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spacttime_)));
          set_has_spacttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_spdaybonus;
        break;
      }

      // repeated uint32 spdaybonus = 5;
      case 5: {
        if (tag == 40) {
         parse_spdaybonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_spdaybonus())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_spdaybonus())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_spdaybonus;
        if (input->ExpectTag(50)) goto parse_sptotalbonus;
        break;
      }

      // repeated .TotalReSpData sptotalbonus = 6;
      case 6: {
        if (tag == 50) {
         parse_sptotalbonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sptotalbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sptotalbonus;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RechargeSpendData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RechargeSpendData)
  return false;
#undef DO_
}

void RechargeSpendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RechargeSpendData)
  // optional uint32 reacttime = 1;
  if (has_reacttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reacttime(), output);
  }

  // repeated uint32 redaybonus = 2;
  for (int i = 0; i < this->redaybonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->redaybonus(i), output);
  }

  // repeated .TotalReSpData retotalbonus = 3;
  for (int i = 0; i < this->retotalbonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->retotalbonus(i), output);
  }

  // optional uint32 spacttime = 4;
  if (has_spacttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->spacttime(), output);
  }

  // repeated uint32 spdaybonus = 5;
  for (int i = 0; i < this->spdaybonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->spdaybonus(i), output);
  }

  // repeated .TotalReSpData sptotalbonus = 6;
  for (int i = 0; i < this->sptotalbonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sptotalbonus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RechargeSpendData)
}

::google::protobuf::uint8* RechargeSpendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RechargeSpendData)
  // optional uint32 reacttime = 1;
  if (has_reacttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reacttime(), target);
  }

  // repeated uint32 redaybonus = 2;
  for (int i = 0; i < this->redaybonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->redaybonus(i), target);
  }

  // repeated .TotalReSpData retotalbonus = 3;
  for (int i = 0; i < this->retotalbonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->retotalbonus(i), target);
  }

  // optional uint32 spacttime = 4;
  if (has_spacttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->spacttime(), target);
  }

  // repeated uint32 spdaybonus = 5;
  for (int i = 0; i < this->spdaybonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->spdaybonus(i), target);
  }

  // repeated .TotalReSpData sptotalbonus = 6;
  for (int i = 0; i < this->sptotalbonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sptotalbonus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RechargeSpendData)
  return target;
}

int RechargeSpendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reacttime = 1;
    if (has_reacttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reacttime());
    }

    // optional uint32 spacttime = 4;
    if (has_spacttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spacttime());
    }

  }
  // repeated uint32 redaybonus = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->redaybonus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->redaybonus(i));
    }
    total_size += 1 * this->redaybonus_size() + data_size;
  }

  // repeated .TotalReSpData retotalbonus = 3;
  total_size += 1 * this->retotalbonus_size();
  for (int i = 0; i < this->retotalbonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->retotalbonus(i));
  }

  // repeated uint32 spdaybonus = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->spdaybonus_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->spdaybonus(i));
    }
    total_size += 1 * this->spdaybonus_size() + data_size;
  }

  // repeated .TotalReSpData sptotalbonus = 6;
  total_size += 1 * this->sptotalbonus_size();
  for (int i = 0; i < this->sptotalbonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sptotalbonus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeSpendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeSpendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeSpendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeSpendData::MergeFrom(const RechargeSpendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  redaybonus_.MergeFrom(from.redaybonus_);
  retotalbonus_.MergeFrom(from.retotalbonus_);
  spdaybonus_.MergeFrom(from.spdaybonus_);
  sptotalbonus_.MergeFrom(from.sptotalbonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reacttime()) {
      set_reacttime(from.reacttime());
    }
    if (from.has_spacttime()) {
      set_spacttime(from.spacttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeSpendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeSpendData::CopyFrom(const RechargeSpendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeSpendData::IsInitialized() const {

  return true;
}

void RechargeSpendData::Swap(RechargeSpendData* other) {
  if (other != this) {
    std::swap(reacttime_, other->reacttime_);
    redaybonus_.Swap(&other->redaybonus_);
    retotalbonus_.Swap(&other->retotalbonus_);
    std::swap(spacttime_, other->spacttime_);
    spdaybonus_.Swap(&other->spdaybonus_);
    sptotalbonus_.Swap(&other->sptotalbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeSpendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeSpendData_descriptor_;
  metadata.reflection = RechargeSpendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeclareWarData::kSeptidFieldNumber;
const int DeclareWarData::kSeptnameFieldNumber;
const int DeclareWarData::kLefttimeFieldNumber;
const int DeclareWarData::kLeftcdFieldNumber;
const int DeclareWarData::kLeadernameFieldNumber;
const int DeclareWarData::kCountFieldNumber;
#endif  // !_MSC_VER

DeclareWarData::DeclareWarData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeclareWarData)
}

void DeclareWarData::InitAsDefaultInstance() {
}

DeclareWarData::DeclareWarData(const DeclareWarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeclareWarData)
}

void DeclareWarData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  septid_ = 0u;
  septname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lefttime_ = 0u;
  leftcd_ = 0u;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeclareWarData::~DeclareWarData() {
  // @@protoc_insertion_point(destructor:DeclareWarData)
  SharedDtor();
}

void DeclareWarData::SharedDtor() {
  if (septname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete septname_;
  }
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void DeclareWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeclareWarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeclareWarData_descriptor_;
}

const DeclareWarData& DeclareWarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

DeclareWarData* DeclareWarData::default_instance_ = NULL;

DeclareWarData* DeclareWarData::New() const {
  return new DeclareWarData;
}

void DeclareWarData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeclareWarData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(septid_, lefttime_);
    ZR_(leftcd_, count_);
    if (has_septname()) {
      if (septname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        septname_->clear();
      }
    }
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leadername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeclareWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeclareWarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 septid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septid_)));
          set_has_septid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_septname;
        break;
      }

      // optional string septname = 2;
      case 2: {
        if (tag == 18) {
         parse_septname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_septname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->septname().data(), this->septname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "septname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lefttime;
        break;
      }

      // optional uint32 lefttime = 3;
      case 3: {
        if (tag == 24) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_leftcd;
        break;
      }

      // optional uint32 leftcd = 4;
      case 4: {
        if (tag == 32) {
         parse_leftcd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftcd_)));
          set_has_leftcd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_leadername;
        break;
      }

      // optional string leadername = 5;
      case 5: {
        if (tag == 42) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeclareWarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeclareWarData)
  return false;
#undef DO_
}

void DeclareWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeclareWarData)
  // optional uint32 septid = 1;
  if (has_septid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->septid(), output);
  }

  // optional string septname = 2;
  if (has_septname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->septname().data(), this->septname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "septname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->septname(), output);
  }

  // optional uint32 lefttime = 3;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lefttime(), output);
  }

  // optional uint32 leftcd = 4;
  if (has_leftcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leftcd(), output);
  }

  // optional string leadername = 5;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->leadername(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeclareWarData)
}

::google::protobuf::uint8* DeclareWarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeclareWarData)
  // optional uint32 septid = 1;
  if (has_septid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->septid(), target);
  }

  // optional string septname = 2;
  if (has_septname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->septname().data(), this->septname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "septname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->septname(), target);
  }

  // optional uint32 lefttime = 3;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lefttime(), target);
  }

  // optional uint32 leftcd = 4;
  if (has_leftcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leftcd(), target);
  }

  // optional string leadername = 5;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leadername(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeclareWarData)
  return target;
}

int DeclareWarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 septid = 1;
    if (has_septid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septid());
    }

    // optional string septname = 2;
    if (has_septname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->septname());
    }

    // optional uint32 lefttime = 3;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }

    // optional uint32 leftcd = 4;
    if (has_leftcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftcd());
    }

    // optional string leadername = 5;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeclareWarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeclareWarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeclareWarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeclareWarData::MergeFrom(const DeclareWarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_septid()) {
      set_septid(from.septid());
    }
    if (from.has_septname()) {
      set_septname(from.septname());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_leftcd()) {
      set_leftcd(from.leftcd());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeclareWarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeclareWarData::CopyFrom(const DeclareWarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclareWarData::IsInitialized() const {

  return true;
}

void DeclareWarData::Swap(DeclareWarData* other) {
  if (other != this) {
    std::swap(septid_, other->septid_);
    std::swap(septname_, other->septname_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(leftcd_, other->leftcd_);
    std::swap(leadername_, other->leadername_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeclareWarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeclareWarData_descriptor_;
  metadata.reflection = DeclareWarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropValues::kKeyFieldNumber;
const int PropValues::kValueFieldNumber;
#endif  // !_MSC_VER

PropValues::PropValues()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PropValues)
}

void PropValues::InitAsDefaultInstance() {
}

PropValues::PropValues(const PropValues& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PropValues)
}

void PropValues::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropValues::~PropValues() {
  // @@protoc_insertion_point(destructor:PropValues)
  SharedDtor();
}

void PropValues::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropValues_descriptor_;
}

const PropValues& PropValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PropValues* PropValues::default_instance_ = NULL;

PropValues* PropValues::New() const {
  return new PropValues;
}

void PropValues::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PropValues*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PropValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PropValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PropValues)
  return false;
#undef DO_
}

void PropValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PropValues)
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PropValues)
}

::google::protobuf::uint8* PropValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PropValues)
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PropValues)
  return target;
}

int PropValues::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropValues::MergeFrom(const PropValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropValues::CopyFrom(const PropValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropValues::IsInitialized() const {

  return true;
}

void PropValues::Swap(PropValues* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropValues_descriptor_;
  metadata.reflection = PropValues_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FPairDataDWORD::kPara1FieldNumber;
const int FPairDataDWORD::kPara2FieldNumber;
#endif  // !_MSC_VER

FPairDataDWORD::FPairDataDWORD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPairDataDWORD)
}

void FPairDataDWORD::InitAsDefaultInstance() {
}

FPairDataDWORD::FPairDataDWORD(const FPairDataDWORD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FPairDataDWORD)
}

void FPairDataDWORD::SharedCtor() {
  _cached_size_ = 0;
  para1_ = 0u;
  para2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FPairDataDWORD::~FPairDataDWORD() {
  // @@protoc_insertion_point(destructor:FPairDataDWORD)
  SharedDtor();
}

void FPairDataDWORD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FPairDataDWORD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FPairDataDWORD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FPairDataDWORD_descriptor_;
}

const FPairDataDWORD& FPairDataDWORD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FPairDataDWORD* FPairDataDWORD::default_instance_ = NULL;

FPairDataDWORD* FPairDataDWORD::New() const {
  return new FPairDataDWORD;
}

void FPairDataDWORD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FPairDataDWORD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(para1_, para2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FPairDataDWORD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPairDataDWORD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 para1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para1_)));
          set_has_para1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_para2;
        break;
      }

      // optional uint32 para2 = 2;
      case 2: {
        if (tag == 16) {
         parse_para2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para2_)));
          set_has_para2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPairDataDWORD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPairDataDWORD)
  return false;
#undef DO_
}

void FPairDataDWORD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPairDataDWORD)
  // optional uint32 para1 = 1;
  if (has_para1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->para1(), output);
  }

  // optional uint32 para2 = 2;
  if (has_para2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->para2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPairDataDWORD)
}

::google::protobuf::uint8* FPairDataDWORD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPairDataDWORD)
  // optional uint32 para1 = 1;
  if (has_para1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->para1(), target);
  }

  // optional uint32 para2 = 2;
  if (has_para2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->para2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPairDataDWORD)
  return target;
}

int FPairDataDWORD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 para1 = 1;
    if (has_para1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para1());
    }

    // optional uint32 para2 = 2;
    if (has_para2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FPairDataDWORD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FPairDataDWORD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FPairDataDWORD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FPairDataDWORD::MergeFrom(const FPairDataDWORD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_para1()) {
      set_para1(from.para1());
    }
    if (from.has_para2()) {
      set_para2(from.para2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FPairDataDWORD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FPairDataDWORD::CopyFrom(const FPairDataDWORD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FPairDataDWORD::IsInitialized() const {

  return true;
}

void FPairDataDWORD::Swap(FPairDataDWORD* other) {
  if (other != this) {
    std::swap(para1_, other->para1_);
    std::swap(para2_, other->para2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FPairDataDWORD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FPairDataDWORD_descriptor_;
  metadata.reflection = FPairDataDWORD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FPairDataStrDW::kStrFieldNumber;
const int FPairDataStrDW::kValueFieldNumber;
#endif  // !_MSC_VER

FPairDataStrDW::FPairDataStrDW()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPairDataStrDW)
}

void FPairDataStrDW::InitAsDefaultInstance() {
}

FPairDataStrDW::FPairDataStrDW(const FPairDataStrDW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FPairDataStrDW)
}

void FPairDataStrDW::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FPairDataStrDW::~FPairDataStrDW() {
  // @@protoc_insertion_point(destructor:FPairDataStrDW)
  SharedDtor();
}

void FPairDataStrDW::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void FPairDataStrDW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FPairDataStrDW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FPairDataStrDW_descriptor_;
}

const FPairDataStrDW& FPairDataStrDW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FPairDataStrDW* FPairDataStrDW::default_instance_ = NULL;

FPairDataStrDW* FPairDataStrDW::New() const {
  return new FPairDataStrDW;
}

void FPairDataStrDW::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FPairDataStrDW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPairDataStrDW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPairDataStrDW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPairDataStrDW)
  return false;
#undef DO_
}

void FPairDataStrDW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPairDataStrDW)
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPairDataStrDW)
}

::google::protobuf::uint8* FPairDataStrDW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPairDataStrDW)
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPairDataStrDW)
  return target;
}

int FPairDataStrDW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FPairDataStrDW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FPairDataStrDW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FPairDataStrDW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FPairDataStrDW::MergeFrom(const FPairDataStrDW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FPairDataStrDW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FPairDataStrDW::CopyFrom(const FPairDataStrDW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FPairDataStrDW::IsInitialized() const {

  return true;
}

void FPairDataStrDW::Swap(FPairDataStrDW* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FPairDataStrDW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FPairDataStrDW_descriptor_;
  metadata.reflection = FPairDataStrDW_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FTripleDataDWORD::kPara1FieldNumber;
const int FTripleDataDWORD::kPara2FieldNumber;
const int FTripleDataDWORD::kPara3FieldNumber;
#endif  // !_MSC_VER

FTripleDataDWORD::FTripleDataDWORD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FTripleDataDWORD)
}

void FTripleDataDWORD::InitAsDefaultInstance() {
}

FTripleDataDWORD::FTripleDataDWORD(const FTripleDataDWORD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FTripleDataDWORD)
}

void FTripleDataDWORD::SharedCtor() {
  _cached_size_ = 0;
  para1_ = 0u;
  para2_ = 0u;
  para3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FTripleDataDWORD::~FTripleDataDWORD() {
  // @@protoc_insertion_point(destructor:FTripleDataDWORD)
  SharedDtor();
}

void FTripleDataDWORD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FTripleDataDWORD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FTripleDataDWORD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FTripleDataDWORD_descriptor_;
}

const FTripleDataDWORD& FTripleDataDWORD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FTripleDataDWORD* FTripleDataDWORD::default_instance_ = NULL;

FTripleDataDWORD* FTripleDataDWORD::New() const {
  return new FTripleDataDWORD;
}

void FTripleDataDWORD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FTripleDataDWORD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(para1_, para3_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FTripleDataDWORD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FTripleDataDWORD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 para1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para1_)));
          set_has_para1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_para2;
        break;
      }

      // optional uint32 para2 = 2;
      case 2: {
        if (tag == 16) {
         parse_para2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para2_)));
          set_has_para2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_para3;
        break;
      }

      // optional uint32 para3 = 3;
      case 3: {
        if (tag == 24) {
         parse_para3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &para3_)));
          set_has_para3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FTripleDataDWORD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FTripleDataDWORD)
  return false;
#undef DO_
}

void FTripleDataDWORD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FTripleDataDWORD)
  // optional uint32 para1 = 1;
  if (has_para1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->para1(), output);
  }

  // optional uint32 para2 = 2;
  if (has_para2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->para2(), output);
  }

  // optional uint32 para3 = 3;
  if (has_para3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->para3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FTripleDataDWORD)
}

::google::protobuf::uint8* FTripleDataDWORD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTripleDataDWORD)
  // optional uint32 para1 = 1;
  if (has_para1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->para1(), target);
  }

  // optional uint32 para2 = 2;
  if (has_para2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->para2(), target);
  }

  // optional uint32 para3 = 3;
  if (has_para3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->para3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTripleDataDWORD)
  return target;
}

int FTripleDataDWORD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 para1 = 1;
    if (has_para1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para1());
    }

    // optional uint32 para2 = 2;
    if (has_para2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para2());
    }

    // optional uint32 para3 = 3;
    if (has_para3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->para3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FTripleDataDWORD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FTripleDataDWORD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FTripleDataDWORD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FTripleDataDWORD::MergeFrom(const FTripleDataDWORD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_para1()) {
      set_para1(from.para1());
    }
    if (from.has_para2()) {
      set_para2(from.para2());
    }
    if (from.has_para3()) {
      set_para3(from.para3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FTripleDataDWORD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FTripleDataDWORD::CopyFrom(const FTripleDataDWORD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTripleDataDWORD::IsInitialized() const {

  return true;
}

void FTripleDataDWORD::Swap(FTripleDataDWORD* other) {
  if (other != this) {
    std::swap(para1_, other->para1_);
    std::swap(para2_, other->para2_);
    std::swap(para3_, other->para3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FTripleDataDWORD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FTripleDataDWORD_descriptor_;
  metadata.reflection = FTripleDataDWORD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StpObjectNode::kGridTypeFieldNumber;
const int StpObjectNode::kTempidFieldNumber;
const int StpObjectNode::kXFieldNumber;
const int StpObjectNode::kYFieldNumber;
const int StpObjectNode::kNumFieldNumber;
const int StpObjectNode::kDelFieldNumber;
#endif  // !_MSC_VER

StpObjectNode::StpObjectNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StpObjectNode)
}

void StpObjectNode::InitAsDefaultInstance() {
}

StpObjectNode::StpObjectNode(const StpObjectNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StpObjectNode)
}

void StpObjectNode::SharedCtor() {
  _cached_size_ = 0;
  gridtype_ = 0u;
  tempid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  num_ = 0u;
  del_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StpObjectNode::~StpObjectNode() {
  // @@protoc_insertion_point(destructor:StpObjectNode)
  SharedDtor();
}

void StpObjectNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StpObjectNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StpObjectNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StpObjectNode_descriptor_;
}

const StpObjectNode& StpObjectNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StpObjectNode* StpObjectNode::default_instance_ = NULL;

StpObjectNode* StpObjectNode::New() const {
  return new StpObjectNode;
}

void StpObjectNode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StpObjectNode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(gridtype_, del_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StpObjectNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StpObjectNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gridType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridtype_)));
          set_has_gridtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tempid;
        break;
      }

      // optional uint32 tempid = 2;
      case 2: {
        if (tag == 16) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional uint32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_del;
        break;
      }

      // optional bool del = 6;
      case 6: {
        if (tag == 48) {
         parse_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &del_)));
          set_has_del();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StpObjectNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StpObjectNode)
  return false;
#undef DO_
}

void StpObjectNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StpObjectNode)
  // optional uint32 gridType = 1;
  if (has_gridtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gridtype(), output);
  }

  // optional uint32 tempid = 2;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tempid(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  // optional bool del = 6;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StpObjectNode)
}

::google::protobuf::uint8* StpObjectNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StpObjectNode)
  // optional uint32 gridType = 1;
  if (has_gridtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gridtype(), target);
  }

  // optional uint32 tempid = 2;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tempid(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  // optional bool del = 6;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StpObjectNode)
  return target;
}

int StpObjectNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gridType = 1;
    if (has_gridtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridtype());
    }

    // optional uint32 tempid = 2;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tempid());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bool del = 6;
    if (has_del()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StpObjectNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StpObjectNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StpObjectNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StpObjectNode::MergeFrom(const StpObjectNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridtype()) {
      set_gridtype(from.gridtype());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_del()) {
      set_del(from.del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StpObjectNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StpObjectNode::CopyFrom(const StpObjectNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StpObjectNode::IsInitialized() const {

  return true;
}

void StpObjectNode::Swap(StpObjectNode* other) {
  if (other != this) {
    std::swap(gridtype_, other->gridtype_);
    std::swap(tempid_, other->tempid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(num_, other->num_);
    std::swap(del_, other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StpObjectNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StpObjectNode_descriptor_;
  metadata.reflection = StpObjectNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMsgNpcFunction::kFuncidFieldNumber;
const int FMsgNpcFunction::kFuncnameFieldNumber;
const int FMsgNpcFunction::kFunceventFieldNumber;
const int FMsgNpcFunction::kFunciconFieldNumber;
const int FMsgNpcFunction::kFuncopenFieldNumber;
#endif  // !_MSC_VER

FMsgNpcFunction::FMsgNpcFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FMsgNpcFunction)
}

void FMsgNpcFunction::InitAsDefaultInstance() {
}

FMsgNpcFunction::FMsgNpcFunction(const FMsgNpcFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FMsgNpcFunction)
}

void FMsgNpcFunction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  funcid_ = 0u;
  funcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  funcopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMsgNpcFunction::~FMsgNpcFunction() {
  // @@protoc_insertion_point(destructor:FMsgNpcFunction)
  SharedDtor();
}

void FMsgNpcFunction::SharedDtor() {
  if (funcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete funcname_;
  }
  if (funcevent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete funcevent_;
  }
  if (funcicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete funcicon_;
  }
  if (this != default_instance_) {
  }
}

void FMsgNpcFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMsgNpcFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMsgNpcFunction_descriptor_;
}

const FMsgNpcFunction& FMsgNpcFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FMsgNpcFunction* FMsgNpcFunction::default_instance_ = NULL;

FMsgNpcFunction* FMsgNpcFunction::New() const {
  return new FMsgNpcFunction;
}

void FMsgNpcFunction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FMsgNpcFunction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(funcid_, funcopen_);
    if (has_funcname()) {
      if (funcname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        funcname_->clear();
      }
    }
    if (has_funcevent()) {
      if (funcevent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        funcevent_->clear();
      }
    }
    if (has_funcicon()) {
      if (funcicon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        funcicon_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMsgNpcFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FMsgNpcFunction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 funcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funcid_)));
          set_has_funcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_funcname;
        break;
      }

      // optional string funcname = 2;
      case 2: {
        if (tag == 18) {
         parse_funcname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_funcname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->funcname().data(), this->funcname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "funcname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_funcevent;
        break;
      }

      // optional string funcevent = 3;
      case 3: {
        if (tag == 26) {
         parse_funcevent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_funcevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->funcevent().data(), this->funcevent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "funcevent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_funcicon;
        break;
      }

      // optional string funcicon = 4;
      case 4: {
        if (tag == 34) {
         parse_funcicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_funcicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->funcicon().data(), this->funcicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "funcicon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_funcopen;
        break;
      }

      // optional bool funcopen = 5;
      case 5: {
        if (tag == 40) {
         parse_funcopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &funcopen_)));
          set_has_funcopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FMsgNpcFunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FMsgNpcFunction)
  return false;
#undef DO_
}

void FMsgNpcFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FMsgNpcFunction)
  // optional uint32 funcid = 1;
  if (has_funcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->funcid(), output);
  }

  // optional string funcname = 2;
  if (has_funcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->funcname().data(), this->funcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "funcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->funcname(), output);
  }

  // optional string funcevent = 3;
  if (has_funcevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->funcevent().data(), this->funcevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "funcevent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->funcevent(), output);
  }

  // optional string funcicon = 4;
  if (has_funcicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->funcicon().data(), this->funcicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "funcicon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->funcicon(), output);
  }

  // optional bool funcopen = 5;
  if (has_funcopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->funcopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FMsgNpcFunction)
}

::google::protobuf::uint8* FMsgNpcFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FMsgNpcFunction)
  // optional uint32 funcid = 1;
  if (has_funcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->funcid(), target);
  }

  // optional string funcname = 2;
  if (has_funcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->funcname().data(), this->funcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "funcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->funcname(), target);
  }

  // optional string funcevent = 3;
  if (has_funcevent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->funcevent().data(), this->funcevent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "funcevent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->funcevent(), target);
  }

  // optional string funcicon = 4;
  if (has_funcicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->funcicon().data(), this->funcicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "funcicon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->funcicon(), target);
  }

  // optional bool funcopen = 5;
  if (has_funcopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->funcopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FMsgNpcFunction)
  return target;
}

int FMsgNpcFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 funcid = 1;
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funcid());
    }

    // optional string funcname = 2;
    if (has_funcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->funcname());
    }

    // optional string funcevent = 3;
    if (has_funcevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->funcevent());
    }

    // optional string funcicon = 4;
    if (has_funcicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->funcicon());
    }

    // optional bool funcopen = 5;
    if (has_funcopen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMsgNpcFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMsgNpcFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMsgNpcFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMsgNpcFunction::MergeFrom(const FMsgNpcFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_funcid()) {
      set_funcid(from.funcid());
    }
    if (from.has_funcname()) {
      set_funcname(from.funcname());
    }
    if (from.has_funcevent()) {
      set_funcevent(from.funcevent());
    }
    if (from.has_funcicon()) {
      set_funcicon(from.funcicon());
    }
    if (from.has_funcopen()) {
      set_funcopen(from.funcopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMsgNpcFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMsgNpcFunction::CopyFrom(const FMsgNpcFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMsgNpcFunction::IsInitialized() const {

  return true;
}

void FMsgNpcFunction::Swap(FMsgNpcFunction* other) {
  if (other != this) {
    std::swap(funcid_, other->funcid_);
    std::swap(funcname_, other->funcname_);
    std::swap(funcevent_, other->funcevent_);
    std::swap(funcicon_, other->funcicon_);
    std::swap(funcopen_, other->funcopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMsgNpcFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMsgNpcFunction_descriptor_;
  metadata.reflection = FMsgNpcFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FNpcDlgPara::kTagFieldNumber;
const int FNpcDlgPara::kValueFieldNumber;
#endif  // !_MSC_VER

FNpcDlgPara::FNpcDlgPara()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FNpcDlgPara)
}

void FNpcDlgPara::InitAsDefaultInstance() {
}

FNpcDlgPara::FNpcDlgPara(const FNpcDlgPara& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FNpcDlgPara)
}

void FNpcDlgPara::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FNpcDlgPara::~FNpcDlgPara() {
  // @@protoc_insertion_point(destructor:FNpcDlgPara)
  SharedDtor();
}

void FNpcDlgPara::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void FNpcDlgPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FNpcDlgPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FNpcDlgPara_descriptor_;
}

const FNpcDlgPara& FNpcDlgPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FNpcDlgPara* FNpcDlgPara::default_instance_ = NULL;

FNpcDlgPara* FNpcDlgPara::New() const {
  return new FNpcDlgPara;
}

void FNpcDlgPara::Clear() {
  if (has_tag()) {
    if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      tag_->clear();
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FNpcDlgPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FNpcDlgPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated .FValueCell value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FNpcDlgPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FNpcDlgPara)
  return false;
#undef DO_
}

void FNpcDlgPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FNpcDlgPara)
  // optional string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // repeated .FValueCell value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FNpcDlgPara)
}

::google::protobuf::uint8* FNpcDlgPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNpcDlgPara)
  // optional string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // repeated .FValueCell value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNpcDlgPara)
  return target;
}

int FNpcDlgPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

  }
  // repeated .FValueCell value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FNpcDlgPara::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FNpcDlgPara* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FNpcDlgPara*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FNpcDlgPara::MergeFrom(const FNpcDlgPara& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FNpcDlgPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNpcDlgPara::CopyFrom(const FNpcDlgPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNpcDlgPara::IsInitialized() const {

  return true;
}

void FNpcDlgPara::Swap(FNpcDlgPara* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FNpcDlgPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FNpcDlgPara_descriptor_;
  metadata.reflection = FNpcDlgPara_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FValueCell::kIntvalueFieldNumber;
const int FValueCell::kStrvalueFieldNumber;
#endif  // !_MSC_VER

FValueCell::FValueCell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FValueCell)
}

void FValueCell::InitAsDefaultInstance() {
}

FValueCell::FValueCell(const FValueCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FValueCell)
}

void FValueCell::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  intvalue_ = 0u;
  strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FValueCell::~FValueCell() {
  // @@protoc_insertion_point(destructor:FValueCell)
  SharedDtor();
}

void FValueCell::SharedDtor() {
  if (strvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strvalue_;
  }
  if (this != default_instance_) {
  }
}

void FValueCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FValueCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FValueCell_descriptor_;
}

const FValueCell& FValueCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FValueCell* FValueCell::default_instance_ = NULL;

FValueCell* FValueCell::New() const {
  return new FValueCell;
}

void FValueCell::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    intvalue_ = 0u;
    if (has_strvalue()) {
      if (strvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FValueCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FValueCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 intvalue = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intvalue_)));
          set_has_intvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strvalue;
        break;
      }

      // optional string strvalue = 2;
      case 2: {
        if (tag == 18) {
         parse_strvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strvalue().data(), this->strvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strvalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FValueCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FValueCell)
  return false;
#undef DO_
}

void FValueCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FValueCell)
  // optional uint32 intvalue = 1;
  if (has_intvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->intvalue(), output);
  }

  // optional string strvalue = 2;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strvalue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FValueCell)
}

::google::protobuf::uint8* FValueCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FValueCell)
  // optional uint32 intvalue = 1;
  if (has_intvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->intvalue(), target);
  }

  // optional string strvalue = 2;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strvalue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FValueCell)
  return target;
}

int FValueCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 intvalue = 1;
    if (has_intvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intvalue());
    }

    // optional string strvalue = 2;
    if (has_strvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FValueCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FValueCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FValueCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FValueCell::MergeFrom(const FValueCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intvalue()) {
      set_intvalue(from.intvalue());
    }
    if (from.has_strvalue()) {
      set_strvalue(from.strvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FValueCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FValueCell::CopyFrom(const FValueCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FValueCell::IsInitialized() const {

  return true;
}

void FValueCell::Swap(FValueCell* other) {
  if (other != this) {
    std::swap(intvalue_, other->intvalue_);
    std::swap(strvalue_, other->strvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FValueCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FValueCell_descriptor_;
  metadata.reflection = FValueCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FPropertyValues_FValue::kKeyFieldNumber;
const int FPropertyValues_FValue::kValueFieldNumber;
#endif  // !_MSC_VER

FPropertyValues_FValue::FPropertyValues_FValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPropertyValues.FValue)
}

void FPropertyValues_FValue::InitAsDefaultInstance() {
}

FPropertyValues_FValue::FPropertyValues_FValue(const FPropertyValues_FValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FPropertyValues.FValue)
}

void FPropertyValues_FValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FPropertyValues_FValue::~FPropertyValues_FValue() {
  // @@protoc_insertion_point(destructor:FPropertyValues.FValue)
  SharedDtor();
}

void FPropertyValues_FValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FPropertyValues_FValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FPropertyValues_FValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FPropertyValues_FValue_descriptor_;
}

const FPropertyValues_FValue& FPropertyValues_FValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FPropertyValues_FValue* FPropertyValues_FValue::default_instance_ = NULL;

FPropertyValues_FValue* FPropertyValues_FValue::New() const {
  return new FPropertyValues_FValue;
}

void FPropertyValues_FValue::Clear() {
  key_ = 0;
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FPropertyValues_FValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPropertyValues.FValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FPropValueType key = 1 [default = FValueType_none];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FPropValueType_IsValid(value)) {
            set_key(static_cast< ::FPropValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // repeated uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_value())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPropertyValues.FValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPropertyValues.FValue)
  return false;
#undef DO_
}

void FPropertyValues_FValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPropertyValues.FValue)
  // optional .FPropValueType key = 1 [default = FValueType_none];
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key(), output);
  }

  // repeated uint32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPropertyValues.FValue)
}

::google::protobuf::uint8* FPropertyValues_FValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPropertyValues.FValue)
  // optional .FPropValueType key = 1 [default = FValueType_none];
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key(), target);
  }

  // repeated uint32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPropertyValues.FValue)
  return target;
}

int FPropertyValues_FValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FPropValueType key = 1 [default = FValueType_none];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key());
    }

  }
  // repeated uint32 value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FPropertyValues_FValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FPropertyValues_FValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FPropertyValues_FValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FPropertyValues_FValue::MergeFrom(const FPropertyValues_FValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FPropertyValues_FValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FPropertyValues_FValue::CopyFrom(const FPropertyValues_FValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FPropertyValues_FValue::IsInitialized() const {

  return true;
}

void FPropertyValues_FValue::Swap(FPropertyValues_FValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FPropertyValues_FValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FPropertyValues_FValue_descriptor_;
  metadata.reflection = FPropertyValues_FValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FPropertyValues::kValueFieldNumber;
#endif  // !_MSC_VER

FPropertyValues::FPropertyValues()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FPropertyValues)
}

void FPropertyValues::InitAsDefaultInstance() {
}

FPropertyValues::FPropertyValues(const FPropertyValues& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FPropertyValues)
}

void FPropertyValues::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FPropertyValues::~FPropertyValues() {
  // @@protoc_insertion_point(destructor:FPropertyValues)
  SharedDtor();
}

void FPropertyValues::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FPropertyValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FPropertyValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FPropertyValues_descriptor_;
}

const FPropertyValues& FPropertyValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FPropertyValues* FPropertyValues::default_instance_ = NULL;

FPropertyValues* FPropertyValues::New() const {
  return new FPropertyValues;
}

void FPropertyValues::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FPropertyValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FPropertyValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FPropertyValues.FValue value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FPropertyValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FPropertyValues)
  return false;
#undef DO_
}

void FPropertyValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FPropertyValues)
  // repeated .FPropertyValues.FValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FPropertyValues)
}

::google::protobuf::uint8* FPropertyValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FPropertyValues)
  // repeated .FPropertyValues.FValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FPropertyValues)
  return target;
}

int FPropertyValues::ByteSize() const {
  int total_size = 0;

  // repeated .FPropertyValues.FValue value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FPropertyValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FPropertyValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FPropertyValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FPropertyValues::MergeFrom(const FPropertyValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FPropertyValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FPropertyValues::CopyFrom(const FPropertyValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FPropertyValues::IsInitialized() const {

  return true;
}

void FPropertyValues::Swap(FPropertyValues* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FPropertyValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FPropertyValues_descriptor_;
  metadata.reflection = FPropertyValues_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FNpcMapData::kIdFieldNumber;
const int FNpcMapData::kTmpidFieldNumber;
const int FNpcMapData::kHpFieldNumber;
const int FNpcMapData::kXFieldNumber;
const int FNpcMapData::kYFieldNumber;
const int FNpcMapData::kSpeedFieldNumber;
const int FNpcMapData::kDirFieldNumber;
const int FNpcMapData::kLevelFieldNumber;
const int FNpcMapData::kVisitFieldNumber;
const int FNpcMapData::kCountryIdFieldNumber;
const int FNpcMapData::kTeamidFieldNumber;
const int FNpcMapData::kSeptidFieldNumber;
const int FNpcMapData::kUnionidFieldNumber;
const int FNpcMapData::kMasterTypeFieldNumber;
const int FNpcMapData::kMasteridFieldNumber;
const int FNpcMapData::kMasternameFieldNumber;
const int FNpcMapData::kNameFieldNumber;
const int FNpcMapData::kSkillcountFieldNumber;
const int FNpcMapData::kSignFieldNumber;
const int FNpcMapData::kNinestateFieldNumber;
const int FNpcMapData::kAttackedTypeFieldNumber;
const int FNpcMapData::kMaxhpFieldNumber;
const int FNpcMapData::kPkcampFieldNumber;
const int FNpcMapData::kDesnameFieldNumber;
const int FNpcMapData::kIntoFieldNumber;
const int FNpcMapData::kKillerFieldNumber;
#endif  // !_MSC_VER

FNpcMapData::FNpcMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FNpcMapData)
}

void FNpcMapData::InitAsDefaultInstance() {
}

FNpcMapData::FNpcMapData(const FNpcMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FNpcMapData)
}

void FNpcMapData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  tmpid_ = 0u;
  hp_ = 0u;
  x_ = 0u;
  y_ = 0u;
  speed_ = 0u;
  dir_ = 0u;
  level_ = 0u;
  visit_ = 0u;
  countryid_ = 0u;
  teamid_ = 0u;
  septid_ = 0u;
  unionid_ = 0u;
  master_type_ = 0u;
  masterid_ = 0u;
  mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillcount_ = 0u;
  attacked_type_ = 0u;
  maxhp_ = 0u;
  pkcamp_ = 0u;
  desname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  into_ = false;
  killer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FNpcMapData::~FNpcMapData() {
  // @@protoc_insertion_point(destructor:FNpcMapData)
  SharedDtor();
}

void FNpcMapData::SharedDtor() {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desname_;
  }
  if (this != default_instance_) {
  }
}

void FNpcMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FNpcMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FNpcMapData_descriptor_;
}

const FNpcMapData& FNpcMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FNpcMapData* FNpcMapData::default_instance_ = NULL;

FNpcMapData* FNpcMapData::New() const {
  return new FNpcMapData;
}

void FNpcMapData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FNpcMapData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, level_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(visit_, master_type_);
    masterid_ = 0u;
    if (has_mastername()) {
      if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mastername_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 15925248) {
    ZR_(attacked_type_, maxhp_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    skillcount_ = 0u;
    pkcamp_ = 0u;
    if (has_desname()) {
      if (desname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desname_->clear();
      }
    }
  }
  ZR_(into_, killer_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sign_.Clear();
  ninestate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FNpcMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FNpcMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tmpid;
        break;
      }

      // optional uint32 tmpid = 2;
      case 2: {
        if (tag == 16) {
         parse_tmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }

      // optional uint32 x = 4;
      case 4: {
        if (tag == 32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }

      // optional uint32 y = 5;
      case 5: {
        if (tag == 40) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional uint32 speed = 6;
      case 6: {
        if (tag == 48) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 7;
      case 7: {
        if (tag == 56) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_visit;
        break;
      }

      // optional uint32 visit = 9;
      case 9: {
        if (tag == 72) {
         parse_visit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visit_)));
          set_has_visit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_countryId;
        break;
      }

      // optional uint32 countryId = 10;
      case 10: {
        if (tag == 80) {
         parse_countryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 11;
      case 11: {
        if (tag == 88) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_septid;
        break;
      }

      // optional uint32 septid = 12;
      case 12: {
        if (tag == 96) {
         parse_septid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septid_)));
          set_has_septid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_unionid;
        break;
      }

      // optional uint32 unionid = 13;
      case 13: {
        if (tag == 104) {
         parse_unionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unionid_)));
          set_has_unionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_master_type;
        break;
      }

      // optional uint32 master_type = 14;
      case 14: {
        if (tag == 112) {
         parse_master_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_type_)));
          set_has_master_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_masterid;
        break;
      }

      // optional uint32 masterid = 15;
      case 15: {
        if (tag == 120) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_mastername;
        break;
      }

      // optional string mastername = 16;
      case 16: {
        if (tag == 130) {
         parse_mastername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mastername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mastername().data(), this->mastername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mastername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_name;
        break;
      }

      // optional string name = 17;
      case 17: {
        if (tag == 138) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_skillcount;
        break;
      }

      // optional uint32 skillcount = 18;
      case 18: {
        if (tag == 144) {
         parse_skillcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillcount_)));
          set_has_skillcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_sign;
        break;
      }

      // repeated uint32 sign = 19;
      case 19: {
        if (tag == 152) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_sign())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sign())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_sign;
        if (input->ExpectTag(162)) goto parse_ninestate;
        break;
      }

      // repeated .FStateData ninestate = 20;
      case 20: {
        if (tag == 162) {
         parse_ninestate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ninestate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ninestate;
        if (input->ExpectTag(168)) goto parse_attacked_type;
        break;
      }

      // optional uint32 attacked_type = 21;
      case 21: {
        if (tag == 168) {
         parse_attacked_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacked_type_)));
          set_has_attacked_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_maxhp;
        break;
      }

      // optional uint32 maxhp = 22;
      case 22: {
        if (tag == 176) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_pkcamp;
        break;
      }

      // optional uint32 pkcamp = 23;
      case 23: {
        if (tag == 184) {
         parse_pkcamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkcamp_)));
          set_has_pkcamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_desname;
        break;
      }

      // optional string desname = 24;
      case 24: {
        if (tag == 194) {
         parse_desname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desname().data(), this->desname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_into;
        break;
      }

      // optional bool into = 25 [default = false];
      case 25: {
        if (tag == 200) {
         parse_into:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &into_)));
          set_has_into();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_killer;
        break;
      }

      // optional uint32 killer = 26;
      case 26: {
        if (tag == 208) {
         parse_killer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_)));
          set_has_killer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FNpcMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FNpcMapData)
  return false;
#undef DO_
}

void FNpcMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FNpcMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 tmpid = 2;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tmpid(), output);
  }

  // optional uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  // optional uint32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->x(), output);
  }

  // optional uint32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->y(), output);
  }

  // optional uint32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->speed(), output);
  }

  // optional uint32 dir = 7;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dir(), output);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional uint32 visit = 9;
  if (has_visit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->visit(), output);
  }

  // optional uint32 countryId = 10;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->countryid(), output);
  }

  // optional uint32 teamid = 11;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->teamid(), output);
  }

  // optional uint32 septid = 12;
  if (has_septid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->septid(), output);
  }

  // optional uint32 unionid = 13;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->unionid(), output);
  }

  // optional uint32 master_type = 14;
  if (has_master_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->master_type(), output);
  }

  // optional uint32 masterid = 15;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->masterid(), output);
  }

  // optional string mastername = 16;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->mastername(), output);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->name(), output);
  }

  // optional uint32 skillcount = 18;
  if (has_skillcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->skillcount(), output);
  }

  // repeated uint32 sign = 19;
  for (int i = 0; i < this->sign_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->sign(i), output);
  }

  // repeated .FStateData ninestate = 20;
  for (int i = 0; i < this->ninestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->ninestate(i), output);
  }

  // optional uint32 attacked_type = 21;
  if (has_attacked_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->attacked_type(), output);
  }

  // optional uint32 maxhp = 22;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->maxhp(), output);
  }

  // optional uint32 pkcamp = 23;
  if (has_pkcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->pkcamp(), output);
  }

  // optional string desname = 24;
  if (has_desname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desname().data(), this->desname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->desname(), output);
  }

  // optional bool into = 25 [default = false];
  if (has_into()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->into(), output);
  }

  // optional uint32 killer = 26;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->killer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FNpcMapData)
}

::google::protobuf::uint8* FNpcMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNpcMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 tmpid = 2;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tmpid(), target);
  }

  // optional uint32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  // optional uint32 x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->x(), target);
  }

  // optional uint32 y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->y(), target);
  }

  // optional uint32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->speed(), target);
  }

  // optional uint32 dir = 7;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dir(), target);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // optional uint32 visit = 9;
  if (has_visit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->visit(), target);
  }

  // optional uint32 countryId = 10;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->countryid(), target);
  }

  // optional uint32 teamid = 11;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->teamid(), target);
  }

  // optional uint32 septid = 12;
  if (has_septid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->septid(), target);
  }

  // optional uint32 unionid = 13;
  if (has_unionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->unionid(), target);
  }

  // optional uint32 master_type = 14;
  if (has_master_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->master_type(), target);
  }

  // optional uint32 masterid = 15;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->masterid(), target);
  }

  // optional string mastername = 16;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->mastername(), target);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->name(), target);
  }

  // optional uint32 skillcount = 18;
  if (has_skillcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->skillcount(), target);
  }

  // repeated uint32 sign = 19;
  for (int i = 0; i < this->sign_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->sign(i), target);
  }

  // repeated .FStateData ninestate = 20;
  for (int i = 0; i < this->ninestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->ninestate(i), target);
  }

  // optional uint32 attacked_type = 21;
  if (has_attacked_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->attacked_type(), target);
  }

  // optional uint32 maxhp = 22;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->maxhp(), target);
  }

  // optional uint32 pkcamp = 23;
  if (has_pkcamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->pkcamp(), target);
  }

  // optional string desname = 24;
  if (has_desname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desname().data(), this->desname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->desname(), target);
  }

  // optional bool into = 25 [default = false];
  if (has_into()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->into(), target);
  }

  // optional uint32 killer = 26;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->killer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNpcMapData)
  return target;
}

int FNpcMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 tmpid = 2;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmpid());
    }

    // optional uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint32 dir = 7;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

    // optional uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 visit = 9;
    if (has_visit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visit());
    }

    // optional uint32 countryId = 10;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 teamid = 11;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 septid = 12;
    if (has_septid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septid());
    }

    // optional uint32 unionid = 13;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unionid());
    }

    // optional uint32 master_type = 14;
    if (has_master_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master_type());
    }

    // optional uint32 masterid = 15;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterid());
    }

    // optional string mastername = 16;
    if (has_mastername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mastername());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string name = 17;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 skillcount = 18;
    if (has_skillcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillcount());
    }

    // optional uint32 attacked_type = 21;
    if (has_attacked_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacked_type());
    }

    // optional uint32 maxhp = 22;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 pkcamp = 23;
    if (has_pkcamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkcamp());
    }

    // optional string desname = 24;
    if (has_desname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desname());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool into = 25 [default = false];
    if (has_into()) {
      total_size += 2 + 1;
    }

    // optional uint32 killer = 26;
    if (has_killer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer());
    }

  }
  // repeated uint32 sign = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->sign_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sign(i));
    }
    total_size += 2 * this->sign_size() + data_size;
  }

  // repeated .FStateData ninestate = 20;
  total_size += 2 * this->ninestate_size();
  for (int i = 0; i < this->ninestate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ninestate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FNpcMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FNpcMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FNpcMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FNpcMapData::MergeFrom(const FNpcMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sign_.MergeFrom(from.sign_);
  ninestate_.MergeFrom(from.ninestate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_visit()) {
      set_visit(from.visit());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_septid()) {
      set_septid(from.septid());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
    if (from.has_master_type()) {
      set_master_type(from.master_type());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_mastername()) {
      set_mastername(from.mastername());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_skillcount()) {
      set_skillcount(from.skillcount());
    }
    if (from.has_attacked_type()) {
      set_attacked_type(from.attacked_type());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_pkcamp()) {
      set_pkcamp(from.pkcamp());
    }
    if (from.has_desname()) {
      set_desname(from.desname());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_into()) {
      set_into(from.into());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FNpcMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNpcMapData::CopyFrom(const FNpcMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNpcMapData::IsInitialized() const {

  return true;
}

void FNpcMapData::Swap(FNpcMapData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tmpid_, other->tmpid_);
    std::swap(hp_, other->hp_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(speed_, other->speed_);
    std::swap(dir_, other->dir_);
    std::swap(level_, other->level_);
    std::swap(visit_, other->visit_);
    std::swap(countryid_, other->countryid_);
    std::swap(teamid_, other->teamid_);
    std::swap(septid_, other->septid_);
    std::swap(unionid_, other->unionid_);
    std::swap(master_type_, other->master_type_);
    std::swap(masterid_, other->masterid_);
    std::swap(mastername_, other->mastername_);
    std::swap(name_, other->name_);
    std::swap(skillcount_, other->skillcount_);
    sign_.Swap(&other->sign_);
    ninestate_.Swap(&other->ninestate_);
    std::swap(attacked_type_, other->attacked_type_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(pkcamp_, other->pkcamp_);
    std::swap(desname_, other->desname_);
    std::swap(into_, other->into_);
    std::swap(killer_, other->killer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FNpcMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FNpcMapData_descriptor_;
  metadata.reflection = FNpcMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FStateData::kStateidFieldNumber;
const int FStateData::kTimeFieldNumber;
const int FStateData::kLevelFieldNumber;
const int FStateData::kLinkpointFieldNumber;
#endif  // !_MSC_VER

FStateData::FStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FStateData)
}

void FStateData::InitAsDefaultInstance() {
}

FStateData::FStateData(const FStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FStateData)
}

void FStateData::SharedCtor() {
  _cached_size_ = 0;
  stateid_ = GOOGLE_ULONGLONG(0);
  time_ = 0;
  level_ = 0;
  linkpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FStateData::~FStateData() {
  // @@protoc_insertion_point(destructor:FStateData)
  SharedDtor();
}

void FStateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FStateData_descriptor_;
}

const FStateData& FStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FStateData* FStateData::default_instance_ = NULL;

FStateData* FStateData::New() const {
  return new FStateData;
}

void FStateData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FStateData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stateid_, linkpoint_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FStateData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_linkpoint;
        break;
      }

      // optional uint32 linkpoint = 4;
      case 4: {
        if (tag == 32) {
         parse_linkpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linkpoint_)));
          set_has_linkpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FStateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FStateData)
  return false;
#undef DO_
}

void FStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FStateData)
  // optional uint64 stateid = 1;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stateid(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional uint32 linkpoint = 4;
  if (has_linkpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->linkpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FStateData)
}

::google::protobuf::uint8* FStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FStateData)
  // optional uint64 stateid = 1;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stateid(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional uint32 linkpoint = 4;
  if (has_linkpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->linkpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FStateData)
  return target;
}

int FStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stateid = 1;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stateid());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 linkpoint = 4;
    if (has_linkpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linkpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FStateData::MergeFrom(const FStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_linkpoint()) {
      set_linkpoint(from.linkpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FStateData::CopyFrom(const FStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FStateData::IsInitialized() const {

  return true;
}

void FStateData::Swap(FStateData* other) {
  if (other != this) {
    std::swap(stateid_, other->stateid_);
    std::swap(time_, other->time_);
    std::swap(level_, other->level_);
    std::swap(linkpoint_, other->linkpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FStateData_descriptor_;
  metadata.reflection = FStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FCharacterMapShow::kFaceFieldNumber;
const int FCharacterMapShow::kHairstyleFieldNumber;
const int FCharacterMapShow::kHaircolorFieldNumber;
const int FCharacterMapShow::kWeaponFieldNumber;
const int FCharacterMapShow::kCoatFieldNumber;
const int FCharacterMapShow::kHorseFieldNumber;
const int FCharacterMapShow::kWingFieldNumber;
#endif  // !_MSC_VER

FCharacterMapShow::FCharacterMapShow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FCharacterMapShow)
}

void FCharacterMapShow::InitAsDefaultInstance() {
}

FCharacterMapShow::FCharacterMapShow(const FCharacterMapShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FCharacterMapShow)
}

void FCharacterMapShow::SharedCtor() {
  _cached_size_ = 0;
  face_ = 0u;
  hairstyle_ = 0u;
  haircolor_ = 0u;
  weapon_ = 0u;
  coat_ = 0u;
  horse_ = 0u;
  wing_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FCharacterMapShow::~FCharacterMapShow() {
  // @@protoc_insertion_point(destructor:FCharacterMapShow)
  SharedDtor();
}

void FCharacterMapShow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FCharacterMapShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCharacterMapShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FCharacterMapShow_descriptor_;
}

const FCharacterMapShow& FCharacterMapShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FCharacterMapShow* FCharacterMapShow::default_instance_ = NULL;

FCharacterMapShow* FCharacterMapShow::New() const {
  return new FCharacterMapShow;
}

void FCharacterMapShow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FCharacterMapShow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(face_, wing_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FCharacterMapShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FCharacterMapShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 face = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hairstyle;
        break;
      }

      // optional uint32 hairstyle = 2;
      case 2: {
        if (tag == 16) {
         parse_hairstyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hairstyle_)));
          set_has_hairstyle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 3;
      case 3: {
        if (tag == 24) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_weapon;
        break;
      }

      // optional uint32 weapon = 4;
      case 4: {
        if (tag == 32) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coat;
        break;
      }

      // optional uint32 coat = 5;
      case 5: {
        if (tag == 40) {
         parse_coat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coat_)));
          set_has_coat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_horse;
        break;
      }

      // optional uint32 horse = 6;
      case 6: {
        if (tag == 48) {
         parse_horse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horse_)));
          set_has_horse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_wing;
        break;
      }

      // optional uint32 wing = 7;
      case 7: {
        if (tag == 56) {
         parse_wing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wing_)));
          set_has_wing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FCharacterMapShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FCharacterMapShow)
  return false;
#undef DO_
}

void FCharacterMapShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FCharacterMapShow)
  // optional uint32 face = 1;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->face(), output);
  }

  // optional uint32 hairstyle = 2;
  if (has_hairstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hairstyle(), output);
  }

  // optional uint32 haircolor = 3;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->haircolor(), output);
  }

  // optional uint32 weapon = 4;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->weapon(), output);
  }

  // optional uint32 coat = 5;
  if (has_coat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coat(), output);
  }

  // optional uint32 horse = 6;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->horse(), output);
  }

  // optional uint32 wing = 7;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->wing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FCharacterMapShow)
}

::google::protobuf::uint8* FCharacterMapShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FCharacterMapShow)
  // optional uint32 face = 1;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->face(), target);
  }

  // optional uint32 hairstyle = 2;
  if (has_hairstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hairstyle(), target);
  }

  // optional uint32 haircolor = 3;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->haircolor(), target);
  }

  // optional uint32 weapon = 4;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->weapon(), target);
  }

  // optional uint32 coat = 5;
  if (has_coat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->coat(), target);
  }

  // optional uint32 horse = 6;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->horse(), target);
  }

  // optional uint32 wing = 7;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->wing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FCharacterMapShow)
  return target;
}

int FCharacterMapShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 face = 1;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 hairstyle = 2;
    if (has_hairstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hairstyle());
    }

    // optional uint32 haircolor = 3;
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 weapon = 4;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon());
    }

    // optional uint32 coat = 5;
    if (has_coat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coat());
    }

    // optional uint32 horse = 6;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horse());
    }

    // optional uint32 wing = 7;
    if (has_wing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCharacterMapShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FCharacterMapShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FCharacterMapShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FCharacterMapShow::MergeFrom(const FCharacterMapShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_hairstyle()) {
      set_hairstyle(from.hairstyle());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_coat()) {
      set_coat(from.coat());
    }
    if (from.has_horse()) {
      set_horse(from.horse());
    }
    if (from.has_wing()) {
      set_wing(from.wing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FCharacterMapShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCharacterMapShow::CopyFrom(const FCharacterMapShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCharacterMapShow::IsInitialized() const {

  return true;
}

void FCharacterMapShow::Swap(FCharacterMapShow* other) {
  if (other != this) {
    std::swap(face_, other->face_);
    std::swap(hairstyle_, other->hairstyle_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(weapon_, other->weapon_);
    std::swap(coat_, other->coat_);
    std::swap(horse_, other->horse_);
    std::swap(wing_, other->wing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FCharacterMapShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FCharacterMapShow_descriptor_;
  metadata.reflection = FCharacterMapShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FCharacterMapData::kMapShowFieldNumber;
const int FCharacterMapData::kIdFieldNumber;
const int FCharacterMapData::kCountryFieldNumber;
const int FCharacterMapData::kSeptOfficerFieldNumber;
const int FCharacterMapData::kLevelFieldNumber;
const int FCharacterMapData::kXFieldNumber;
const int FCharacterMapData::kYFieldNumber;
const int FCharacterMapData::kZFieldNumber;
const int FCharacterMapData::kDirFieldNumber;
const int FCharacterMapData::kMoveSpeedFieldNumber;
const int FCharacterMapData::kEvilvalueFieldNumber;
const int FCharacterMapData::kQuestStateFieldNumber;
const int FCharacterMapData::kShopNameFieldNumber;
const int FCharacterMapData::kShopStateFieldNumber;
const int FCharacterMapData::kShopNameColorFieldNumber;
const int FCharacterMapData::kNinestateFieldNumber;
const int FCharacterMapData::kNameFieldNumber;
const int FCharacterMapData::kSeptnameFieldNumber;
const int FCharacterMapData::kTitleFieldNumber;
const int FCharacterMapData::kTeamNameFieldNumber;
const int FCharacterMapData::kWorldLevelFieldNumber;
const int FCharacterMapData::kGohomeFieldNumber;
const int FCharacterMapData::kChariotTempidFieldNumber;
const int FCharacterMapData::kChariotMastertypeFieldNumber;
const int FCharacterMapData::kProfessionFieldNumber;
const int FCharacterMapData::kIsGoldShopFieldNumber;
const int FCharacterMapData::kHpFieldNumber;
const int FCharacterMapData::kMaxhpFieldNumber;
const int FCharacterMapData::kPkcampFieldNumber;
const int FCharacterMapData::kCitywarwinnerFieldNumber;
const int FCharacterMapData::kDuelmodeFieldNumber;
const int FCharacterMapData::kCastleLevelFieldNumber;
const int FCharacterMapData::kWingidFieldNumber;
const int FCharacterMapData::kWinglevelFieldNumber;
const int FCharacterMapData::kWingstrenglevelFieldNumber;
const int FCharacterMapData::kSubprofessionFieldNumber;
const int FCharacterMapData::kNewtitleFieldNumber;
#endif  // !_MSC_VER

FCharacterMapData::FCharacterMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FCharacterMapData)
}

void FCharacterMapData::InitAsDefaultInstance() {
  mapshow_ = const_cast< ::FCharacterMapShow*>(&::FCharacterMapShow::default_instance());
}

FCharacterMapData::FCharacterMapData(const FCharacterMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FCharacterMapData)
}

void FCharacterMapData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapshow_ = NULL;
  id_ = 0u;
  country_ = 0u;
  septofficer_ = 0u;
  level_ = 0u;
  x_ = 0u;
  y_ = 0u;
  z_ = 0u;
  dir_ = 0u;
  movespeed_ = 0u;
  evilvalue_ = 0u;
  queststate_ = 0u;
  shopname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shopstate_ = 0u;
  shopnamecolor_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  septname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worldlevel_ = 0u;
  gohome_ = 0u;
  chariot_tempid_ = 0u;
  chariot_mastertype_ = 0u;
  profession_ = 0;
  is_gold_shop_ = false;
  hp_ = 0u;
  maxhp_ = 0u;
  pkcamp_ = 0u;
  citywarwinner_ = false;
  duelmode_ = 0u;
  castle_level_ = 0u;
  wingid_ = 0u;
  winglevel_ = 0u;
  wingstrenglevel_ = 0u;
  subprofession_ = 0u;
  newtitle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FCharacterMapData::~FCharacterMapData() {
  // @@protoc_insertion_point(destructor:FCharacterMapData)
  SharedDtor();
}

void FCharacterMapData::SharedDtor() {
  if (shopname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shopname_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (septname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete septname_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (this != default_instance_) {
    delete mapshow_;
  }
}

void FCharacterMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCharacterMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FCharacterMapData_descriptor_;
}

const FCharacterMapData& FCharacterMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FCharacterMapData* FCharacterMapData::default_instance_ = NULL;

FCharacterMapData* FCharacterMapData::New() const {
  return new FCharacterMapData;
}

void FCharacterMapData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FCharacterMapData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, z_);
    if (has_mapshow()) {
      if (mapshow_ != NULL) mapshow_->::FCharacterMapShow::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(dir_, evilvalue_);
    ZR_(queststate_, shopstate_);
    if (has_shopname()) {
      if (shopname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shopname_->clear();
      }
    }
    shopnamecolor_ = 0u;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(gohome_, chariot_mastertype_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_septname()) {
      if (septname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        septname_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamname_->clear();
      }
    }
    worldlevel_ = 0u;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(profession_, castle_level_);
  }
  if (_has_bits_[32 / 32] & 31) {
    ZR_(wingid_, newtitle_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ninestate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FCharacterMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FCharacterMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FCharacterMapShow mapShow = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapshow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_country;
        break;
      }

      // optional uint32 country = 3;
      case 3: {
        if (tag == 24) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_septOfficer;
        break;
      }

      // optional uint32 septOfficer = 4;
      case 4: {
        if (tag == 32) {
         parse_septOfficer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septofficer_)));
          set_has_septofficer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_x;
        break;
      }

      // optional uint32 x = 7;
      case 7: {
        if (tag == 56) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_y;
        break;
      }

      // optional uint32 y = 8;
      case 8: {
        if (tag == 64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 9;
      case 9: {
        if (tag == 72) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_moveSpeed;
        break;
      }

      // optional uint32 moveSpeed = 10;
      case 10: {
        if (tag == 80) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_evilvalue;
        break;
      }

      // optional uint32 evilvalue = 11;
      case 11: {
        if (tag == 88) {
         parse_evilvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evilvalue_)));
          set_has_evilvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_questState;
        break;
      }

      // optional uint32 questState = 12;
      case 12: {
        if (tag == 96) {
         parse_questState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queststate_)));
          set_has_queststate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_shopName;
        break;
      }

      // optional string shopName = 13;
      case 13: {
        if (tag == 106) {
         parse_shopName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shopname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shopname().data(), this->shopname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shopname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_shopState;
        break;
      }

      // optional uint32 shopState = 14;
      case 14: {
        if (tag == 112) {
         parse_shopState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopstate_)));
          set_has_shopstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_shopNameColor;
        break;
      }

      // optional uint32 shopNameColor = 15;
      case 15: {
        if (tag == 120) {
         parse_shopNameColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopnamecolor_)));
          set_has_shopnamecolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_ninestate;
        break;
      }

      // repeated .FStateData ninestate = 16;
      case 16: {
        if (tag == 130) {
         parse_ninestate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ninestate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_ninestate;
        if (input->ExpectTag(138)) goto parse_name;
        break;
      }

      // optional string name = 17;
      case 17: {
        if (tag == 138) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_septname;
        break;
      }

      // optional string septname = 18;
      case 18: {
        if (tag == 146) {
         parse_septname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_septname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->septname().data(), this->septname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "septname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_title;
        break;
      }

      // optional string title = 20;
      case 20: {
        if (tag == 162) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_teamName;
        break;
      }

      // optional string teamName = 21;
      case 21: {
        if (tag == 170) {
         parse_teamName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_worldLevel;
        break;
      }

      // optional uint32 worldLevel = 22;
      case 22: {
        if (tag == 176) {
         parse_worldLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldlevel_)));
          set_has_worldlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gohome;
        break;
      }

      // optional uint32 gohome = 23;
      case 23: {
        if (tag == 184) {
         parse_gohome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gohome_)));
          set_has_gohome();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_chariot_tempid;
        break;
      }

      // optional uint32 chariot_tempid = 24;
      case 24: {
        if (tag == 192) {
         parse_chariot_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chariot_tempid_)));
          set_has_chariot_tempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_chariot_mastertype;
        break;
      }

      // optional uint32 chariot_mastertype = 25;
      case 25: {
        if (tag == 200) {
         parse_chariot_mastertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chariot_mastertype_)));
          set_has_chariot_mastertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_profession;
        break;
      }

      // optional .FProfessionType profession = 26 [default = FProfession_None];
      case 26: {
        if (tag == 208) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FProfessionType_IsValid(value)) {
            set_profession(static_cast< ::FProfessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_is_gold_shop;
        break;
      }

      // optional bool is_gold_shop = 27 [default = false];
      case 27: {
        if (tag == 216) {
         parse_is_gold_shop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gold_shop_)));
          set_has_is_gold_shop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 28;
      case 28: {
        if (tag == 224) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_maxhp;
        break;
      }

      // optional uint32 maxhp = 29;
      case 29: {
        if (tag == 232) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_pkcamp;
        break;
      }

      // optional uint32 pkcamp = 30;
      case 30: {
        if (tag == 240) {
         parse_pkcamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkcamp_)));
          set_has_pkcamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_citywarwinner;
        break;
      }

      // optional bool citywarwinner = 31;
      case 31: {
        if (tag == 248) {
         parse_citywarwinner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &citywarwinner_)));
          set_has_citywarwinner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_duelmode;
        break;
      }

      // optional uint32 duelmode = 32;
      case 32: {
        if (tag == 256) {
         parse_duelmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duelmode_)));
          set_has_duelmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_castle_level;
        break;
      }

      // optional uint32 castle_level = 33;
      case 33: {
        if (tag == 264) {
         parse_castle_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castle_level_)));
          set_has_castle_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_wingid;
        break;
      }

      // optional uint32 wingid = 34;
      case 34: {
        if (tag == 272) {
         parse_wingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_winglevel;
        break;
      }

      // optional uint32 winglevel = 35;
      case 35: {
        if (tag == 280) {
         parse_winglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winglevel_)));
          set_has_winglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_wingstrenglevel;
        break;
      }

      // optional uint32 wingstrenglevel = 36;
      case 36: {
        if (tag == 288) {
         parse_wingstrenglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingstrenglevel_)));
          set_has_wingstrenglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_subprofession;
        break;
      }

      // optional uint32 subprofession = 37;
      case 37: {
        if (tag == 296) {
         parse_subprofession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprofession_)));
          set_has_subprofession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_z;
        break;
      }

      // optional uint32 z = 38;
      case 38: {
        if (tag == 304) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_newtitle;
        break;
      }

      // optional uint32 newtitle = 39;
      case 39: {
        if (tag == 312) {
         parse_newtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newtitle_)));
          set_has_newtitle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FCharacterMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FCharacterMapData)
  return false;
#undef DO_
}

void FCharacterMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FCharacterMapData)
  // optional .FCharacterMapShow mapShow = 1;
  if (has_mapshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapshow(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->country(), output);
  }

  // optional uint32 septOfficer = 4;
  if (has_septofficer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->septofficer(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 x = 7;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->x(), output);
  }

  // optional uint32 y = 8;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->y(), output);
  }

  // optional uint32 dir = 9;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dir(), output);
  }

  // optional uint32 moveSpeed = 10;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->movespeed(), output);
  }

  // optional uint32 evilvalue = 11;
  if (has_evilvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->evilvalue(), output);
  }

  // optional uint32 questState = 12;
  if (has_queststate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->queststate(), output);
  }

  // optional string shopName = 13;
  if (has_shopname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shopname().data(), this->shopname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shopname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->shopname(), output);
  }

  // optional uint32 shopState = 14;
  if (has_shopstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->shopstate(), output);
  }

  // optional uint32 shopNameColor = 15;
  if (has_shopnamecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->shopnamecolor(), output);
  }

  // repeated .FStateData ninestate = 16;
  for (int i = 0; i < this->ninestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->ninestate(i), output);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->name(), output);
  }

  // optional string septname = 18;
  if (has_septname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->septname().data(), this->septname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "septname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->septname(), output);
  }

  // optional string title = 20;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->title(), output);
  }

  // optional string teamName = 21;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->teamname(), output);
  }

  // optional uint32 worldLevel = 22;
  if (has_worldlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->worldlevel(), output);
  }

  // optional uint32 gohome = 23;
  if (has_gohome()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gohome(), output);
  }

  // optional uint32 chariot_tempid = 24;
  if (has_chariot_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->chariot_tempid(), output);
  }

  // optional uint32 chariot_mastertype = 25;
  if (has_chariot_mastertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->chariot_mastertype(), output);
  }

  // optional .FProfessionType profession = 26 [default = FProfession_None];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->profession(), output);
  }

  // optional bool is_gold_shop = 27 [default = false];
  if (has_is_gold_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_gold_shop(), output);
  }

  // optional uint32 hp = 28;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->hp(), output);
  }

  // optional uint32 maxhp = 29;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->maxhp(), output);
  }

  // optional uint32 pkcamp = 30;
  if (has_pkcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->pkcamp(), output);
  }

  // optional bool citywarwinner = 31;
  if (has_citywarwinner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->citywarwinner(), output);
  }

  // optional uint32 duelmode = 32;
  if (has_duelmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->duelmode(), output);
  }

  // optional uint32 castle_level = 33;
  if (has_castle_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->castle_level(), output);
  }

  // optional uint32 wingid = 34;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->wingid(), output);
  }

  // optional uint32 winglevel = 35;
  if (has_winglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->winglevel(), output);
  }

  // optional uint32 wingstrenglevel = 36;
  if (has_wingstrenglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->wingstrenglevel(), output);
  }

  // optional uint32 subprofession = 37;
  if (has_subprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->subprofession(), output);
  }

  // optional uint32 z = 38;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->z(), output);
  }

  // optional uint32 newtitle = 39;
  if (has_newtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->newtitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FCharacterMapData)
}

::google::protobuf::uint8* FCharacterMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FCharacterMapData)
  // optional .FCharacterMapShow mapShow = 1;
  if (has_mapshow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapshow(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 country = 3;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->country(), target);
  }

  // optional uint32 septOfficer = 4;
  if (has_septofficer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->septofficer(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 x = 7;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->x(), target);
  }

  // optional uint32 y = 8;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->y(), target);
  }

  // optional uint32 dir = 9;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dir(), target);
  }

  // optional uint32 moveSpeed = 10;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->movespeed(), target);
  }

  // optional uint32 evilvalue = 11;
  if (has_evilvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->evilvalue(), target);
  }

  // optional uint32 questState = 12;
  if (has_queststate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->queststate(), target);
  }

  // optional string shopName = 13;
  if (has_shopname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shopname().data(), this->shopname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shopname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->shopname(), target);
  }

  // optional uint32 shopState = 14;
  if (has_shopstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->shopstate(), target);
  }

  // optional uint32 shopNameColor = 15;
  if (has_shopnamecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->shopnamecolor(), target);
  }

  // repeated .FStateData ninestate = 16;
  for (int i = 0; i < this->ninestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->ninestate(i), target);
  }

  // optional string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->name(), target);
  }

  // optional string septname = 18;
  if (has_septname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->septname().data(), this->septname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "septname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->septname(), target);
  }

  // optional string title = 20;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->title(), target);
  }

  // optional string teamName = 21;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->teamname(), target);
  }

  // optional uint32 worldLevel = 22;
  if (has_worldlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->worldlevel(), target);
  }

  // optional uint32 gohome = 23;
  if (has_gohome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gohome(), target);
  }

  // optional uint32 chariot_tempid = 24;
  if (has_chariot_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->chariot_tempid(), target);
  }

  // optional uint32 chariot_mastertype = 25;
  if (has_chariot_mastertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->chariot_mastertype(), target);
  }

  // optional .FProfessionType profession = 26 [default = FProfession_None];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->profession(), target);
  }

  // optional bool is_gold_shop = 27 [default = false];
  if (has_is_gold_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_gold_shop(), target);
  }

  // optional uint32 hp = 28;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->hp(), target);
  }

  // optional uint32 maxhp = 29;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->maxhp(), target);
  }

  // optional uint32 pkcamp = 30;
  if (has_pkcamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->pkcamp(), target);
  }

  // optional bool citywarwinner = 31;
  if (has_citywarwinner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->citywarwinner(), target);
  }

  // optional uint32 duelmode = 32;
  if (has_duelmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->duelmode(), target);
  }

  // optional uint32 castle_level = 33;
  if (has_castle_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->castle_level(), target);
  }

  // optional uint32 wingid = 34;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->wingid(), target);
  }

  // optional uint32 winglevel = 35;
  if (has_winglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->winglevel(), target);
  }

  // optional uint32 wingstrenglevel = 36;
  if (has_wingstrenglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->wingstrenglevel(), target);
  }

  // optional uint32 subprofession = 37;
  if (has_subprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->subprofession(), target);
  }

  // optional uint32 z = 38;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->z(), target);
  }

  // optional uint32 newtitle = 39;
  if (has_newtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->newtitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FCharacterMapData)
  return target;
}

int FCharacterMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FCharacterMapShow mapShow = 1;
    if (has_mapshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapshow());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional uint32 septOfficer = 4;
    if (has_septofficer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septofficer());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 x = 7;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 8;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 z = 38;
    if (has_z()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->z());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dir = 9;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

    // optional uint32 moveSpeed = 10;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

    // optional uint32 evilvalue = 11;
    if (has_evilvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evilvalue());
    }

    // optional uint32 questState = 12;
    if (has_queststate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queststate());
    }

    // optional string shopName = 13;
    if (has_shopname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shopname());
    }

    // optional uint32 shopState = 14;
    if (has_shopstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopstate());
    }

    // optional uint32 shopNameColor = 15;
    if (has_shopnamecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopnamecolor());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string name = 17;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string septname = 18;
    if (has_septname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->septname());
    }

    // optional string title = 20;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string teamName = 21;
    if (has_teamname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

    // optional uint32 worldLevel = 22;
    if (has_worldlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldlevel());
    }

    // optional uint32 gohome = 23;
    if (has_gohome()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gohome());
    }

    // optional uint32 chariot_tempid = 24;
    if (has_chariot_tempid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chariot_tempid());
    }

    // optional uint32 chariot_mastertype = 25;
    if (has_chariot_mastertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chariot_mastertype());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .FProfessionType profession = 26 [default = FProfession_None];
    if (has_profession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional bool is_gold_shop = 27 [default = false];
    if (has_is_gold_shop()) {
      total_size += 2 + 1;
    }

    // optional uint32 hp = 28;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 maxhp = 29;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 pkcamp = 30;
    if (has_pkcamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkcamp());
    }

    // optional bool citywarwinner = 31;
    if (has_citywarwinner()) {
      total_size += 2 + 1;
    }

    // optional uint32 duelmode = 32;
    if (has_duelmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duelmode());
    }

    // optional uint32 castle_level = 33;
    if (has_castle_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castle_level());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 wingid = 34;
    if (has_wingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 winglevel = 35;
    if (has_winglevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winglevel());
    }

    // optional uint32 wingstrenglevel = 36;
    if (has_wingstrenglevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingstrenglevel());
    }

    // optional uint32 subprofession = 37;
    if (has_subprofession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subprofession());
    }

    // optional uint32 newtitle = 39;
    if (has_newtitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newtitle());
    }

  }
  // repeated .FStateData ninestate = 16;
  total_size += 2 * this->ninestate_size();
  for (int i = 0; i < this->ninestate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ninestate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCharacterMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FCharacterMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FCharacterMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FCharacterMapData::MergeFrom(const FCharacterMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ninestate_.MergeFrom(from.ninestate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapshow()) {
      mutable_mapshow()->::FCharacterMapShow::MergeFrom(from.mapshow());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_septofficer()) {
      set_septofficer(from.septofficer());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_evilvalue()) {
      set_evilvalue(from.evilvalue());
    }
    if (from.has_queststate()) {
      set_queststate(from.queststate());
    }
    if (from.has_shopname()) {
      set_shopname(from.shopname());
    }
    if (from.has_shopstate()) {
      set_shopstate(from.shopstate());
    }
    if (from.has_shopnamecolor()) {
      set_shopnamecolor(from.shopnamecolor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_septname()) {
      set_septname(from.septname());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
    if (from.has_worldlevel()) {
      set_worldlevel(from.worldlevel());
    }
    if (from.has_gohome()) {
      set_gohome(from.gohome());
    }
    if (from.has_chariot_tempid()) {
      set_chariot_tempid(from.chariot_tempid());
    }
    if (from.has_chariot_mastertype()) {
      set_chariot_mastertype(from.chariot_mastertype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_is_gold_shop()) {
      set_is_gold_shop(from.is_gold_shop());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_pkcamp()) {
      set_pkcamp(from.pkcamp());
    }
    if (from.has_citywarwinner()) {
      set_citywarwinner(from.citywarwinner());
    }
    if (from.has_duelmode()) {
      set_duelmode(from.duelmode());
    }
    if (from.has_castle_level()) {
      set_castle_level(from.castle_level());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_winglevel()) {
      set_winglevel(from.winglevel());
    }
    if (from.has_wingstrenglevel()) {
      set_wingstrenglevel(from.wingstrenglevel());
    }
    if (from.has_subprofession()) {
      set_subprofession(from.subprofession());
    }
    if (from.has_newtitle()) {
      set_newtitle(from.newtitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FCharacterMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCharacterMapData::CopyFrom(const FCharacterMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCharacterMapData::IsInitialized() const {

  return true;
}

void FCharacterMapData::Swap(FCharacterMapData* other) {
  if (other != this) {
    std::swap(mapshow_, other->mapshow_);
    std::swap(id_, other->id_);
    std::swap(country_, other->country_);
    std::swap(septofficer_, other->septofficer_);
    std::swap(level_, other->level_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(dir_, other->dir_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(evilvalue_, other->evilvalue_);
    std::swap(queststate_, other->queststate_);
    std::swap(shopname_, other->shopname_);
    std::swap(shopstate_, other->shopstate_);
    std::swap(shopnamecolor_, other->shopnamecolor_);
    ninestate_.Swap(&other->ninestate_);
    std::swap(name_, other->name_);
    std::swap(septname_, other->septname_);
    std::swap(title_, other->title_);
    std::swap(teamname_, other->teamname_);
    std::swap(worldlevel_, other->worldlevel_);
    std::swap(gohome_, other->gohome_);
    std::swap(chariot_tempid_, other->chariot_tempid_);
    std::swap(chariot_mastertype_, other->chariot_mastertype_);
    std::swap(profession_, other->profession_);
    std::swap(is_gold_shop_, other->is_gold_shop_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(pkcamp_, other->pkcamp_);
    std::swap(citywarwinner_, other->citywarwinner_);
    std::swap(duelmode_, other->duelmode_);
    std::swap(castle_level_, other->castle_level_);
    std::swap(wingid_, other->wingid_);
    std::swap(winglevel_, other->winglevel_);
    std::swap(wingstrenglevel_, other->wingstrenglevel_);
    std::swap(subprofession_, other->subprofession_);
    std::swap(newtitle_, other->newtitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FCharacterMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FCharacterMapData_descriptor_;
  metadata.reflection = FCharacterMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FNpcDeathMapData::kIdFieldNumber;
const int FNpcDeathMapData::kTmpidFieldNumber;
const int FNpcDeathMapData::kXFieldNumber;
const int FNpcDeathMapData::kYFieldNumber;
const int FNpcDeathMapData::kDirFieldNumber;
const int FNpcDeathMapData::kDisappearTimeFieldNumber;
const int FNpcDeathMapData::kNameFieldNumber;
const int FNpcDeathMapData::kKillerFieldNumber;
#endif  // !_MSC_VER

FNpcDeathMapData::FNpcDeathMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FNpcDeathMapData)
}

void FNpcDeathMapData::InitAsDefaultInstance() {
}

FNpcDeathMapData::FNpcDeathMapData(const FNpcDeathMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FNpcDeathMapData)
}

void FNpcDeathMapData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  tmpid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  dir_ = 0u;
  disappeartime_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  killer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FNpcDeathMapData::~FNpcDeathMapData() {
  // @@protoc_insertion_point(destructor:FNpcDeathMapData)
  SharedDtor();
}

void FNpcDeathMapData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FNpcDeathMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FNpcDeathMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FNpcDeathMapData_descriptor_;
}

const FNpcDeathMapData& FNpcDeathMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FNpcDeathMapData* FNpcDeathMapData::default_instance_ = NULL;

FNpcDeathMapData* FNpcDeathMapData::New() const {
  return new FNpcDeathMapData;
}

void FNpcDeathMapData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FNpcDeathMapData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, disappeartime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    killer_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FNpcDeathMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FNpcDeathMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tmpid;
        break;
      }

      // optional uint32 tmpid = 2;
      case 2: {
        if (tag == 16) {
         parse_tmpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmpid_)));
          set_has_tmpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 5;
      case 5: {
        if (tag == 40) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_disappearTime;
        break;
      }

      // optional uint32 disappearTime = 6;
      case 6: {
        if (tag == 48) {
         parse_disappearTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disappeartime_)));
          set_has_disappeartime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_killer;
        break;
      }

      // optional uint32 killer = 8;
      case 8: {
        if (tag == 64) {
         parse_killer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_)));
          set_has_killer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FNpcDeathMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FNpcDeathMapData)
  return false;
#undef DO_
}

void FNpcDeathMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FNpcDeathMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 tmpid = 2;
  if (has_tmpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tmpid(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional uint32 dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dir(), output);
  }

  // optional uint32 disappearTime = 6;
  if (has_disappeartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->disappeartime(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional uint32 killer = 8;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->killer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FNpcDeathMapData)
}

::google::protobuf::uint8* FNpcDeathMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNpcDeathMapData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 tmpid = 2;
  if (has_tmpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tmpid(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional uint32 dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dir(), target);
  }

  // optional uint32 disappearTime = 6;
  if (has_disappeartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->disappeartime(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional uint32 killer = 8;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->killer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNpcDeathMapData)
  return target;
}

int FNpcDeathMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 tmpid = 2;
    if (has_tmpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmpid());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

    // optional uint32 disappearTime = 6;
    if (has_disappeartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disappeartime());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 killer = 8;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FNpcDeathMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FNpcDeathMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FNpcDeathMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FNpcDeathMapData::MergeFrom(const FNpcDeathMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tmpid()) {
      set_tmpid(from.tmpid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_disappeartime()) {
      set_disappeartime(from.disappeartime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FNpcDeathMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNpcDeathMapData::CopyFrom(const FNpcDeathMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNpcDeathMapData::IsInitialized() const {

  return true;
}

void FNpcDeathMapData::Swap(FNpcDeathMapData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tmpid_, other->tmpid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(dir_, other->dir_);
    std::swap(disappeartime_, other->disappeartime_);
    std::swap(name_, other->name_);
    std::swap(killer_, other->killer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FNpcDeathMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FNpcDeathMapData_descriptor_;
  metadata.reflection = FNpcDeathMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FCharacterMainData::kMapDataFieldNumber;
const int FCharacterMainData::kMpFieldNumber;
const int FCharacterMainData::kMaxmpFieldNumber;
const int FCharacterMainData::kExpFieldNumber;
const int FCharacterMainData::kStrengthFieldNumber;
const int FCharacterMainData::kDexterityFieldNumber;
const int FCharacterMainData::kMentalityFieldNumber;
const int FCharacterMainData::kConstitutionFieldNumber;
const int FCharacterMainData::kAttrpointFieldNumber;
const int FCharacterMainData::kAttackSpeedFieldNumber;
const int FCharacterMainData::kMinPhysicsFieldNumber;
const int FCharacterMainData::kMaxPhysicsFieldNumber;
const int FCharacterMainData::kMinMagicFieldNumber;
const int FCharacterMainData::kMaxMagicFieldNumber;
const int FCharacterMainData::kPDefenceFieldNumber;
const int FCharacterMainData::kMDefenceFieldNumber;
const int FCharacterMainData::kMoneyFieldNumber;
const int FCharacterMainData::kBindMoneyFieldNumber;
const int FCharacterMainData::kGoldFieldNumber;
const int FCharacterMainData::kBindGoldFieldNumber;
const int FCharacterMainData::kLuckyRateFieldNumber;
const int FCharacterMainData::kAntiLuckyRateFieldNumber;
const int FCharacterMainData::kHeavyRateFieldNumber;
const int FCharacterMainData::kAntiHeavyRateFieldNumber;
const int FCharacterMainData::kHonorFieldNumber;
const int FCharacterMainData::kFuncvalueFieldNumber;
const int FCharacterMainData::kSeptawardFieldNumber;
const int FCharacterMainData::kSeptactiveFieldNumber;
const int FCharacterMainData::kFriendvalueFieldNumber;
const int FCharacterMainData::kSubprofessionFieldNumber;
const int FCharacterMainData::kHorseidFieldNumber;
const int FCharacterMainData::kTotalexpFieldNumber;
const int FCharacterMainData::kZonelimitFieldNumber;
const int FCharacterMainData::kCountryzoneFieldNumber;
const int FCharacterMainData::kResourceFieldNumber;
const int FCharacterMainData::kPetskillFieldNumber;
const int FCharacterMainData::kAutofightFieldNumber;
const int FCharacterMainData::kPropertysFieldNumber;
#endif  // !_MSC_VER

FCharacterMainData::FCharacterMainData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FCharacterMainData)
}

void FCharacterMainData::InitAsDefaultInstance() {
  mapdata_ = const_cast< ::FCharacterMapData*>(&::FCharacterMapData::default_instance());
  propertys_ = const_cast< ::FPropertyValues*>(&::FPropertyValues::default_instance());
}

FCharacterMainData::FCharacterMainData(const FCharacterMainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FCharacterMainData)
}

void FCharacterMainData::SharedCtor() {
  _cached_size_ = 0;
  mapdata_ = NULL;
  mp_ = 0u;
  maxmp_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  strength_ = 0u;
  dexterity_ = 0u;
  mentality_ = 0u;
  constitution_ = 0u;
  attrpoint_ = 0u;
  attackspeed_ = 0u;
  minphysics_ = 0u;
  maxphysics_ = 0u;
  minmagic_ = 0u;
  maxmagic_ = 0u;
  pdefence_ = 0u;
  mdefence_ = 0u;
  money_ = 0u;
  bindmoney_ = 0u;
  gold_ = 0u;
  bindgold_ = 0u;
  luckyrate_ = 0u;
  antiluckyrate_ = 0u;
  heavyrate_ = 0u;
  antiheavyrate_ = 0u;
  honor_ = 0u;
  funcvalue_ = 0u;
  septaward_ = 0u;
  septactive_ = 0u;
  friendvalue_ = 0u;
  subprofession_ = 0u;
  horseid_ = 0u;
  totalexp_ = GOOGLE_ULONGLONG(0);
  zonelimit_ = false;
  countryzone_ = false;
  petskill_ = 0u;
  autofight_ = false;
  propertys_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FCharacterMainData::~FCharacterMainData() {
  // @@protoc_insertion_point(destructor:FCharacterMainData)
  SharedDtor();
}

void FCharacterMainData::SharedDtor() {
  if (this != default_instance_) {
    delete mapdata_;
    delete propertys_;
  }
}

void FCharacterMainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FCharacterMainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FCharacterMainData_descriptor_;
}

const FCharacterMainData& FCharacterMainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FCharacterMainData* FCharacterMainData::default_instance_ = NULL;

FCharacterMainData* FCharacterMainData::New() const {
  return new FCharacterMainData;
}

void FCharacterMainData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FCharacterMainData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mp_, constitution_);
    if (has_mapdata()) {
      if (mapdata_ != NULL) mapdata_->::FCharacterMapData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(attrpoint_, mdefence_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(money_, antiheavyrate_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(honor_, horseid_);
  }
  if (_has_bits_[32 / 32] & 59) {
    ZR_(zonelimit_, autofight_);
    petskill_ = 0u;
    if (has_propertys()) {
      if (propertys_ != NULL) propertys_->::FPropertyValues::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  resource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FCharacterMainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FCharacterMainData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FCharacterMapData mapData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 4;
      case 4: {
        if (tag == 32) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxmp;
        break;
      }

      // optional uint32 maxmp = 5;
      case 5: {
        if (tag == 40) {
         parse_maxmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmp_)));
          set_has_maxmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_strength;
        break;
      }

      // optional uint32 strength = 7;
      case 7: {
        if (tag == 56) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dexterity;
        break;
      }

      // optional uint32 dexterity = 8;
      case 8: {
        if (tag == 64) {
         parse_dexterity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dexterity_)));
          set_has_dexterity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mentality;
        break;
      }

      // optional uint32 mentality = 9;
      case 9: {
        if (tag == 72) {
         parse_mentality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mentality_)));
          set_has_mentality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_constitution;
        break;
      }

      // optional uint32 constitution = 10;
      case 10: {
        if (tag == 80) {
         parse_constitution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &constitution_)));
          set_has_constitution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_attrpoint;
        break;
      }

      // optional uint32 attrpoint = 12;
      case 12: {
        if (tag == 96) {
         parse_attrpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrpoint_)));
          set_has_attrpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_attackSpeed;
        break;
      }

      // optional uint32 attackSpeed = 13;
      case 13: {
        if (tag == 104) {
         parse_attackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackspeed_)));
          set_has_attackspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_minPhysics;
        break;
      }

      // optional uint32 minPhysics = 14;
      case 14: {
        if (tag == 112) {
         parse_minPhysics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minphysics_)));
          set_has_minphysics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_maxPhysics;
        break;
      }

      // optional uint32 maxPhysics = 15;
      case 15: {
        if (tag == 120) {
         parse_maxPhysics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxphysics_)));
          set_has_maxphysics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_minMagic;
        break;
      }

      // optional uint32 minMagic = 16;
      case 16: {
        if (tag == 128) {
         parse_minMagic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minmagic_)));
          set_has_minmagic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_maxMagic;
        break;
      }

      // optional uint32 maxMagic = 17;
      case 17: {
        if (tag == 136) {
         parse_maxMagic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmagic_)));
          set_has_maxmagic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_pDefence;
        break;
      }

      // optional uint32 pDefence = 18;
      case 18: {
        if (tag == 144) {
         parse_pDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdefence_)));
          set_has_pdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_mDefence;
        break;
      }

      // optional uint32 mDefence = 19;
      case 19: {
        if (tag == 152) {
         parse_mDefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdefence_)));
          set_has_mdefence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_money;
        break;
      }

      // optional uint32 money = 20;
      case 20: {
        if (tag == 160) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_bindMoney;
        break;
      }

      // optional uint32 bindMoney = 21;
      case 21: {
        if (tag == 168) {
         parse_bindMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindmoney_)));
          set_has_bindmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 22;
      case 22: {
        if (tag == 176) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_bindGold;
        break;
      }

      // optional uint32 bindGold = 23;
      case 23: {
        if (tag == 184) {
         parse_bindGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_luckyRate;
        break;
      }

      // optional uint32 luckyRate = 24;
      case 24: {
        if (tag == 192) {
         parse_luckyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckyrate_)));
          set_has_luckyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_antiLuckyRate;
        break;
      }

      // optional uint32 antiLuckyRate = 25;
      case 25: {
        if (tag == 200) {
         parse_antiLuckyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antiluckyrate_)));
          set_has_antiluckyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_heavyRate;
        break;
      }

      // optional uint32 heavyRate = 26;
      case 26: {
        if (tag == 208) {
         parse_heavyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heavyrate_)));
          set_has_heavyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_antiHeavyRate;
        break;
      }

      // optional uint32 antiHeavyRate = 27;
      case 27: {
        if (tag == 216) {
         parse_antiHeavyRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antiheavyrate_)));
          set_has_antiheavyrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 28;
      case 28: {
        if (tag == 224) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_funcvalue;
        break;
      }

      // optional uint32 funcvalue = 30;
      case 30: {
        if (tag == 240) {
         parse_funcvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funcvalue_)));
          set_has_funcvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_septaward;
        break;
      }

      // optional uint32 septaward = 31;
      case 31: {
        if (tag == 248) {
         parse_septaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septaward_)));
          set_has_septaward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_septactive;
        break;
      }

      // optional uint32 septactive = 32;
      case 32: {
        if (tag == 256) {
         parse_septactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &septactive_)));
          set_has_septactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_friendvalue;
        break;
      }

      // optional uint32 friendvalue = 33;
      case 33: {
        if (tag == 264) {
         parse_friendvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendvalue_)));
          set_has_friendvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_subprofession;
        break;
      }

      // optional uint32 subprofession = 34;
      case 34: {
        if (tag == 272) {
         parse_subprofession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprofession_)));
          set_has_subprofession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_horseid;
        break;
      }

      // optional uint32 horseid = 35;
      case 35: {
        if (tag == 280) {
         parse_horseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_totalexp;
        break;
      }

      // optional uint64 totalexp = 36;
      case 36: {
        if (tag == 288) {
         parse_totalexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_zonelimit;
        break;
      }

      // optional bool zonelimit = 37;
      case 37: {
        if (tag == 296) {
         parse_zonelimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zonelimit_)));
          set_has_zonelimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_countryzone;
        break;
      }

      // optional bool countryzone = 38;
      case 38: {
        if (tag == 304) {
         parse_countryzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &countryzone_)));
          set_has_countryzone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_resource;
        break;
      }

      // repeated uint64 resource = 39;
      case 39: {
        if (tag == 312) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 312, input, this->mutable_resource())));
        } else if (tag == 314) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_resource())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_resource;
        if (input->ExpectTag(320)) goto parse_petskill;
        break;
      }

      // optional uint32 petskill = 40;
      case 40: {
        if (tag == 320) {
         parse_petskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petskill_)));
          set_has_petskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_autofight;
        break;
      }

      // optional bool autofight = 41;
      case 41: {
        if (tag == 328) {
         parse_autofight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofight_)));
          set_has_autofight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_propertys;
        break;
      }

      // optional .FPropertyValues propertys = 100;
      case 100: {
        if (tag == 802) {
         parse_propertys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_propertys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FCharacterMainData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FCharacterMainData)
  return false;
#undef DO_
}

void FCharacterMainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FCharacterMainData)
  // optional .FCharacterMapData mapData = 1;
  if (has_mapdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapdata(), output);
  }

  // optional uint32 mp = 4;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mp(), output);
  }

  // optional uint32 maxmp = 5;
  if (has_maxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxmp(), output);
  }

  // optional uint64 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->exp(), output);
  }

  // optional uint32 strength = 7;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->strength(), output);
  }

  // optional uint32 dexterity = 8;
  if (has_dexterity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dexterity(), output);
  }

  // optional uint32 mentality = 9;
  if (has_mentality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mentality(), output);
  }

  // optional uint32 constitution = 10;
  if (has_constitution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->constitution(), output);
  }

  // optional uint32 attrpoint = 12;
  if (has_attrpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->attrpoint(), output);
  }

  // optional uint32 attackSpeed = 13;
  if (has_attackspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->attackspeed(), output);
  }

  // optional uint32 minPhysics = 14;
  if (has_minphysics()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->minphysics(), output);
  }

  // optional uint32 maxPhysics = 15;
  if (has_maxphysics()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->maxphysics(), output);
  }

  // optional uint32 minMagic = 16;
  if (has_minmagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->minmagic(), output);
  }

  // optional uint32 maxMagic = 17;
  if (has_maxmagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->maxmagic(), output);
  }

  // optional uint32 pDefence = 18;
  if (has_pdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->pdefence(), output);
  }

  // optional uint32 mDefence = 19;
  if (has_mdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->mdefence(), output);
  }

  // optional uint32 money = 20;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->money(), output);
  }

  // optional uint32 bindMoney = 21;
  if (has_bindmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->bindmoney(), output);
  }

  // optional uint32 gold = 22;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->gold(), output);
  }

  // optional uint32 bindGold = 23;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->bindgold(), output);
  }

  // optional uint32 luckyRate = 24;
  if (has_luckyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->luckyrate(), output);
  }

  // optional uint32 antiLuckyRate = 25;
  if (has_antiluckyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->antiluckyrate(), output);
  }

  // optional uint32 heavyRate = 26;
  if (has_heavyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->heavyrate(), output);
  }

  // optional uint32 antiHeavyRate = 27;
  if (has_antiheavyrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->antiheavyrate(), output);
  }

  // optional uint32 honor = 28;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->honor(), output);
  }

  // optional uint32 funcvalue = 30;
  if (has_funcvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->funcvalue(), output);
  }

  // optional uint32 septaward = 31;
  if (has_septaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->septaward(), output);
  }

  // optional uint32 septactive = 32;
  if (has_septactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->septactive(), output);
  }

  // optional uint32 friendvalue = 33;
  if (has_friendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->friendvalue(), output);
  }

  // optional uint32 subprofession = 34;
  if (has_subprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->subprofession(), output);
  }

  // optional uint32 horseid = 35;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->horseid(), output);
  }

  // optional uint64 totalexp = 36;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->totalexp(), output);
  }

  // optional bool zonelimit = 37;
  if (has_zonelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->zonelimit(), output);
  }

  // optional bool countryzone = 38;
  if (has_countryzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->countryzone(), output);
  }

  // repeated uint64 resource = 39;
  for (int i = 0; i < this->resource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      39, this->resource(i), output);
  }

  // optional uint32 petskill = 40;
  if (has_petskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->petskill(), output);
  }

  // optional bool autofight = 41;
  if (has_autofight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->autofight(), output);
  }

  // optional .FPropertyValues propertys = 100;
  if (has_propertys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->propertys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FCharacterMainData)
}

::google::protobuf::uint8* FCharacterMainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FCharacterMainData)
  // optional .FCharacterMapData mapData = 1;
  if (has_mapdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapdata(), target);
  }

  // optional uint32 mp = 4;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mp(), target);
  }

  // optional uint32 maxmp = 5;
  if (has_maxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxmp(), target);
  }

  // optional uint64 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->exp(), target);
  }

  // optional uint32 strength = 7;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->strength(), target);
  }

  // optional uint32 dexterity = 8;
  if (has_dexterity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dexterity(), target);
  }

  // optional uint32 mentality = 9;
  if (has_mentality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mentality(), target);
  }

  // optional uint32 constitution = 10;
  if (has_constitution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->constitution(), target);
  }

  // optional uint32 attrpoint = 12;
  if (has_attrpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->attrpoint(), target);
  }

  // optional uint32 attackSpeed = 13;
  if (has_attackspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->attackspeed(), target);
  }

  // optional uint32 minPhysics = 14;
  if (has_minphysics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->minphysics(), target);
  }

  // optional uint32 maxPhysics = 15;
  if (has_maxphysics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->maxphysics(), target);
  }

  // optional uint32 minMagic = 16;
  if (has_minmagic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->minmagic(), target);
  }

  // optional uint32 maxMagic = 17;
  if (has_maxmagic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->maxmagic(), target);
  }

  // optional uint32 pDefence = 18;
  if (has_pdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->pdefence(), target);
  }

  // optional uint32 mDefence = 19;
  if (has_mdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->mdefence(), target);
  }

  // optional uint32 money = 20;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->money(), target);
  }

  // optional uint32 bindMoney = 21;
  if (has_bindmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->bindmoney(), target);
  }

  // optional uint32 gold = 22;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->gold(), target);
  }

  // optional uint32 bindGold = 23;
  if (has_bindgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->bindgold(), target);
  }

  // optional uint32 luckyRate = 24;
  if (has_luckyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->luckyrate(), target);
  }

  // optional uint32 antiLuckyRate = 25;
  if (has_antiluckyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->antiluckyrate(), target);
  }

  // optional uint32 heavyRate = 26;
  if (has_heavyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->heavyrate(), target);
  }

  // optional uint32 antiHeavyRate = 27;
  if (has_antiheavyrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->antiheavyrate(), target);
  }

  // optional uint32 honor = 28;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->honor(), target);
  }

  // optional uint32 funcvalue = 30;
  if (has_funcvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->funcvalue(), target);
  }

  // optional uint32 septaward = 31;
  if (has_septaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->septaward(), target);
  }

  // optional uint32 septactive = 32;
  if (has_septactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->septactive(), target);
  }

  // optional uint32 friendvalue = 33;
  if (has_friendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->friendvalue(), target);
  }

  // optional uint32 subprofession = 34;
  if (has_subprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->subprofession(), target);
  }

  // optional uint32 horseid = 35;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->horseid(), target);
  }

  // optional uint64 totalexp = 36;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->totalexp(), target);
  }

  // optional bool zonelimit = 37;
  if (has_zonelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->zonelimit(), target);
  }

  // optional bool countryzone = 38;
  if (has_countryzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->countryzone(), target);
  }

  // repeated uint64 resource = 39;
  for (int i = 0; i < this->resource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(39, this->resource(i), target);
  }

  // optional uint32 petskill = 40;
  if (has_petskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->petskill(), target);
  }

  // optional bool autofight = 41;
  if (has_autofight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->autofight(), target);
  }

  // optional .FPropertyValues propertys = 100;
  if (has_propertys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->propertys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FCharacterMainData)
  return target;
}

int FCharacterMainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FCharacterMapData mapData = 1;
    if (has_mapdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapdata());
    }

    // optional uint32 mp = 4;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // optional uint32 maxmp = 5;
    if (has_maxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmp());
    }

    // optional uint64 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional uint32 strength = 7;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 dexterity = 8;
    if (has_dexterity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dexterity());
    }

    // optional uint32 mentality = 9;
    if (has_mentality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mentality());
    }

    // optional uint32 constitution = 10;
    if (has_constitution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->constitution());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 attrpoint = 12;
    if (has_attrpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrpoint());
    }

    // optional uint32 attackSpeed = 13;
    if (has_attackspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackspeed());
    }

    // optional uint32 minPhysics = 14;
    if (has_minphysics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minphysics());
    }

    // optional uint32 maxPhysics = 15;
    if (has_maxphysics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxphysics());
    }

    // optional uint32 minMagic = 16;
    if (has_minmagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minmagic());
    }

    // optional uint32 maxMagic = 17;
    if (has_maxmagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmagic());
    }

    // optional uint32 pDefence = 18;
    if (has_pdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdefence());
    }

    // optional uint32 mDefence = 19;
    if (has_mdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdefence());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 money = 20;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 bindMoney = 21;
    if (has_bindmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindmoney());
    }

    // optional uint32 gold = 22;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 bindGold = 23;
    if (has_bindgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindgold());
    }

    // optional uint32 luckyRate = 24;
    if (has_luckyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckyrate());
    }

    // optional uint32 antiLuckyRate = 25;
    if (has_antiluckyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antiluckyrate());
    }

    // optional uint32 heavyRate = 26;
    if (has_heavyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heavyrate());
    }

    // optional uint32 antiHeavyRate = 27;
    if (has_antiheavyrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antiheavyrate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 honor = 28;
    if (has_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

    // optional uint32 funcvalue = 30;
    if (has_funcvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funcvalue());
    }

    // optional uint32 septaward = 31;
    if (has_septaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septaward());
    }

    // optional uint32 septactive = 32;
    if (has_septactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->septactive());
    }

    // optional uint32 friendvalue = 33;
    if (has_friendvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendvalue());
    }

    // optional uint32 subprofession = 34;
    if (has_subprofession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subprofession());
    }

    // optional uint32 horseid = 35;
    if (has_horseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horseid());
    }

    // optional uint64 totalexp = 36;
    if (has_totalexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalexp());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool zonelimit = 37;
    if (has_zonelimit()) {
      total_size += 2 + 1;
    }

    // optional bool countryzone = 38;
    if (has_countryzone()) {
      total_size += 2 + 1;
    }

    // optional uint32 petskill = 40;
    if (has_petskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petskill());
    }

    // optional bool autofight = 41;
    if (has_autofight()) {
      total_size += 2 + 1;
    }

    // optional .FPropertyValues propertys = 100;
    if (has_propertys()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->propertys());
    }

  }
  // repeated uint64 resource = 39;
  {
    int data_size = 0;
    for (int i = 0; i < this->resource_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->resource(i));
    }
    total_size += 2 * this->resource_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCharacterMainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FCharacterMainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FCharacterMainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FCharacterMainData::MergeFrom(const FCharacterMainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_.MergeFrom(from.resource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapdata()) {
      mutable_mapdata()->::FCharacterMapData::MergeFrom(from.mapdata());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_maxmp()) {
      set_maxmp(from.maxmp());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_dexterity()) {
      set_dexterity(from.dexterity());
    }
    if (from.has_mentality()) {
      set_mentality(from.mentality());
    }
    if (from.has_constitution()) {
      set_constitution(from.constitution());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attrpoint()) {
      set_attrpoint(from.attrpoint());
    }
    if (from.has_attackspeed()) {
      set_attackspeed(from.attackspeed());
    }
    if (from.has_minphysics()) {
      set_minphysics(from.minphysics());
    }
    if (from.has_maxphysics()) {
      set_maxphysics(from.maxphysics());
    }
    if (from.has_minmagic()) {
      set_minmagic(from.minmagic());
    }
    if (from.has_maxmagic()) {
      set_maxmagic(from.maxmagic());
    }
    if (from.has_pdefence()) {
      set_pdefence(from.pdefence());
    }
    if (from.has_mdefence()) {
      set_mdefence(from.mdefence());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_bindmoney()) {
      set_bindmoney(from.bindmoney());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_luckyrate()) {
      set_luckyrate(from.luckyrate());
    }
    if (from.has_antiluckyrate()) {
      set_antiluckyrate(from.antiluckyrate());
    }
    if (from.has_heavyrate()) {
      set_heavyrate(from.heavyrate());
    }
    if (from.has_antiheavyrate()) {
      set_antiheavyrate(from.antiheavyrate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_funcvalue()) {
      set_funcvalue(from.funcvalue());
    }
    if (from.has_septaward()) {
      set_septaward(from.septaward());
    }
    if (from.has_septactive()) {
      set_septactive(from.septactive());
    }
    if (from.has_friendvalue()) {
      set_friendvalue(from.friendvalue());
    }
    if (from.has_subprofession()) {
      set_subprofession(from.subprofession());
    }
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_zonelimit()) {
      set_zonelimit(from.zonelimit());
    }
    if (from.has_countryzone()) {
      set_countryzone(from.countryzone());
    }
    if (from.has_petskill()) {
      set_petskill(from.petskill());
    }
    if (from.has_autofight()) {
      set_autofight(from.autofight());
    }
    if (from.has_propertys()) {
      mutable_propertys()->::FPropertyValues::MergeFrom(from.propertys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FCharacterMainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCharacterMainData::CopyFrom(const FCharacterMainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCharacterMainData::IsInitialized() const {

  return true;
}

void FCharacterMainData::Swap(FCharacterMainData* other) {
  if (other != this) {
    std::swap(mapdata_, other->mapdata_);
    std::swap(mp_, other->mp_);
    std::swap(maxmp_, other->maxmp_);
    std::swap(exp_, other->exp_);
    std::swap(strength_, other->strength_);
    std::swap(dexterity_, other->dexterity_);
    std::swap(mentality_, other->mentality_);
    std::swap(constitution_, other->constitution_);
    std::swap(attrpoint_, other->attrpoint_);
    std::swap(attackspeed_, other->attackspeed_);
    std::swap(minphysics_, other->minphysics_);
    std::swap(maxphysics_, other->maxphysics_);
    std::swap(minmagic_, other->minmagic_);
    std::swap(maxmagic_, other->maxmagic_);
    std::swap(pdefence_, other->pdefence_);
    std::swap(mdefence_, other->mdefence_);
    std::swap(money_, other->money_);
    std::swap(bindmoney_, other->bindmoney_);
    std::swap(gold_, other->gold_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(luckyrate_, other->luckyrate_);
    std::swap(antiluckyrate_, other->antiluckyrate_);
    std::swap(heavyrate_, other->heavyrate_);
    std::swap(antiheavyrate_, other->antiheavyrate_);
    std::swap(honor_, other->honor_);
    std::swap(funcvalue_, other->funcvalue_);
    std::swap(septaward_, other->septaward_);
    std::swap(septactive_, other->septactive_);
    std::swap(friendvalue_, other->friendvalue_);
    std::swap(subprofession_, other->subprofession_);
    std::swap(horseid_, other->horseid_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(zonelimit_, other->zonelimit_);
    std::swap(countryzone_, other->countryzone_);
    resource_.Swap(&other->resource_);
    std::swap(petskill_, other->petskill_);
    std::swap(autofight_, other->autofight_);
    std::swap(propertys_, other->propertys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FCharacterMainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FCharacterMainData_descriptor_;
  metadata.reflection = FCharacterMainData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
